{"repository_name":"github.com/ziprandom/graphql-crystal","body":"# graphql-crystal [![Build Status](https://api.travis-ci.org/ziprandom/graphql-crystal.svg)](https://travis-ci.org/ziprandom/graphql-crystal)\n\n\nAn implementation of [GraphQL](http://graphql.org/learn/) for the crystal programming language inspired by [graphql-ruby](https://github.com/rmosolgo/graphql-ruby) & [go-graphql](https://github.com/playlyfe/go-graphql).\n\nThe library is in beta state atm. Should already be usable but expect to find bugs (and open issues about them). pull-requests, suggestions & criticism are very welcome!\n\nFind the api docs [here](https://ziprandom.github.io/graphql-crystal/).\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  graphql-crystal:\n    github: ziprandom/graphql-crystal\n```\n\n## Usage\n\nComplete source [here](example/simple_example.cr).\n\nGiven this simple domain model of users and posts\n\n```cr\nclass User\n  property name\n  def initialize(@name : String); end\nend\n\nclass Post\n  property :title, :body, :author\n  def initialize(@title : String, @body : String, @author : User); end\nend\n\nPOSTS = [] of Post\nUSERS = [User.new(\"Alice\"), User.new(\"Bob\")]\n```\n\nWe can instantiate a GraphQL schema directly from a graphql schema definition string\n\n```cr\nschema = GraphQL::Schema.from_schema(\n  %{\n    schema {\n      query: QueryType,\n      mutation: MutationType\n    }\n\n    type QueryType {\n      posts: [PostType]\n      users: [UserType]\n      user(name: String!): User\n    }\n\n    type MutationType {\n      post(post: PostInput) : PostType\n    }\n\n    input PostInput {\n      author: String!\n      title: String!\n      body: String!\n    }\n\n    type UserType {\n      name: String\n      posts: [PostType]\n    }\n\n    type PostType {\n      author: UserType\n      title: String\n      body: String\n    }\n  }\n)\n```\n\nThen we create the backing types by including the ```GraphQL::ObjectType``` and defining the fields using the ```field``` macro\n\n```cr\n# reopening User and Post class\nclass User\n  include GraphQL::ObjectType\n\n  # defaults to the method of\n  # the same name without block\n  field :name\n\n  field :posts do\n    POSTS.select &.author.==(self)\n  end\nend\n\nclass Post\n  include GraphQL::ObjectType\n  field :title\n  field :body\n  field :author\nend\n```\n\nNow we define the top level queries\n\n```cr\n# extend self when using a module or a class (not an instance)\n# as the actual Object\n\nmodule QueryType\n  include GraphQL::ObjectType\n  extend self\n\n  field :users do\n    USERS\n  end\n\n  field :user do |args|\n    USERS.find( &.name.==(args[\"name\"].as(String)) ) || raise \"no user by that name\"\n  end\n\n  field :posts do\n    POSTS\n  end\nend\n\nmodule MutationType\n  include GraphQL::ObjectType\n  extend self\n\n  field :post do |args|\n\n    user = USERS.find &.name.==(\n      args[\"post\"].as(Hash)[\"author\"].as(String)\n    )\n    raise \"author doesn't exist\" unless user\n\n    (\n      POSTS << Post.new(\n        args[\"post\"].as(Hash)[\"title\"].as(String),\n        args[\"post\"].as(Hash)[\"body\"].as(String),\n        user\n      )\n    ).last\n  end\nend\n```\n\nFinally set the top level Object Types on the schema\n\n```cr\nschema.query_resolver = QueryType\nschema.mutation_resolver = MutationType\n```\n\nAnd we are ready to run some tests\n\n```cr\ndescribe \"my graphql schema\" do\n  it \"does queries\" do\n    schema.execute(\"{ users { name posts } }\")\n      .should eq ({\n                    \"data\" => {\n                      \"users\" => [\n                        {\n                          \"name\" => \"Alice\",\n                          \"posts\" => [] of String\n                        },\n                        {\n                          \"name\" => \"Bob\",\n                          \"posts\" => [] of String\n                        }\n                      ]\n                    }\n                  })\n  end\n\n  it \"does mutations\" do\n\n    mutation_string = %{\n      mutation post($post: PostInput) {\n        post(post: $post) {\n          author {\n            name\n            posts { title }\n          }\n          title\n          body\n        }\n      }\n    }\n\n    payload = {\n      \"post\" => {\n        \"author\" =>  \"Alice\",\n        \"title\" => \"the long and windy road\",\n        \"body\" => \"that leads to your door\"\n      }\n    }\n\n    schema.execute(mutation_string, payload)\n      .should eq ({\n                    \"data\" => {\n                      \"post\" => {\n                        \"title\" => \"the long and windy road\",\n                        \"body\" => \"that leads to your door\",\n                        \"author\" => {\n                          \"name\" => \"Alice\",\n                          \"posts\" => [\n                            {\n                              \"title\" => \"the long and windy road\"\n                            }\n                          ]\n                        }\n                      }\n                    }\n                  })\n  end\nend\n```\n\n### Automatic Parsing of JSON Query & Mutation Variables into InputType Structs\n\nTo ease working with input parameters custom structs can be registered to be instantiated from the json params of query and mutation requests. Given the schema from above one can define a PostInput struct as follows\n\n```cr\nstruct PostInput < GraphQL::Schema::InputType\n  JSON.mapping(\n    author: String,\n    title: String,\n    body: String\n  )\nend\n```\n\nand register it in the schema like:\n\n```cr\nschema.add_input_type(\"PostInput\", PostInput)\n```\n\nNow the argument `post` which is expected to be a GraphQL InputType `PostInput` will be automatically parsed into a crystal `PostInput`-struct. Thus the code in the `post` mutation callback becomes more simple:\n\n```cr\nmodule MutationType\n  include GraphQL::ObjectType\n  extend self\n\n  field :post do |args|\n    input = args[\"post\"].as(PostInput)\n\n    author = USERS.find &.name.==(input.author) ||\n           raise \"author doesn't exist\"\n\n    POSTS << Post.new(input.title, input.body, author)\n    POSTS.last\n  end\nend\n```\n\n### Custom Context Types\n\nCustom context types can be used to pass additional information to the object type's field resolves. An example can be found [here](spec/support/custom_context_schema.cr).\n\nA custom context type should inherit from `GraphQL::Schema::Context` and therefore be initialized with the served schema and a max_depth.\n\n```cr\nGraphQL::Schema::Schema#execute(query_string, query_arguments = nil, context = GraphQL::Schema::Context.new(self, max_depth))\n```\naccepts a context type as its third argument.\n\nField resolver callbacks on object types (including top level query & mutation types) get called with the context as their second argument:\n```cr\nfield :users do |args, context|\n  # casting to your custom type\n  # is necessary here\n  context = context.as(CustomContext)\n  unless context.authenticated\n    raise \"Authentication Error\"\n  end\n  ...\nend\n```\n\n### Serving over HTTP\n\nFor an example of how to serve a schema over a webserver([kemal](https://github.com/kemalcr/kemal)) see [kemal-graphql-example](https://github.com/ziprandom/kemal-graphql-example).\n\n## Parser Performance\n\nThe parser has been implemented using my [crystal language toolkit](https://github.com/ziprandom/cltk) and is significantly slower than the c implementation for larger schema strings while performing ok on smaller query strings. See [benchmark/compare_benchmarks.cr](benchmark/compare_benchmarks.cr) for the strings used in the test.\n\nTo compare the performance of the Parser with [facebooks GraphQL parser](https://github.com/graphql/libgraphqlparser) you need to have the library installed on your machine. Then run\n\n```sh\ncrystal build --release benchmark/compare_benchmarks.cr\n```\n\n### Recent Results:\n\n```sh\nSCHEMA String: c implementation from facebook:   64.87k ( 15.41µs) (± 1.89%)       fastest\n     SCHEMA String: cltk based implementation:     1.4k (713.07µs) (± 8.29%) 46.26× slower\nQUERY String: c implementation from facebook:   16.63k ( 60.13µs) (± 2.00%)       fastest\n     QUERY String: cltk based implementation:    5.62k ( 178.0µs) (± 4.34%)  2.96× slower\n```\n\n## Development\n\nrun tests with\n\n```\ncrystal spec\n```\n\n## Contributing\n\n1. Fork it ( https://github.com/ziprandom/graphql-crystal/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [ziprandom](https://github.com/ziprandom)  - creator, maintainer\n","program":{"html_id":"github.com/ziprandom/graphql-crystal/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/ziprandom/graphql-crystal","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"def_graphql_type(extended=false)-macro","html_id":"def_graphql_type(extended=false)-macro","name":"def_graphql_type","doc":null,"summary":null,"abstract":false,"args":[{"name":"extended","doc":null,"default_value":"false","external_name":"extended","restriction":""}],"args_string":"(extended = false)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/object_type.cr#L87","def":{"name":"def_graphql_type","args":[{"name":"extended","doc":null,"default_value":"false","external_name":"extended","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"  \n{% if @type.methods.any? do |__arg0|\n  __arg0.name == \"graphql_type\"\nend %}{% else %}\n    #\n    # get the GraphQL name of this object.\n    # defaults to the class name\n    #\n    def {{ extended ? \"self.\".id : \"\".id }}graphql_type\n      \"{{ @type.name.gsub(/^(.*::)/, \"\") }}\"\n    end\n  {% end %}\n\n\n"}},{"id":"on_all_child_classes-macro","html_id":"on_all_child_classes-macro","name":"on_all_child_classes","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/object_type.cr#L1","def":{"name":"on_all_child_classes","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"  macro injection\n    \n{{ block && block.body }}\n\n  \nend\n\n  macro inject\n    injection\n    macro inherited\n      injection\n    \nend\n  \nend\n\n  inject\n\n"}},{"id":"on_included-macro","html_id":"on_included-macro","name":"on_included","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/object_type.cr#L21","def":{"name":"on_included","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"  on_included_s do\n    on_all_child_classes do\n      GRAPHQL_FIELDS = [] of Tuple(Symbol, String, Hash(String, String)?, String)\n    \nend\n\n    on_all_child_classes do\n\n      macro field(name, &block)\n        field(\\\n\\{\n{name}}, \"\", nil, \"\") \\\n\\{% if\n block.is_a?(Block)%} \\\n\\{\n{block}}\\\n\\{%end\n%}\n      \nend\n\n      macro field(name, description, args, typename, &block)\n        \\\n\\{% \nGRAPHQL_FIELDS << \n{name, description, args, typename} %}\n        private def \\\n\\{\n{name.id}}_field(\\\n\\{\n{(block.is_a?(Block) && block.args.size > 0) ? block.args.first.id : args}}, \\\n\\{\n{((block.is_a?(Block) && block.args.size > 1) ? block.args[1].id : \"context\").id}})\n          \\\n\\{% if\n block.is_a?(Block) %}\n              context.with_self(\\\n\\{\n{(block.is_a?(Block) && block.args.size > 0) ? block.args.first.id : args}}) do\n                \\\n\\{\n{block.body}}\n              \nend\n          \\\n\\{% e\nlse %}\n            \\\n\\{\n{name.id}}\n          \\\n\\{% end\n %}\n        \nend\n      \nend\n    \nend\n\n    on_all_child_classes do\n      field :__typename \n{ self.graphql_type }\n    \nend\n\n    on_all_child_classes do\n      macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \\\n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \\\n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \\\n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\\\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\\n{{ @type }}\n\n\n                      \\\n\\{\n{field[0].id}}_field(arguments, context)\n                      \\\n\\{% end\n %}\n              \nelse\n                \\\n\\{% if\n prev_def.is_a?(Def) %}\n                    \\\n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \\\n\\{\n{prev_def.body}}\n                \\\n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \\\n\\{% end\n %}\n              \nend\n          \\\n\\{% e\nlse %}\n             \\\n\\{% if\n prev_def.is_a?(Def) %}\n                 \\\n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \\\n\\{\n{prev_def.body}}\n             \\\n\\{% e\nlse %}\n               super(name, arguments, context)\n             \\\n\\{% end\n %}\n          \\\n\\{% end\n %}\n        \nend\n      \nend\n    \nend\n\n  \nend\n\n"}},{"id":"on_included_s-macro","html_id":"on_included_s-macro","name":"on_included_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/object_type.cr#L17","def":{"name":"on_included_s","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"  \n{{ block.body.stringify.id }}\n\n\n"}}],"types":[{"html_id":"github.com/ziprandom/graphql-crystal/CLTK","path":"CLTK.html","kind":"module","full_name":"CLTK","name":"CLTK","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lib/cltk/src/cltk/lexer/exceptions.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/lexer/exceptions.cr"},{"filename":"lib/cltk/src/cltk/scanner.cr","line_number":3,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/scanner.cr"},{"filename":"lib/cltk/src/cltk/ast.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/ast.cr"},{"filename":"graphql-crystal/language/type.cr","line_number":3,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/type.cr"},{"filename":"lib/cltk/src/cltk/streamposition.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/streamposition.cr"},{"filename":"lib/cltk/src/cltk/token.cr","line_number":8,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/token.cr"},{"filename":"lib/cltk/src/cltk/lexers/ebnf.cr","line_number":16,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/lexers/ebnf.cr"},{"filename":"lib/cltk/src/cltk/cfg/production.cr","line_number":2,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/cfg/production.cr"},{"filename":"lib/cltk/src/cltk/cfg/item.cr","line_number":2,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/cfg/item.cr"},{"filename":"lib/cltk/src/cltk/cfg.cr","line_number":12,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/cfg.cr"},{"filename":"lib/cltk/src/cltk/parser/exceptions/bad_token_exception.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser/exceptions/bad_token_exception.cr"},{"filename":"lib/cltk/src/cltk/parser/exceptions/internal_parser_exception.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser/exceptions/internal_parser_exception.cr"},{"filename":"lib/cltk/src/cltk/parser/exceptions/parser_construction_exception.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser/exceptions/parser_construction_exception.cr"},{"filename":"lib/cltk/src/cltk/parser/exceptions/handled_error_exception.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser/exceptions/handled_error_exception.cr"},{"filename":"lib/cltk/src/cltk/parser/exceptions/not_in_language_exception.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser/exceptions/not_in_language_exception.cr"},{"filename":"lib/cltk/src/cltk/parser/exceptions/useless_parser_exception.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser/exceptions/useless_parser_exception.cr"},{"filename":"lib/cltk/src/cltk/parser/environment.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser/environment.cr"},{"filename":"lib/cltk/src/cltk/parser/type.cr","line_number":2,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser/type.cr"},{"filename":"lib/cltk/src/cltk/parser/parse_stack.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser/parse_stack.cr"},{"filename":"lib/cltk/src/cltk/parser/state.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser/state.cr"},{"filename":"lib/cltk/src/cltk/parser/prod_proc.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser/prod_proc.cr"},{"filename":"lib/cltk/src/cltk/parser/actions.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser/actions.cr"},{"filename":"lib/cltk/src/cltk/parser/msgpack.cr","line_number":5,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser/msgpack.cr"},{"filename":"lib/cltk/src/cltk/parser.cr","line_number":36,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/parser.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The CLTK root module","summary":"<p>The CLTK root module</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/TokenValue","path":"CLTK/TokenValue.html","kind":"alias","full_name":"CLTK::TokenValue","name":"TokenValue","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/language/type.cr","line_number":4,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/type.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":true,"aliased":"(Float64 | Int32 | String | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/Type","path":"CLTK/Type.html","kind":"alias","full_name":"CLTK::Type","name":"Type","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/language/type.cr","line_number":5,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/type.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":true,"aliased":"(Array(CLTK::Type) | Bool | Float64 | GraphQL::Language::AbstractNode | Int32 | String | Tuple(String, String) | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL","path":"GraphQL.html","kind":"module","full_name":"GraphQL","name":"GraphQL","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/schema/middleware.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/middleware.cr"},{"filename":"graphql-crystal/directives/directive.cr","line_number":3,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/directive.cr"},{"filename":"graphql-crystal/directives/deprecated_directive.cr","line_number":3,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/deprecated_directive.cr"},{"filename":"graphql-crystal/directives/include_directive.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/include_directive.cr"},{"filename":"graphql-crystal/directives/skip_directive.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/skip_directive.cr"},{"filename":"graphql-crystal/language/generation.cr","line_number":3,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr"},{"filename":"graphql-crystal/types/object_type.cr","line_number":99,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/object_type.cr"},{"filename":"graphql-crystal/language/nodes.cr","line_number":6,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/language/lexer.cr","line_number":4,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/lexer.cr"},{"filename":"graphql-crystal/language/parser.cr","line_number":6,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr"},{"filename":"graphql-crystal/types/type_validation.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/type_validation.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"},{"filename":"graphql-crystal/schema/schema.cr","line_number":3,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr"},{"filename":"graphql-crystal/schema/fragment_resolver.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/fragment_resolver.cr"},{"filename":"graphql-crystal/schema/introspection_query.cr","line_number":4,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/introspection_query.cr"},{"filename":"graphql-crystal/schema/schema_execute.cr","line_number":2,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr"},{"filename":"graphql-crystal/schema/variable_resolver.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr"},{"filename":"graphql-crystal/schema.cr","line_number":11,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr"},{"filename":"graphql-crystal/version.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/version.cr"},{"filename":"graphql-crystal.cr","line_number":4,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"require \"./schema/schema_execute\"\nrequire \"./schema/validation\"\nrequire \"./schema/variable_resolver.cr\"\nrequire \"./schema/fragment_resolver\"","summary":"<p>require \"./schema/schema_execute\" require \"./schema/validation\" require \"./schema/variable_resolver.cr\" require \"./schema/fragment_resolver\"</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directive","path":"GraphQL/Directive.html","kind":"module","full_name":"GraphQL::Directive","name":"Directive","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Middleware","kind":"module","full_name":"GraphQL::Schema::Middleware","name":"Middleware"}],"locations":[{"filename":"graphql-crystal/directives/directive.cr","line_number":8,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/directive.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Middleware","kind":"module","full_name":"GraphQL::Schema::Middleware","name":"Middleware"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directives/IncludeDirective","kind":"class","full_name":"GraphQL::Directives::IncludeDirective","name":"IncludeDirective"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directives/SkipDirective","kind":"class","full_name":"GraphQL::Directives::SkipDirective","name":"SkipDirective"}],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL","kind":"module","full_name":"GraphQL","name":"GraphQL"},"doc":"\nA module to be included in a\ndirective to act as a middleware\n","summary":"<p>A module to be included in a directive to act as a middleware </p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"args:Hash(String,ReturnType)?-instance-method","html_id":"args:Hash(String,ReturnType)?-instance-method","name":"args","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, ReturnType)?","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/directive.cr#L10","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/directive.cr#L10","def":{"name":"args","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, ReturnType) | ::Nil","visibility":"Public","body":"@args"}},{"id":"args=(args:Hash(String,ReturnType)?)-instance-method","html_id":"args=(args:Hash(String,ReturnType)?)-instance-method","name":"args=","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Hash(String, ReturnType) | ::Nil"}],"args_string":"(args : Hash(String, ReturnType)?)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/directive.cr#L10","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/directive.cr#L10","def":{"name":"args=","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Hash(String, ReturnType) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@args = args"}},{"id":"call(*args)-instance-method","html_id":"call(*args)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/directive.cr#L12","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/directive.cr#L12","def":{"name":"call","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"call_next(*args)"}}],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directives","path":"GraphQL/Directives.html","kind":"module","full_name":"GraphQL::Directives","name":"Directives","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/directives/deprecated_directive.cr","line_number":4,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/deprecated_directive.cr"},{"filename":"graphql-crystal/directives/include_directive.cr","line_number":2,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/include_directive.cr"},{"filename":"graphql-crystal/directives/skip_directive.cr","line_number":2,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/skip_directive.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL","kind":"module","full_name":"GraphQL","name":"GraphQL"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directives/IncludeDirective","path":"GraphQL/Directives/IncludeDirective.html","kind":"class","full_name":"GraphQL::Directives::IncludeDirective","name":"IncludeDirective","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directive","kind":"module","full_name":"GraphQL::Directive","name":"Directive"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Middleware","kind":"module","full_name":"GraphQL::Schema::Middleware","name":"Middleware"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/directives/include_directive.cr","line_number":6,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/include_directive.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directive","kind":"module","full_name":"GraphQL::Directive","name":"Directive"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directives","kind":"module","full_name":"GraphQL::Directives","name":"Directives"},"doc":"\nThe @include(if: ...) directive\n","summary":"<p>The @include(if: ...) directive </p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"call(_field_definition,_selections,_resolved,_context)-instance-method","html_id":"call(_field_definition,_selections,_resolved,_context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"_field_definition","doc":null,"default_value":"","external_name":"_field_definition","restriction":""},{"name":"_selections","doc":null,"default_value":"","external_name":"_selections","restriction":""},{"name":"_resolved","doc":null,"default_value":"","external_name":"_resolved","restriction":""},{"name":"_context","doc":null,"default_value":"","external_name":"_context","restriction":""}],"args_string":"(_field_definition, _selections, _resolved, _context)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/include_directive.cr#L11","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/include_directive.cr#L11","def":{"name":"call","args":[{"name":"_field_definition","doc":null,"default_value":"","external_name":"_field_definition","restriction":""},{"name":"_selections","doc":null,"default_value":"","external_name":"_selections","restriction":""},{"name":"_resolved","doc":null,"default_value":"","external_name":"_resolved","restriction":""},{"name":"_context","doc":null,"default_value":"","external_name":"_context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if args.try(&.[](\"if\"))\n  call_next(_field_definition, _selections, _resolved, _context)\nelse\n  {nil, [] of Error}\nend"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/include_directive.cr#L8","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/include_directive.cr#L8","def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name"}}],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directives/IsDeprecated","path":"GraphQL/Directives/IsDeprecated.html","kind":"module","full_name":"GraphQL::Directives::IsDeprecated","name":"IsDeprecated","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/directives/deprecated_directive.cr","line_number":10,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/deprecated_directive.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/EnumValueDefinition","kind":"class","full_name":"GraphQL::Language::EnumValueDefinition","name":"EnumValueDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/FieldDefinition","kind":"class","full_name":"GraphQL::Language::FieldDefinition","name":"FieldDefinition"}],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directives","kind":"module","full_name":"GraphQL::Directives","name":"Directives"},"doc":"\nDirective that allows to annote\nfields as deprecated in the schema\ndefinition\n","summary":"<p>Directive that allows to annote fields as deprecated in the schema definition </p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directives/SkipDirective","path":"GraphQL/Directives/SkipDirective.html","kind":"class","full_name":"GraphQL::Directives::SkipDirective","name":"SkipDirective","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directive","kind":"module","full_name":"GraphQL::Directive","name":"Directive"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Middleware","kind":"module","full_name":"GraphQL::Schema::Middleware","name":"Middleware"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/directives/skip_directive.cr","line_number":6,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/skip_directive.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directive","kind":"module","full_name":"GraphQL::Directive","name":"Directive"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directives","kind":"module","full_name":"GraphQL::Directives","name":"Directives"},"doc":"\nThe @skip(if: ...) directive\n","summary":"<p>The @skip(if: ...) directive </p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"call(_field_definition,_selections,_resolved,_context)-instance-method","html_id":"call(_field_definition,_selections,_resolved,_context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"_field_definition","doc":null,"default_value":"","external_name":"_field_definition","restriction":""},{"name":"_selections","doc":null,"default_value":"","external_name":"_selections","restriction":""},{"name":"_resolved","doc":null,"default_value":"","external_name":"_resolved","restriction":""},{"name":"_context","doc":null,"default_value":"","external_name":"_context","restriction":""}],"args_string":"(_field_definition, _selections, _resolved, _context)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/skip_directive.cr#L11","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/skip_directive.cr#L11","def":{"name":"call","args":[{"name":"_field_definition","doc":null,"default_value":"","external_name":"_field_definition","restriction":""},{"name":"_selections","doc":null,"default_value":"","external_name":"_selections","restriction":""},{"name":"_resolved","doc":null,"default_value":"","external_name":"_resolved","restriction":""},{"name":"_context","doc":null,"default_value":"","external_name":"_context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if args.try(&.[](\"if\"))\n  {nil, [] of Error}\nelse\n  call_next(_field_definition, _selections, _resolved, _context)\nend"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/skip_directive.cr#L8","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/directives/skip_directive.cr#L8","def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name"}}],"macros":[],"types":[]}]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Error","path":"GraphQL/Error.html","kind":"alias","full_name":"GraphQL::Error","name":"Error","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/schema.cr","line_number":13,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(message: String, path: Array(Int32 | String))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL","kind":"module","full_name":"GraphQL","name":"GraphQL"},"doc":"Record the message and path of a resolution error","summary":"<p>Record the message and path of a resolution error</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","path":"GraphQL/Language.html","kind":"module","full_name":"GraphQL::Language","name":"Language","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/language/generation.cr","line_number":4,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr"},{"filename":"graphql-crystal/language/nodes.cr","line_number":7,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/language/lexer.cr","line_number":5,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/lexer.cr"},{"filename":"graphql-crystal/language/parser.cr","line_number":7,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr"},{"filename":"graphql-crystal/language.cr","line_number":6,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":255,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL","kind":"module","full_name":"GraphQL","name":"GraphQL"},"doc":null,"summary":null,"class_methods":[{"id":"parse(query_string,options=NamedTuple.new):GraphQL::Language::Document-class-method","html_id":"parse(query_string,options=NamedTuple.new):GraphQL::Language::Document-class-method","name":"parse","doc":"\nParse a query string and return the Document\n","summary":"<p>Parse a query string and return the Document </p>","abstract":false,"args":[{"name":"query_string","doc":null,"default_value":"","external_name":"query_string","restriction":""},{"name":"options","doc":null,"default_value":"NamedTuple.new","external_name":"options","restriction":""}],"args_string":"(query_string, options = <span class=\"t\">NamedTuple</span>.<span class=\"k\">new</span>) : GraphQL::Language::Document","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language.cr#L10","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language.cr#L10","def":{"name":"parse","args":[{"name":"query_string","doc":null,"default_value":"","external_name":"query_string","restriction":""},{"name":"options","doc":null,"default_value":"NamedTuple.new","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"GraphQL::Language::Document","visibility":"Public","body":"begin\n  (GraphQL::Language::Parser.parse(GraphQL::Language::Lexer.lex(query_string), options)).as(GraphQL::Language::Document)\nrescue e : CLTK::Parser::Exceptions::NotInLanguage\n  raise(e)\nend"}},{"id":"to_argumentvalue(value:Array):ArgumentValue-class-method","html_id":"to_argumentvalue(value:Array):ArgumentValue-class-method","name":"to_argumentvalue","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Array"}],"args_string":"(value : Array) : ArgumentValue","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L106","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L106","def":{"name":"to_argumentvalue","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Array"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ArgumentValue","visibility":"Public","body":"_values = [] of ArgumentValue\nvalue.each do |val|\n  _values << (to_argumentvalue(val))\nend\n_values\n"}},{"id":"to_argumentvalue(value)-class-method","html_id":"to_argumentvalue(value)-class-method","name":"to_argumentvalue","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L106","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L106","def":{"name":"to_argumentvalue","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ArgumentValue\nvalue.as(ArgumentValue)\n"}},{"id":"to_fvalue(value:Array):FValue-class-method","html_id":"to_fvalue(value:Array):FValue-class-method","name":"to_fvalue","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Array"}],"args_string":"(value : Array) : FValue","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L94","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L94","def":{"name":"to_fvalue","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Array"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"FValue","visibility":"Public","body":"_values = [] of FValue\nvalue.each do |val|\n  _values << (to_fvalue(val))\nend\n_values\n"}},{"id":"to_fvalue(value)-class-method","html_id":"to_fvalue(value)-class-method","name":"to_fvalue","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L94","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L94","def":{"name":"to_fvalue","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"FValue\nvalue.as(FValue)\n"}}],"constructors":[],"instance_methods":[],"macros":[{"id":"define_array_cast(type)-macro","html_id":"define_array_cast(type)-macro","name":"define_array_cast","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"args_string":"(type)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L8","def":{"name":"define_array_cast","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      def self.to_\n{{ type.id.downcase }}\n(value : Array) : \n{{ type.id }}\n\n        _values = [] of \n{{ type.id }}\n\n        value.each do |val|\n          _values << to_\n{{ type.id.downcase }}\n(val)\n        \nend\n        _values\n      \nend\n\n      def self.to_\n{{ type.id.downcase }}\n(value) \n{{ type.id }}\n\n        value.as(\n{{ type.id }}\n)\n      \nend\n    \n"}}],"types":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","path":"GraphQL/Language/AbstractNode.html","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":22,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"}],"extended_modules":[],"subclasses":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/Argument","kind":"class","full_name":"GraphQL::Language::Argument","name":"Argument"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/Directive","kind":"class","full_name":"GraphQL::Language::Directive","name":"Directive"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/DirectiveDefinition","kind":"class","full_name":"GraphQL::Language::DirectiveDefinition","name":"DirectiveDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/Document","kind":"class","full_name":"GraphQL::Language::Document","name":"Document"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/EnumValueDefinition","kind":"class","full_name":"GraphQL::Language::EnumValueDefinition","name":"EnumValueDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/Field","kind":"class","full_name":"GraphQL::Language::Field","name":"Field"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/FieldDefinition","kind":"class","full_name":"GraphQL::Language::FieldDefinition","name":"FieldDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/FragmentDefinition","kind":"class","full_name":"GraphQL::Language::FragmentDefinition","name":"FragmentDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/FragmentSpread","kind":"class","full_name":"GraphQL::Language::FragmentSpread","name":"FragmentSpread"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/InlineFragment","kind":"class","full_name":"GraphQL::Language::InlineFragment","name":"InlineFragment"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/InputObject","kind":"class","full_name":"GraphQL::Language::InputObject","name":"InputObject"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/InputValueDefinition","kind":"class","full_name":"GraphQL::Language::InputValueDefinition","name":"InputValueDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NameOnlyNode","kind":"class","full_name":"GraphQL::Language::NameOnlyNode","name":"NameOnlyNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/OperationDefinition","kind":"class","full_name":"GraphQL::Language::OperationDefinition","name":"OperationDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/SchemaDefinition","kind":"class","full_name":"GraphQL::Language::SchemaDefinition","name":"SchemaDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/VariableDefinition","kind":"class","full_name":"GraphQL::Language::VariableDefinition","name":"VariableDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/WrapperType","kind":"class","full_name":"GraphQL::Language::WrapperType","name":"WrapperType"}],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"new","args":[],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::AbstractNode)-instance-method","html_id":"==(other:GraphQL::Language::AbstractNode)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::AbstractNode"}],"args_string":"(other : GraphQL::Language::AbstractNode)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::AbstractNode"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  super(other)\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  super(name, arguments, context)\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::AbstractNode\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AEnum","path":"GraphQL/Language/AEnum.html","kind":"class","full_name":"GraphQL::Language::AEnum","name":"AEnum","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NameOnlyNode","kind":"class","full_name":"GraphQL::Language::NameOnlyNode","name":"NameOnlyNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NameOnlyNode","kind":"class","full_name":"GraphQL::Language::NameOnlyNode","name":"NameOnlyNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":192,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[] of Tuple(Symbol, Object.class)","doc":"An enum value. The string is available as {#name}.","summary":"<p>An enum value.</p>"},{"name":"VISITS","value":"[] of Tuple(Symbol, Array(Symbol))","doc":"An enum value. The string is available as {#name}.","summary":"<p>An enum value.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"An enum value. The string is available as {#name}.","summary":"<p>An enum value.</p>","class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"new","args":[],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::AEnum)-instance-method","html_id":"==(other:GraphQL::Language::AEnum)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::AEnum"}],"args_string":"(other : GraphQL::Language::AEnum)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::AEnum"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  super(other)\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          name, arguments, context = name, arguments, context\n          case name\n          when \"__typename\"\n            __typename_field(arguments, context)\n          else\n            name, arguments, context = name, arguments, context\n            case name\n            when \"__typename\"\n              __typename_field(arguments, context)\n            else\n              name, arguments, context = name, arguments, context\n              case name\n              when \"__typename\"\n                __typename_field(arguments, context)\n              else\n                name, arguments, context = name, arguments, context\n                case name\n                when \"__typename\"\n                  __typename_field(arguments, context)\n                else\n                  super(name, arguments, context)\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"}},{"id":"to_value-instance-method","html_id":"to_value-instance-method","name":"to_value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L193","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L193","def":{"name":"to_value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"name"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::AEnum\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/Argument","path":"GraphQL/Language/Argument.html","kind":"class","full_name":"GraphQL::Language::Argument","name":"Argument","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":108,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{name, String}, {value, ArgumentValue}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: String, value: ArgumentValue))"}}],"constructors":[{"id":"new(name,value,**rest)-class-method","html_id":"new(name,value,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(name, value, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, value, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::Argument)-instance-method","html_id":"==(other:GraphQL::Language::Argument)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::Argument"}],"args_string":"(other : GraphQL::Language::Argument)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::Argument"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  ((@name == other.name) && (@value == other.value)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"name=(name:String)-instance-method","html_id":"name=(name:String)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":null,"source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"to_value-instance-method","html_id":"to_value-instance-method","name":"to_value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L111","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L111","def":{"name":"to_value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value"}},{"id":"value:ArgumentValue-instance-method","html_id":"value:ArgumentValue-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ArgumentValue","source_link":null,"source_link":null,"def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ArgumentValue","visibility":"Public","body":"@value"}},{"id":"value=(value:ArgumentValue)-instance-method","html_id":"value=(value:ArgumentValue)-instance-method","name":"value=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"ArgumentValue"}],"args_string":"(value : ArgumentValue)","source_link":null,"source_link":null,"def":{"name":"value=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"ArgumentValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value = value"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: @name, value: @value))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::Argument\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/ArgumentValue","path":"GraphQL/Language/ArgumentValue.html","kind":"alias","full_name":"GraphQL::Language::ArgumentValue","name":"ArgumentValue","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":104,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":true,"aliased":"(Array(GraphQL::Language::ArgumentValue) | Array(GraphQL::ReturnType) | Bool | Float64 | GraphQL::Language::AbstractNode | GraphQL::Schema::InputType | Hash(String, GraphQL::ReturnType) | Int32 | Int64 | String | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/Directive","path":"GraphQL/Language/Directive.html","kind":"class","full_name":"GraphQL::Language::Directive","name":"Directive","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":87,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{name, String}, {arguments, Array(Argument)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:arguments]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: String, arguments: Array(Argument)))"}}],"constructors":[{"id":"new(name,arguments,**rest)-class-method","html_id":"new(name,arguments,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""}],"args_string":"(name, arguments, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, arguments, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::Directive)-instance-method","html_id":"==(other:GraphQL::Language::Directive)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::Directive"}],"args_string":"(other : GraphQL::Language::Directive)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::Directive"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  ((@name == other.name) && (@arguments == other.arguments)) && (super(other))\nend"}},{"id":"arguments:Array(Argument)-instance-method","html_id":"arguments:Array(Argument)-instance-method","name":"arguments","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Argument)","source_link":null,"source_link":null,"def":{"name":"arguments","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Argument)","visibility":"Public","body":"@arguments"}},{"id":"arguments=(arguments:Array(Argument))-instance-method","html_id":"arguments=(arguments:Array(Argument))-instance-method","name":"arguments=","doc":null,"summary":null,"abstract":false,"args":[{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":"Array(Argument)"}],"args_string":"(arguments : Array(Argument))","source_link":null,"source_link":null,"def":{"name":"arguments=","args":[{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":"Array(Argument)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@arguments = arguments"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"name=(name:String)-instance-method","html_id":"name=(name:String)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":null,"source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: @name, arguments: @arguments))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_39 = arguments\n  if __temp_39.is_a?(Array)\n    __temp_40 = __temp_39.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_39 == nil) || (visited_ids.includes?(__temp_39.object_id))\n    else\n      visited_ids << __temp_39.object_id\n      __temp_40 = __temp_39.not_nil!.visit(name, visited_ids, block)\n      self.arguments = (      __temp_40)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::Directive\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/DirectiveDefinition","path":"GraphQL/Language/DirectiveDefinition.html","kind":"class","full_name":"GraphQL::Language::DirectiveDefinition","name":"DirectiveDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":82,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":359,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:name, \"\", nil, \"\"}, {:description, \"\", nil, \"\"}, {:args, \"\", nil, \"\"}, {:locations, \"\", nil, \"\"}, {:onOperation, \"\", nil, \"\"}, {:onFragment, \"\", nil, \"\"}, {:onField, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{name, String}, {arguments, Array(InputValueDefinition)}, {locations, Array(String)}, {description, ::Union(String, ::Nil)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:arguments]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: String, arguments: Array(InputValueDefinition), locations: Array(String), description: ::Union(String, ::Nil)))"}}],"constructors":[{"id":"new(name,arguments,locations,description,**rest)-class-method","html_id":"new(name,arguments,locations,description,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"locations","doc":null,"default_value":"","external_name":"locations","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""}],"args_string":"(name, arguments, locations, description, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"locations","doc":null,"default_value":"","external_name":"locations","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, arguments, locations, description, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::DirectiveDefinition)-instance-method","html_id":"==(other:GraphQL::Language::DirectiveDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::DirectiveDefinition"}],"args_string":"(other : GraphQL::Language::DirectiveDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::DirectiveDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  ((((@name == other.name) && (@arguments == other.arguments)) && (@locations == other.locations)) && (@description == other.description)) && (super(other))\nend"}},{"id":"arguments:Array(InputValueDefinition)-instance-method","html_id":"arguments:Array(InputValueDefinition)-instance-method","name":"arguments","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(InputValueDefinition)","source_link":null,"source_link":null,"def":{"name":"arguments","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(InputValueDefinition)","visibility":"Public","body":"@arguments"}},{"id":"arguments=(arguments:Array(InputValueDefinition))-instance-method","html_id":"arguments=(arguments:Array(InputValueDefinition))-instance-method","name":"arguments=","doc":null,"summary":null,"abstract":false,"args":[{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":"Array(InputValueDefinition)"}],"args_string":"(arguments : Array(InputValueDefinition))","source_link":null,"source_link":null,"def":{"name":"arguments=","args":[{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":"Array(InputValueDefinition)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@arguments = arguments"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"description:::Union(String,Nil)-instance-method","html_id":"description:::Union(String,Nil)-instance-method","name":"description","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Union(String, Nil)","source_link":null,"source_link":null,"def":{"name":"description","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Union(String, ::Nil)","visibility":"Public","body":"@description"}},{"id":"description=(description:::Union(String,Nil))-instance-method","html_id":"description=(description:::Union(String,Nil))-instance-method","name":"description=","doc":null,"summary":null,"abstract":false,"args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"::Union(String, ::Nil)"}],"args_string":"(description : ::Union(String, Nil))","source_link":null,"source_link":null,"def":{"name":"description=","args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"::Union(String, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@description = description"}},{"id":"locations:Array(String)-instance-method","html_id":"locations:Array(String)-instance-method","name":"locations","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)","source_link":null,"source_link":null,"def":{"name":"locations","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"@locations"}},{"id":"locations=(locations:Array(String))-instance-method","html_id":"locations=(locations:Array(String))-instance-method","name":"locations=","doc":null,"summary":null,"abstract":false,"args":[{"name":"locations","doc":null,"default_value":"","external_name":"locations","restriction":"Array(String)"}],"args_string":"(locations : Array(String))","source_link":null,"source_link":null,"def":{"name":"locations=","args":[{"name":"locations","doc":null,"default_value":"","external_name":"locations","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@locations = locations"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"name=(name:String)-instance-method","html_id":"name=(name:String)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":null,"source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"name\"\n  name_field(arguments, context)\nwhen \"description\"\n  description_field(arguments, context)\nwhen \"args\"\n  args_field(arguments, context)\nwhen \"locations\"\n  locations_field(arguments, context)\nwhen \"onOperation\"\n  onOperation_field(arguments, context)\nwhen \"onFragment\"\n  onFragment_field(arguments, context)\nwhen \"onField\"\n  onField_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"name\"\n    name_field(arguments, context)\n  when \"description\"\n    description_field(arguments, context)\n  when \"args\"\n    args_field(arguments, context)\n  when \"locations\"\n    locations_field(arguments, context)\n  when \"onOperation\"\n    onOperation_field(arguments, context)\n  when \"onFragment\"\n    onFragment_field(arguments, context)\n  when \"onField\"\n    onField_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"name\"\n      name_field(arguments, context)\n    when \"description\"\n      description_field(arguments, context)\n    when \"args\"\n      args_field(arguments, context)\n    when \"locations\"\n      locations_field(arguments, context)\n    when \"onOperation\"\n      onOperation_field(arguments, context)\n    when \"onFragment\"\n      onFragment_field(arguments, context)\n    when \"onField\"\n      onField_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"name\"\n        name_field(arguments, context)\n      when \"description\"\n        description_field(arguments, context)\n      when \"args\"\n        args_field(arguments, context)\n      when \"locations\"\n        locations_field(arguments, context)\n      when \"onOperation\"\n        onOperation_field(arguments, context)\n      when \"onFragment\"\n        onFragment_field(arguments, context)\n      when \"onField\"\n        onField_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"name\"\n          name_field(arguments, context)\n        when \"description\"\n          description_field(arguments, context)\n        when \"args\"\n          args_field(arguments, context)\n        when \"locations\"\n          locations_field(arguments, context)\n        when \"onOperation\"\n          onOperation_field(arguments, context)\n        when \"onFragment\"\n          onFragment_field(arguments, context)\n        when \"onField\"\n          onField_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: @name, arguments: @arguments, locations: @locations, description: @description))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_37 = arguments\n  if __temp_37.is_a?(Array)\n    __temp_38 = __temp_37.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_37 == nil) || (visited_ids.includes?(__temp_37.object_id))\n    else\n      visited_ids << __temp_37.object_id\n      __temp_38 = __temp_37.not_nil!.visit(name, visited_ids, block)\n      self.arguments = (      __temp_38)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::DirectiveDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/Document","path":"GraphQL/Language/Document.html","kind":"class","full_name":"GraphQL::Language::Document","name":"Document","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":50,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{definitions, Array(OperationDefinition | FragmentDefinition)}] of Tuple(Symbol, Object.class)","doc":"This is the AST root for normal queries\n\n@example Deriving a document by parsing a string\n  document = GraphQL.parse(query_string)\n\n@example Creating a string from a document\n  document.to_query_string\n  # { ... }\n","summary":"<p>This is the AST root for normal queries</p>"},{"name":"VISITS","value":"[{:children, [:definitions]}] of Tuple(Symbol, Array(Symbol))","doc":"This is the AST root for normal queries\n\n@example Deriving a document by parsing a string\n  document = GraphQL.parse(query_string)\n\n@example Creating a string from a document\n  document.to_query_string\n  # { ... }\n","summary":"<p>This is the AST root for normal queries</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"This is the AST root for normal queries\n\n@example Deriving a document by parsing a string\n  document = GraphQL.parse(query_string)\n\n@example Creating a string from a document\n  document.to_query_string\n  # { ... }\n","summary":"<p>This is the AST root for normal queries</p>","class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(definitions: Array(OperationDefinition | FragmentDefinition)))"}}],"constructors":[{"id":"new(definitions,**rest)-class-method","html_id":"new(definitions,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"definitions","doc":null,"default_value":"","external_name":"definitions","restriction":""}],"args_string":"(definitions, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"definitions","doc":null,"default_value":"","external_name":"definitions","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(definitions, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::Document)-instance-method","html_id":"==(other:GraphQL::Language::Document)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::Document"}],"args_string":"(other : GraphQL::Language::Document)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::Document"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  (@definitions == other.definitions) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"definitions:Array(OperationDefinition|FragmentDefinition)-instance-method","html_id":"definitions:Array(OperationDefinition|FragmentDefinition)-instance-method","name":"definitions","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(OperationDefinition | FragmentDefinition)","source_link":null,"source_link":null,"def":{"name":"definitions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(OperationDefinition | FragmentDefinition)","visibility":"Public","body":"@definitions"}},{"id":"definitions=(definitions:Array(OperationDefinition|FragmentDefinition))-instance-method","html_id":"definitions=(definitions:Array(OperationDefinition|FragmentDefinition))-instance-method","name":"definitions=","doc":null,"summary":null,"abstract":false,"args":[{"name":"definitions","doc":null,"default_value":"","external_name":"definitions","restriction":"Array(OperationDefinition | FragmentDefinition)"}],"args_string":"(definitions : Array(OperationDefinition | FragmentDefinition))","source_link":null,"source_link":null,"def":{"name":"definitions=","args":[{"name":"definitions","doc":null,"default_value":"","external_name":"definitions","restriction":"Array(OperationDefinition | FragmentDefinition)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@definitions = definitions"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"to_query_string-instance-method","html_id":"to_query_string-instance-method","name":"to_query_string","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L54","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L54","def":{"name":"to_query_string","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"GraphQL::Language::Generation.generate(self)"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(definitions: @definitions))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_31 = definitions\n  if __temp_31.is_a?(Array)\n    __temp_32 = __temp_31.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_31 == nil) || (visited_ids.includes?(__temp_31.object_id))\n    else\n      visited_ids << __temp_31.object_id\n      __temp_32 = __temp_31.not_nil!.visit(name, visited_ids, block)\n      self.definitions = (      __temp_32)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::Document\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/EnumTypeDefinition","path":"GraphQL/Language/EnumTypeDefinition.html","kind":"class","full_name":"GraphQL::Language::EnumTypeDefinition","name":"EnumTypeDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":241,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":308,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:kind, \"\", nil, \"\"}, {:enumValues, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{fvalues, Array(EnumValueDefinition)}, {directives, Array(Directive)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:directives]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(fvalues: Array(EnumValueDefinition), directives: Array(Directive)))"}}],"constructors":[{"id":"new(fvalues,directives,**rest)-class-method","html_id":"new(fvalues,directives,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"fvalues","doc":null,"default_value":"","external_name":"fvalues","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"args_string":"(fvalues, directives, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"fvalues","doc":null,"default_value":"","external_name":"fvalues","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(fvalues, directives, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::EnumTypeDefinition)-instance-method","html_id":"==(other:GraphQL::Language::EnumTypeDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::EnumTypeDefinition"}],"args_string":"(other : GraphQL::Language::EnumTypeDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::EnumTypeDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  ((@fvalues == other.fvalues) && (@directives == other.directives)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"fvalues:Array(EnumValueDefinition)-instance-method","html_id":"fvalues:Array(EnumValueDefinition)-instance-method","name":"fvalues","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(EnumValueDefinition)","source_link":null,"source_link":null,"def":{"name":"fvalues","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(EnumValueDefinition)","visibility":"Public","body":"@fvalues"}},{"id":"fvalues=(fvalues:Array(EnumValueDefinition))-instance-method","html_id":"fvalues=(fvalues:Array(EnumValueDefinition))-instance-method","name":"fvalues=","doc":null,"summary":null,"abstract":false,"args":[{"name":"fvalues","doc":null,"default_value":"","external_name":"fvalues","restriction":"Array(EnumValueDefinition)"}],"args_string":"(fvalues : Array(EnumValueDefinition))","source_link":null,"source_link":null,"def":{"name":"fvalues=","args":[{"name":"fvalues","doc":null,"default_value":"","external_name":"fvalues","restriction":"Array(EnumValueDefinition)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@fvalues = fvalues"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"kind\"\n  kind_field(arguments, context)\nwhen \"enumValues\"\n  enumValues_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"kind\"\n    kind_field(arguments, context)\n  when \"enumValues\"\n    enumValues_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"kind\"\n      kind_field(arguments, context)\n    when \"enumValues\"\n      enumValues_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"kind\"\n        kind_field(arguments, context)\n      when \"enumValues\"\n        enumValues_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"kind\"\n          kind_field(arguments, context)\n        when \"enumValues\"\n          enumValues_field(arguments, context)\n        else\n          name, arguments, context = name, arguments, context\n          case name\n          when \"__typename\"\n            __typename_field(arguments, context)\n          when \"kind\"\n            kind_field(arguments, context)\n          when \"enumValues\"\n            enumValues_field(arguments, context)\n          else\n            name, arguments, context = name, arguments, context\n            case name\n            when \"__typename\"\n              __typename_field(arguments, context)\n            when \"kind\"\n              kind_field(arguments, context)\n            when \"enumValues\"\n              enumValues_field(arguments, context)\n            else\n              name, arguments, context = name, arguments, context\n              case name\n              when \"__typename\"\n                __typename_field(arguments, context)\n              when \"kind\"\n                kind_field(arguments, context)\n              when \"enumValues\"\n                enumValues_field(arguments, context)\n              else\n                name, arguments, context = name, arguments, context\n                case name\n                when \"__typename\"\n                  __typename_field(arguments, context)\n                when \"kind\"\n                  kind_field(arguments, context)\n                when \"enumValues\"\n                  enumValues_field(arguments, context)\n                else\n                  super(name, arguments, context)\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(fvalues: @fvalues, directives: @directives))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_83 = directives\n  if __temp_83.is_a?(Array)\n    __temp_84 = __temp_83.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_83 == nil) || (visited_ids.includes?(__temp_83.object_id))\n    else\n      visited_ids << __temp_83.object_id\n      __temp_84 = __temp_83.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_84)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::EnumTypeDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/EnumValueDefinition","path":"GraphQL/Language/EnumValueDefinition.html","kind":"class","full_name":"GraphQL::Language::EnumValueDefinition","name":"EnumValueDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directives/IsDeprecated","kind":"module","full_name":"GraphQL::Directives::IsDeprecated","name":"IsDeprecated"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":258,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":369,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:isDeprecated, \"\", nil, \"\"}, {:deprecationReason, \"\", nil, \"\"}, {:name, \"\", nil, \"\"}, {:description, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{name, String}, {directives, Array(Directive)}, {selection, ::Union(Array(Selection), ::Nil)}, {description, ::Union(String, ::Nil)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:directives]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directives/IsDeprecated","kind":"module","full_name":"GraphQL::Directives::IsDeprecated","name":"IsDeprecated"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: String, directives: Array(Directive), selection: ::Union(Array(Selection), ::Nil), description: ::Union(String, ::Nil)))"}}],"constructors":[{"id":"new(name,directives,selection,description,**rest)-class-method","html_id":"new(name,directives,selection,description,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"selection","doc":null,"default_value":"","external_name":"selection","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""}],"args_string":"(name, directives, selection, description, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"selection","doc":null,"default_value":"","external_name":"selection","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, directives, selection, description, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::EnumValueDefinition)-instance-method","html_id":"==(other:GraphQL::Language::EnumValueDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::EnumValueDefinition"}],"args_string":"(other : GraphQL::Language::EnumValueDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::EnumValueDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  ((((@name == other.name) && (@directives == other.directives)) && (@selection == other.selection)) && (@description == other.description)) && (super(other))\nend"}},{"id":"_graphql_deprecated-instance-method","html_id":"_graphql_deprecated-instance-method","name":"_graphql_deprecated","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L370","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L370","def":{"name":"_graphql_deprecated","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@deprecated || (@deprecated = directives.any? do |__arg0|\n  __arg0.name == \"deprecated\"\nend)"}},{"id":"_graphql_deprecation_reason(schema)-instance-method","html_id":"_graphql_deprecation_reason(schema)-instance-method","name":"_graphql_deprecation_reason","doc":null,"summary":null,"abstract":false,"args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":""}],"args_string":"(schema)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L370","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L370","def":{"name":"_graphql_deprecation_reason","args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@deprecation_reason || (@deprecation_reason = ((if dir = directives.find do |__arg1|\n  __arg1.name == \"deprecated\"\nend\n  dir.arguments.find(&.name = \"reason\").try(&.value) || schema.directive_definitions[\"deprecated\"].arguments.find do |__arg4|\n    __arg4.name == \"reason\"\n  end.try(&.default_value)\nelse\n  nil\nend).as(String | ::Nil)))"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"description:::Union(String,Nil)-instance-method","html_id":"description:::Union(String,Nil)-instance-method","name":"description","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Union(String, Nil)","source_link":null,"source_link":null,"def":{"name":"description","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Union(String, ::Nil)","visibility":"Public","body":"@description"}},{"id":"description=(description:::Union(String,Nil))-instance-method","html_id":"description=(description:::Union(String,Nil))-instance-method","name":"description=","doc":null,"summary":null,"abstract":false,"args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"::Union(String, ::Nil)"}],"args_string":"(description : ::Union(String, Nil))","source_link":null,"source_link":null,"def":{"name":"description=","args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"::Union(String, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@description = description"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"name=(name:String)-instance-method","html_id":"name=(name:String)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":null,"source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"isDeprecated\"\n  isDeprecated_field(arguments, context)\nwhen \"deprecationReason\"\n  deprecationReason_field(arguments, context)\nwhen \"name\"\n  name_field(arguments, context)\nwhen \"description\"\n  description_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"isDeprecated\"\n    isDeprecated_field(arguments, context)\n  when \"deprecationReason\"\n    deprecationReason_field(arguments, context)\n  when \"name\"\n    name_field(arguments, context)\n  when \"description\"\n    description_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"isDeprecated\"\n      isDeprecated_field(arguments, context)\n    when \"deprecationReason\"\n      deprecationReason_field(arguments, context)\n    when \"name\"\n      name_field(arguments, context)\n    when \"description\"\n      description_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"isDeprecated\"\n        isDeprecated_field(arguments, context)\n      when \"deprecationReason\"\n        deprecationReason_field(arguments, context)\n      when \"name\"\n        name_field(arguments, context)\n      when \"description\"\n        description_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"isDeprecated\"\n          isDeprecated_field(arguments, context)\n        when \"deprecationReason\"\n          deprecationReason_field(arguments, context)\n        when \"name\"\n          name_field(arguments, context)\n        when \"description\"\n          description_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"selection:::Union(Array(Selection),Nil)-instance-method","html_id":"selection:::Union(Array(Selection),Nil)-instance-method","name":"selection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Union(Array(Selection), Nil)","source_link":null,"source_link":null,"def":{"name":"selection","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Union(Array(Selection), ::Nil)","visibility":"Public","body":"@selection"}},{"id":"selection=(selection:::Union(Array(Selection),Nil))-instance-method","html_id":"selection=(selection:::Union(Array(Selection),Nil))-instance-method","name":"selection=","doc":null,"summary":null,"abstract":false,"args":[{"name":"selection","doc":null,"default_value":"","external_name":"selection","restriction":"::Union(Array(Selection), ::Nil)"}],"args_string":"(selection : ::Union(Array(Selection), Nil))","source_link":null,"source_link":null,"def":{"name":"selection=","args":[{"name":"selection","doc":null,"default_value":"","external_name":"selection","restriction":"::Union(Array(Selection), ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@selection = selection"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: @name, directives: @directives, selection: @selection, description: @description))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_89 = directives\n  if __temp_89.is_a?(Array)\n    __temp_90 = __temp_89.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_89 == nil) || (visited_ids.includes?(__temp_89.object_id))\n    else\n      visited_ids << __temp_89.object_id\n      __temp_90 = __temp_89.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_90)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::EnumValueDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/Field","path":"GraphQL/Language/Field.html","kind":"class","full_name":"GraphQL::Language::Field","name":"Field","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":205,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{name, String}, {_alias, ::Union(String, ::Nil)}, {arguments, Array(Argument)}, {directives, Array(Directive)}, {selections, Array(Selection)}] of Tuple(Symbol, Object.class)","doc":"A single selection in a\nA single selection in a GraphQL query.","summary":"<p>A single selection in a A single selection in a GraphQL query.</p>"},{"name":"VISITS","value":"[{:children, [:arguments, :directives, :selections]}] of Tuple(Symbol, Array(Symbol))","doc":"A single selection in a\nA single selection in a GraphQL query.","summary":"<p>A single selection in a A single selection in a GraphQL query.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"A single selection in a\nA single selection in a GraphQL query.","summary":"<p>A single selection in a A single selection in a GraphQL query.</p>","class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: String, _alias: ::Union(String, ::Nil), arguments: Array(Argument), directives: Array(Directive), selections: Array(Selection)))"}}],"constructors":[{"id":"new(name,_alias,arguments,directives,selections,**rest)-class-method","html_id":"new(name,_alias,arguments,directives,selections,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"_alias","doc":null,"default_value":"","external_name":"_alias","restriction":""},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":""}],"args_string":"(name, _alias, arguments, directives, selections, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"_alias","doc":null,"default_value":"","external_name":"_alias","restriction":""},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, _alias, arguments, directives, selections, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::Field)-instance-method","html_id":"==(other:GraphQL::Language::Field)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::Field"}],"args_string":"(other : GraphQL::Language::Field)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::Field"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  (((((@name == other.name) && (@_alias == other._alias)) && (@arguments == other.arguments)) && (@directives == other.directives)) && (@selections == other.selections)) && (super(other))\nend"}},{"id":"_alias:::Union(String,Nil)-instance-method","html_id":"_alias:::Union(String,Nil)-instance-method","name":"_alias","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Union(String, Nil)","source_link":null,"source_link":null,"def":{"name":"_alias","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Union(String, ::Nil)","visibility":"Public","body":"@_alias"}},{"id":"_alias=(_alias:::Union(String,Nil))-instance-method","html_id":"_alias=(_alias:::Union(String,Nil))-instance-method","name":"_alias=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_alias","doc":null,"default_value":"","external_name":"_alias","restriction":"::Union(String, ::Nil)"}],"args_string":"(_alias : ::Union(String, Nil))","source_link":null,"source_link":null,"def":{"name":"_alias=","args":[{"name":"_alias","doc":null,"default_value":"","external_name":"_alias","restriction":"::Union(String, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@_alias = _alias"}},{"id":"arguments:Array(Argument)-instance-method","html_id":"arguments:Array(Argument)-instance-method","name":"arguments","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Argument)","source_link":null,"source_link":null,"def":{"name":"arguments","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Argument)","visibility":"Public","body":"@arguments"}},{"id":"arguments=(arguments:Array(Argument))-instance-method","html_id":"arguments=(arguments:Array(Argument))-instance-method","name":"arguments=","doc":null,"summary":null,"abstract":false,"args":[{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":"Array(Argument)"}],"args_string":"(arguments : Array(Argument))","source_link":null,"source_link":null,"def":{"name":"arguments=","args":[{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":"Array(Argument)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@arguments = arguments"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"name=(name:String)-instance-method","html_id":"name=(name:String)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":null,"source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"selections:Array(Selection)-instance-method","html_id":"selections:Array(Selection)-instance-method","name":"selections","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Selection)","source_link":null,"source_link":null,"def":{"name":"selections","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Selection)","visibility":"Public","body":"@selections"}},{"id":"selections=(selections:Array(Selection))-instance-method","html_id":"selections=(selections:Array(Selection))-instance-method","name":"selections=","doc":null,"summary":null,"abstract":false,"args":[{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":"Array(Selection)"}],"args_string":"(selections : Array(Selection))","source_link":null,"source_link":null,"def":{"name":"selections=","args":[{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":"Array(Selection)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@selections = selections"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: @name, _alias: @_alias, arguments: @arguments, directives: @directives, selections: @selections))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_73 = arguments\n  if __temp_73.is_a?(Array)\n    __temp_74 = __temp_73.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_73 == nil) || (visited_ids.includes?(__temp_73.object_id))\n    else\n      visited_ids << __temp_73.object_id\n      __temp_74 = __temp_73.not_nil!.visit(name, visited_ids, block)\n      self.arguments = (      __temp_74)\n    end\n  end\n  __temp_73 = directives\n  if __temp_73.is_a?(Array)\n    __temp_74 = __temp_73.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_73 == nil) || (visited_ids.includes?(__temp_73.object_id))\n    else\n      visited_ids << __temp_73.object_id\n      __temp_74 = __temp_73.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_74)\n    end\n  end\n  __temp_73 = selections\n  if __temp_73.is_a?(Array)\n    __temp_74 = __temp_73.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_73 == nil) || (visited_ids.includes?(__temp_73.object_id))\n    else\n      visited_ids << __temp_73.object_id\n      __temp_74 = __temp_73.not_nil!.visit(name, visited_ids, block)\n      self.selections = (      __temp_74)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::Field\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/FieldDefinition","path":"GraphQL/Language/FieldDefinition.html","kind":"class","full_name":"GraphQL::Language::FieldDefinition","name":"FieldDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directives/IsDeprecated","kind":"module","full_name":"GraphQL::Directives::IsDeprecated","name":"IsDeprecated"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":226,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":330,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:isDeprecated, \"\", nil, \"\"}, {:deprecationReason, \"\", nil, \"\"}, {:name, \"\", nil, \"\"}, {:description, \"\", nil, \"\"}, {:args, \"\", nil, \"\"}, {:type, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{name, String}, {arguments, Array(InputValueDefinition)}, {type, Type}, {directives, Array(Directive)}, {description, ::Union(String, ::Nil)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:type, :arguments, :directives]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directives/IsDeprecated","kind":"module","full_name":"GraphQL::Directives::IsDeprecated","name":"IsDeprecated"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: String, arguments: Array(InputValueDefinition), type: Type, directives: Array(Directive), description: ::Union(String, ::Nil)))"}}],"constructors":[{"id":"new(name,arguments,type,directives,description,**rest)-class-method","html_id":"new(name,arguments,type,directives,description,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""}],"args_string":"(name, arguments, type, directives, description, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, arguments, type, directives, description, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::FieldDefinition)-instance-method","html_id":"==(other:GraphQL::Language::FieldDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::FieldDefinition"}],"args_string":"(other : GraphQL::Language::FieldDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::FieldDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  (((((@name == other.name) && (@arguments == other.arguments)) && (@type == other.type)) && (@directives == other.directives)) && (@description == other.description)) && (super(other))\nend"}},{"id":"_graphql_deprecated-instance-method","html_id":"_graphql_deprecated-instance-method","name":"_graphql_deprecated","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L331","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L331","def":{"name":"_graphql_deprecated","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@deprecated || (@deprecated = directives.any? do |__arg0|\n  __arg0.name == \"deprecated\"\nend)"}},{"id":"_graphql_deprecation_reason(schema)-instance-method","html_id":"_graphql_deprecation_reason(schema)-instance-method","name":"_graphql_deprecation_reason","doc":null,"summary":null,"abstract":false,"args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":""}],"args_string":"(schema)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L331","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L331","def":{"name":"_graphql_deprecation_reason","args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@deprecation_reason || (@deprecation_reason = ((if dir = directives.find do |__arg1|\n  __arg1.name == \"deprecated\"\nend\n  dir.arguments.find(&.name = \"reason\").try(&.value) || schema.directive_definitions[\"deprecated\"].arguments.find do |__arg4|\n    __arg4.name == \"reason\"\n  end.try(&.default_value)\nelse\n  nil\nend).as(String | ::Nil)))"}},{"id":"arguments:Array(InputValueDefinition)-instance-method","html_id":"arguments:Array(InputValueDefinition)-instance-method","name":"arguments","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(InputValueDefinition)","source_link":null,"source_link":null,"def":{"name":"arguments","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(InputValueDefinition)","visibility":"Public","body":"@arguments"}},{"id":"arguments=(arguments:Array(InputValueDefinition))-instance-method","html_id":"arguments=(arguments:Array(InputValueDefinition))-instance-method","name":"arguments=","doc":null,"summary":null,"abstract":false,"args":[{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":"Array(InputValueDefinition)"}],"args_string":"(arguments : Array(InputValueDefinition))","source_link":null,"source_link":null,"def":{"name":"arguments=","args":[{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":"Array(InputValueDefinition)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@arguments = arguments"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"description:::Union(String,Nil)-instance-method","html_id":"description:::Union(String,Nil)-instance-method","name":"description","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Union(String, Nil)","source_link":null,"source_link":null,"def":{"name":"description","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Union(String, ::Nil)","visibility":"Public","body":"@description"}},{"id":"description=(description:::Union(String,Nil))-instance-method","html_id":"description=(description:::Union(String,Nil))-instance-method","name":"description=","doc":null,"summary":null,"abstract":false,"args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"::Union(String, ::Nil)"}],"args_string":"(description : ::Union(String, Nil))","source_link":null,"source_link":null,"def":{"name":"description=","args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"::Union(String, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@description = description"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"name=(name:String)-instance-method","html_id":"name=(name:String)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":null,"source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"isDeprecated\"\n  isDeprecated_field(arguments, context)\nwhen \"deprecationReason\"\n  deprecationReason_field(arguments, context)\nwhen \"name\"\n  name_field(arguments, context)\nwhen \"description\"\n  description_field(arguments, context)\nwhen \"args\"\n  args_field(arguments, context)\nwhen \"type\"\n  type_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"isDeprecated\"\n    isDeprecated_field(arguments, context)\n  when \"deprecationReason\"\n    deprecationReason_field(arguments, context)\n  when \"name\"\n    name_field(arguments, context)\n  when \"description\"\n    description_field(arguments, context)\n  when \"args\"\n    args_field(arguments, context)\n  when \"type\"\n    type_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"isDeprecated\"\n      isDeprecated_field(arguments, context)\n    when \"deprecationReason\"\n      deprecationReason_field(arguments, context)\n    when \"name\"\n      name_field(arguments, context)\n    when \"description\"\n      description_field(arguments, context)\n    when \"args\"\n      args_field(arguments, context)\n    when \"type\"\n      type_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"isDeprecated\"\n        isDeprecated_field(arguments, context)\n      when \"deprecationReason\"\n        deprecationReason_field(arguments, context)\n      when \"name\"\n        name_field(arguments, context)\n      when \"description\"\n        description_field(arguments, context)\n      when \"args\"\n        args_field(arguments, context)\n      when \"type\"\n        type_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"isDeprecated\"\n          isDeprecated_field(arguments, context)\n        when \"deprecationReason\"\n          deprecationReason_field(arguments, context)\n        when \"name\"\n          name_field(arguments, context)\n        when \"description\"\n          description_field(arguments, context)\n        when \"args\"\n          args_field(arguments, context)\n        when \"type\"\n          type_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"type:Type-instance-method","html_id":"type:Type-instance-method","name":"type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Type","source_link":null,"source_link":null,"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type","visibility":"Public","body":"@type"}},{"id":"type=(type:Type)-instance-method","html_id":"type=(type:Type)-instance-method","name":"type=","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"}],"args_string":"(type : Type)","source_link":null,"source_link":null,"def":{"name":"type=","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@type = type"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: @name, arguments: @arguments, type: @type, directives: @directives, description: @description))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_77 = type\n  if __temp_77.is_a?(Array)\n    __temp_78 = __temp_77.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_77 == nil) || (visited_ids.includes?(__temp_77.object_id))\n    else\n      visited_ids << __temp_77.object_id\n      __temp_78 = __temp_77.not_nil!.visit(name, visited_ids, block)\n      self.type = (      __temp_78)\n    end\n  end\n  __temp_77 = arguments\n  if __temp_77.is_a?(Array)\n    __temp_78 = __temp_77.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_77 == nil) || (visited_ids.includes?(__temp_77.object_id))\n    else\n      visited_ids << __temp_77.object_id\n      __temp_78 = __temp_77.not_nil!.visit(name, visited_ids, block)\n      self.arguments = (      __temp_78)\n    end\n  end\n  __temp_77 = directives\n  if __temp_77.is_a?(Array)\n    __temp_78 = __temp_77.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_77 == nil) || (visited_ids.includes?(__temp_77.object_id))\n    else\n      visited_ids << __temp_77.object_id\n      __temp_78 = __temp_77.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_78)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::FieldDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/FragmentDefinition","path":"GraphQL/Language/FragmentDefinition.html","kind":"class","full_name":"GraphQL::Language::FragmentDefinition","name":"FragmentDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":216,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{name, ::Union(String, ::Nil)}, {type, Type}, {directives, Array(Directive)}, {selections, Array(Selection)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:type, :directives, :selections]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: ::Union(String, ::Nil), type: Type, directives: Array(Directive), selections: Array(Selection)))"}}],"constructors":[{"id":"new(name,type,directives,selections,**rest)-class-method","html_id":"new(name,type,directives,selections,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":""}],"args_string":"(name, type, directives, selections, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, type, directives, selections, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::FragmentDefinition)-instance-method","html_id":"==(other:GraphQL::Language::FragmentDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::FragmentDefinition"}],"args_string":"(other : GraphQL::Language::FragmentDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::FragmentDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  ((((@name == other.name) && (@type == other.type)) && (@directives == other.directives)) && (@selections == other.selections)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"name:::Union(String,Nil)-instance-method","html_id":"name:::Union(String,Nil)-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Union(String, Nil)","source_link":null,"source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Union(String, ::Nil)","visibility":"Public","body":"@name"}},{"id":"name=(name:::Union(String,Nil))-instance-method","html_id":"name=(name:::Union(String,Nil))-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"::Union(String, ::Nil)"}],"args_string":"(name : ::Union(String, Nil))","source_link":null,"source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"::Union(String, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"selections:Array(Selection)-instance-method","html_id":"selections:Array(Selection)-instance-method","name":"selections","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Selection)","source_link":null,"source_link":null,"def":{"name":"selections","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Selection)","visibility":"Public","body":"@selections"}},{"id":"selections=(selections:Array(Selection))-instance-method","html_id":"selections=(selections:Array(Selection))-instance-method","name":"selections=","doc":null,"summary":null,"abstract":false,"args":[{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":"Array(Selection)"}],"args_string":"(selections : Array(Selection))","source_link":null,"source_link":null,"def":{"name":"selections=","args":[{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":"Array(Selection)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@selections = selections"}},{"id":"type:Type-instance-method","html_id":"type:Type-instance-method","name":"type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Type","source_link":null,"source_link":null,"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type","visibility":"Public","body":"@type"}},{"id":"type=(type:Type)-instance-method","html_id":"type=(type:Type)-instance-method","name":"type=","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"}],"args_string":"(type : Type)","source_link":null,"source_link":null,"def":{"name":"type=","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@type = type"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: @name, type: @type, directives: @directives, selections: @selections))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_75 = type\n  if __temp_75.is_a?(Array)\n    __temp_76 = __temp_75.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_75 == nil) || (visited_ids.includes?(__temp_75.object_id))\n    else\n      visited_ids << __temp_75.object_id\n      __temp_76 = __temp_75.not_nil!.visit(name, visited_ids, block)\n      self.type = (      __temp_76)\n    end\n  end\n  __temp_75 = directives\n  if __temp_75.is_a?(Array)\n    __temp_76 = __temp_75.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_75 == nil) || (visited_ids.includes?(__temp_75.object_id))\n    else\n      visited_ids << __temp_75.object_id\n      __temp_76 = __temp_75.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_76)\n    end\n  end\n  __temp_75 = selections\n  if __temp_75.is_a?(Array)\n    __temp_76 = __temp_75.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_75 == nil) || (visited_ids.includes?(__temp_75.object_id))\n    else\n      visited_ids << __temp_75.object_id\n      __temp_76 = __temp_75.not_nil!.visit(name, visited_ids, block)\n      self.selections = (      __temp_76)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::FragmentDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/FragmentSpread","path":"GraphQL/Language/FragmentSpread.html","kind":"class","full_name":"GraphQL::Language::FragmentSpread","name":"FragmentSpread","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":247,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{name, String}, {directives, Array(Directive)}] of Tuple(Symbol, Object.class)","doc":"Application of a named fragment in a selection","summary":"<p>Application of a named fragment in a selection</p>"},{"name":"VISITS","value":"[{:children, [:directives]}] of Tuple(Symbol, Array(Symbol))","doc":"Application of a named fragment in a selection","summary":"<p>Application of a named fragment in a selection</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"Application of a named fragment in a selection","summary":"<p>Application of a named fragment in a selection</p>","class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: String, directives: Array(Directive)))"}}],"constructors":[{"id":"new(name,directives,**rest)-class-method","html_id":"new(name,directives,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"args_string":"(name, directives, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, directives, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::FragmentSpread)-instance-method","html_id":"==(other:GraphQL::Language::FragmentSpread)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::FragmentSpread"}],"args_string":"(other : GraphQL::Language::FragmentSpread)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::FragmentSpread"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  ((@name == other.name) && (@directives == other.directives)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"name=(name:String)-instance-method","html_id":"name=(name:String)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":null,"source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: @name, directives: @directives))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_85 = directives\n  if __temp_85.is_a?(Array)\n    __temp_86 = __temp_85.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_85 == nil) || (visited_ids.includes?(__temp_85.object_id))\n    else\n      visited_ids << __temp_85.object_id\n      __temp_86 = __temp_85.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_86)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::FragmentSpread\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/FValue","path":"GraphQL/Language/FValue.html","kind":"alias","full_name":"GraphQL::Language::FValue","name":"FValue","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":92,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":true,"aliased":"(Array(GraphQL::Language::FValue) | Bool | Float64 | GraphQL::Language::AbstractNode | Hash(String, GraphQL::Language::FValue) | Int32 | String | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/Generation","path":"GraphQL/Language/Generation.html","kind":"module","full_name":"GraphQL::Language::Generation","name":"Generation","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/language/generation.cr","line_number":16,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"Exposes {.generate}, which turns AST nodes back into query strings.\nTurn an AST node back into a string.\n\n@example Turning a document into a query\n   document = GraphQL.parse(query_string)\n   Generation.generate(document)\n   # => \"{ ... }\"\n\n@param node [AbstractNode] an AST node to recursively stringify\n@param indent [String] Whitespace to add to each printed node\n@return [String] Valid GraphQL for `node`","summary":"<p>Exposes {.generate}, which turns AST nodes back into query strings.</p>","class_methods":[{"id":"generate(node:Directive,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:Directive,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Directive"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : Directive, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L25","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L25","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Directive"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = \"@#{node.name}\"\nif node.arguments.any?\n  out = out + \"(#{node.arguments.map do |a|\n    (generate(a)).as(String)\n  end.join(\", \")})\"\nend\nout\n"}},{"id":"generate(node,indent:String=&quot;&quot;)-class-method","html_id":"generate(node,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L227","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L227","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(\"TypeError (please define it :) )\")\n\"\"\n"}},{"id":"generate(node:DirectiveDefinition,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:DirectiveDefinition,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"DirectiveDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : DirectiveDefinition, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L199","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L199","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"DirectiveDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = generate_description(node)\nout = out + \"directive @#{node.name}\"\nif node.arguments.any?\n  out = out + \"(#{node.arguments.map do |a|\n    (generate(a)).as(String)\n  end.join(\", \")})\"\nend\nout = out + \" on #{node.locations.join(\" | \")}\"\n"}},{"id":"generate(node:InputObjectTypeDefinition,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:InputObjectTypeDefinition,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"InputObjectTypeDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : InputObjectTypeDefinition, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L187","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L187","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"InputObjectTypeDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = generate_description(node)\nout = out + \"input #{node.name}\"\nout = out + (generate_directives(node.directives))\nout = out + \" {\\n\"\nnode.fields.each.with_index do |field, i|\n  out = out + (generate_description(field, indent: \"  \", first_in_block: i == 0))\n  out = out + \"  #{generate(field)}\n\"\nend\nout = out + \"}\"\n"}},{"id":"generate(node:EnumValueDefinition,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:EnumValueDefinition,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"EnumValueDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : EnumValueDefinition, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L181","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L181","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"EnumValueDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = \"  #{node.name}\"\nout = out + (generate_directives(node.directives))\nout = out + \"\\n\"\n"}},{"id":"generate(node:EnumTypeDefinition,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:EnumTypeDefinition,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"EnumTypeDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : EnumTypeDefinition, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L171","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L171","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"EnumTypeDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = generate_description(node)\nout = out + \"enum #{node.name}#{generate_directives(node.directives)} {\n\"\nnode.fvalues.each_with_index do |value, i|\n  out = out + (generate_description(value, indent: \"  \", first_in_block: i == 0))\n  out = out + ((generate(value)) || \"\")\nend\nout = out + \"}\"\n"}},{"id":"generate(node:UnionTypeDefinition,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:UnionTypeDefinition,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"UnionTypeDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : UnionTypeDefinition, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L164","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L164","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"UnionTypeDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = generate_description(node)\nout = out + \"union #{node.name}\"\nout = out + (generate_directives(node.directives))\nout = out + (\" = \" + (node.types.map do |t|\n  (t.as(NameOnlyNode)).name\nend.join(\" | \")))\n"}},{"id":"generate(node:InterfaceTypeDefinition,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:InterfaceTypeDefinition,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"InterfaceTypeDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : InterfaceTypeDefinition, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L157","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L157","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"InterfaceTypeDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = generate_description(node)\nout = out + \"interface #{node.name}\"\nout = out + (generate_directives(node.directives))\nout = out + (generate_field_definitions(node.fields))\n"}},{"id":"generate(node:FieldDefinition,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:FieldDefinition,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"FieldDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : FieldDefinition, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L148","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L148","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"FieldDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = node.name.dup\nif node.arguments.empty?\nelse\n  out = out + ((\"(\" + (node.arguments.map do |arg|\n    (generate(arg)).as(String)\n  end.join(\", \"))) + \")\")\nend\nout = out + \": #{generate(node.type)}\"\nout = out + (generate_directives(node.directives))\n"}},{"id":"generate(node:InputValueDefinition,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:InputValueDefinition,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"InputValueDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : InputValueDefinition, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L142","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L142","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"InputValueDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = \"#{node.name}: #{generate(node.type)}\"\nif node.default_value.nil?\nelse\n  out = out + \" = #{generate(node.default_value)}\"\nend\nout = out + (generate_directives(node.directives))\n"}},{"id":"generate(node:ObjectTypeDefinition,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:ObjectTypeDefinition,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"ObjectTypeDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : ObjectTypeDefinition, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L134","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L134","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"ObjectTypeDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = generate_description(node)\nout = out + \"type #{node.name}\"\nout = out + (generate_directives(node.directives))\nif node.interfaces.empty?\nelse\n  out = out + (\" implements \" + (node.interfaces.map do |i|\n    i.as(String)\n  end.join(\", \")))\nend\nout = out + (generate_field_definitions(node.fields))\n"}},{"id":"generate(node:ScalarTypeDefinition,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:ScalarTypeDefinition,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"ScalarTypeDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : ScalarTypeDefinition, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L128","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L128","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"ScalarTypeDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = generate_description(node)\nout = out + \"scalar #{node.name}\"\nout = out + (generate_directives(node.directives))\n"}},{"id":"generate(node:SchemaDefinition,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:SchemaDefinition,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"SchemaDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : SchemaDefinition, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L115","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L115","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"SchemaDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (((node.query.nil?) || (node.query == \"Query\")) && ((node.mutation.nil?) || (node.mutation == \"Mutation\"))) && ((node.subscription.nil?) || (node.subscription == \"Subscription\"))\n  return \"\"\nend\nout = \"schema {\\n\"\nif node.query\n  out = out + \"  query: #{node.query}\n\"\nend\nif node.mutation\n  out = out + \"  mutation: #{node.mutation}\n\"\nend\nif node.subscription\n  out = out + \"  subscription: #{node.subscription}\n\"\nend\nout = out + \"}\"\n"}},{"id":"generate(node:VariableIdentifier,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:VariableIdentifier,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"VariableIdentifier"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : VariableIdentifier, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L111","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L111","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"VariableIdentifier"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"$#{node.name}\""}},{"id":"generate(node:VariableDefinition)-class-method","html_id":"generate(node:VariableDefinition)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"VariableDefinition"}],"args_string":"(node : VariableDefinition)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L103","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L103","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"VariableDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = \"$#{node.name}: #{generate(node.type)}\"\nif node.default_value.nil?\nelse\n  out = out + \" = #{generate(node.default_value)}\"\nend\nout\n"}},{"id":"generate(node:TypeName,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:TypeName,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"TypeName"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : TypeName, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L99","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L99","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"TypeName"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"#{node.name}\""}},{"id":"generate(node:OperationDefinition,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:OperationDefinition,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"OperationDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : OperationDefinition, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L88","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L88","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"OperationDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = \"#{indent}#{node.operation_type}\"\nif node.name\n  out = out + \" #{node.name}\"\nend\nif node.variables.any?\n  out = out + \"(#{node.variables.map do |v|\n    generate(v)\n  end.join(\", \")})\"\nend\nout = out + (generate_directives(node.directives))\nout = out + (generate_selections(node.selections, indent: indent))\nout\n"}},{"id":"generate(node:Float|Int|String|Nil|Bool,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:Float|Int|String|Nil|Bool,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Float | Int | String | Nil | Bool"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : Float | Int | String | Nil | Bool, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L210","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L210","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Float | Int | String | Nil | Bool"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"node.to_json"}},{"id":"generate(node:Symbol,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:Symbol,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Symbol"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : Symbol, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L214","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L214","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Symbol"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"node.to_s.capitalize"}},{"id":"generate(node:Array,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:Array,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Array"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : Array, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L218","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L218","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Array"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"[#{node.map do |v|\n  generate(v)\nend.join(\", \")}]\""}},{"id":"generate(node:Hash,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:Hash,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Hash"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : Hash, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L222","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L222","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Hash"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value = node.map do |k, v|\n  \"#{k}: #{generate(v)}\"\nend.join(\", \")\n\"{#{value}}\"\n"}},{"id":"generate(node:Document,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:Document,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Document"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : Document, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L17","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L17","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Document"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"node.definitions.map do |d|\n  generate(d)\nend.join(\"\\n\\n\")"}},{"id":"generate(node:Argument,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:Argument,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Argument"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : Argument, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L21","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L21","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Argument"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"#{node.name}: #{generate(node.value)}\""}},{"id":"generate(node:AEnum,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:AEnum,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"AEnum"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : AEnum, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L31","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L31","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"AEnum"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"#{node.name}\""}},{"id":"generate(node:NullValue,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:NullValue,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"NullValue"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : NullValue, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L35","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L35","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"NullValue"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"null\""}},{"id":"generate(node:Field,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:Field,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Field"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : Field, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L39","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L39","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Field"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = \"\"\nif node._alias\n  out = out + \"#{node._alias}: \"\nend\nout = out + \"#{node.name}\"\nif node.arguments.any?\n  out = out + \"(#{node.arguments.map do |a|\n    (generate(a)).as(String)\n  end.join(\", \")})\"\nend\nout = out + (generate_directives(node.directives))\nout = out + (generate_selections(node.selections, indent: indent))\nout\n"}},{"id":"generate(node:FragmentDefinition,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:FragmentDefinition,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"FragmentDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : FragmentDefinition, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L49","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L49","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"FragmentDefinition"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = \"#{indent}fragment #{node.name}\"\nif node.type\n  out = out + \" on #{generate(node.type)}\"\nend\nout = out + (generate_directives(node.directives))\nout = out + (generate_selections(node.selections, indent: indent))\nout\n"}},{"id":"generate(node:FragmentSpread,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:FragmentSpread,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"FragmentSpread"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : FragmentSpread, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L59","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L59","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"FragmentSpread"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = \"#{indent}...#{node.name}\"\nif node.directives.any?\n  out = out + (\" \" + (node.directives.map do |d|\n    (generate(d)).as(String)\n  end.join(\" \")))\nend\n"}},{"id":"generate(node:InlineFragment,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:InlineFragment,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"InlineFragment"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : InlineFragment, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L66","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L66","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"InlineFragment"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = \"#{indent}...\"\nif node.type\n  out = out + \" on #{generate(node.type)}\"\nend\nout = out + (generate_directives(node.directives))\nout = out + (generate_selections(node.selections, indent: indent))\nout\n"}},{"id":"generate(node:InputObject,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:InputObject,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"InputObject"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : InputObject, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L76","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L76","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"InputObject"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"generate(node.to_h)"}},{"id":"generate(node:ListType,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:ListType,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"ListType"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : ListType, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L80","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L80","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"ListType"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"[#{generate(node.of_type)}]\""}},{"id":"generate(node:NonNullType,indent:String=&quot;&quot;)-class-method","html_id":"generate(node:NonNullType,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"NonNullType"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(node : NonNullType, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L84","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L84","def":{"name":"generate","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"NonNullType"},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"#{generate(node.of_type)}!\""}},{"id":"generate_description(node,indent=&quot;&quot;,first_in_block=true)-class-method","html_id":"generate_description(node,indent=&amp;quot;&amp;quot;,first_in_block=true)-class-method","name":"generate_description","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":""},{"name":"first_in_block","doc":null,"default_value":"true","external_name":"first_in_block","restriction":""}],"args_string":"(node, indent = <span class=\"s\">&quot;&quot;</span>, first_in_block = <span class=\"n\">true</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L252","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L252","def":{"name":"generate_description","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":""},{"name":"first_in_block","doc":null,"default_value":"true","external_name":"first_in_block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"\""}},{"id":"generate_directives(directives,indent:String=&quot;&quot;)-class-method","html_id":"generate_directives(directives,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate_directives","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(directives, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L232","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L232","def":{"name":"generate_directives","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if directives.any?\n  directives.map do |d|\n    \" #{generate(d)}\"\n  end.join\nelse\n  \"\"\nend"}},{"id":"generate_field_definitions(fields,indent:String=&quot;&quot;)-class-method","html_id":"generate_field_definitions(fields,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate_field_definitions","doc":null,"summary":null,"abstract":false,"args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":""},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(fields, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L260","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L260","def":{"name":"generate_field_definitions","args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":""},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out = \" {\\n\"\nfields.each.with_index do |field, i|\n  out = out + (generate_description(field, indent: \"  \", first_in_block: i == 0))\n  out = out + \"  #{generate(field)}\n\"\nend\nout = out + \"}\"\n"}},{"id":"generate_selections(selections,indent:String=&quot;&quot;)-class-method","html_id":"generate_selections(selections,indent:String=&amp;quot;&amp;quot;)-class-method","name":"generate_selections","doc":null,"summary":null,"abstract":false,"args":[{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":""},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"args_string":"(selections, indent : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L240","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/generation.cr#L240","def":{"name":"generate_selections","args":[{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":""},{"name":"indent","doc":null,"default_value":"\"\"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if selections.any?\n  out = \" {\\n\"\n  selections.each do |selection|\n    out = out + ((generate(selection, indent: indent + \"  \")).to_s + \"\\n\")\n  end\n  out = out + \"#{indent}}\"\nelse\n  \"\"\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/InlineFragment","path":"GraphQL/Language/InlineFragment.html","kind":"class","full_name":"GraphQL::Language::InlineFragment","name":"InlineFragment","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":253,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{type, ::Union(Type, ::Nil)}, {directives, Array(Directive)}, {selections, Array(Selection)}] of Tuple(Symbol, Object.class)","doc":"An unnamed fragment, defined directly in the query with `... {  }`","summary":"<p>An unnamed fragment, defined directly in the query with `...</p>"},{"name":"VISITS","value":"[{:children, [:type, :directives, :selections]}] of Tuple(Symbol, Array(Symbol))","doc":"An unnamed fragment, defined directly in the query with `... {  }`","summary":"<p>An unnamed fragment, defined directly in the query with `...</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"An unnamed fragment, defined directly in the query with `... {  }`","summary":"<p>An unnamed fragment, defined directly in the query with `...</p>","class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(type: ::Union(Type, ::Nil), directives: Array(Directive), selections: Array(Selection)))"}}],"constructors":[{"id":"new(type,directives,selections,**rest)-class-method","html_id":"new(type,directives,selections,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":""}],"args_string":"(type, directives, selections, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(type, directives, selections, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::InlineFragment)-instance-method","html_id":"==(other:GraphQL::Language::InlineFragment)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::InlineFragment"}],"args_string":"(other : GraphQL::Language::InlineFragment)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::InlineFragment"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  (((@type == other.type) && (@directives == other.directives)) && (@selections == other.selections)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"selections:Array(Selection)-instance-method","html_id":"selections:Array(Selection)-instance-method","name":"selections","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Selection)","source_link":null,"source_link":null,"def":{"name":"selections","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Selection)","visibility":"Public","body":"@selections"}},{"id":"selections=(selections:Array(Selection))-instance-method","html_id":"selections=(selections:Array(Selection))-instance-method","name":"selections=","doc":null,"summary":null,"abstract":false,"args":[{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":"Array(Selection)"}],"args_string":"(selections : Array(Selection))","source_link":null,"source_link":null,"def":{"name":"selections=","args":[{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":"Array(Selection)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@selections = selections"}},{"id":"type:::Union(Type,Nil)-instance-method","html_id":"type:::Union(Type,Nil)-instance-method","name":"type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Union(Type, Nil)","source_link":null,"source_link":null,"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Union(Type, ::Nil)","visibility":"Public","body":"@type"}},{"id":"type=(type:::Union(Type,Nil))-instance-method","html_id":"type=(type:::Union(Type,Nil))-instance-method","name":"type=","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"::Union(Type, ::Nil)"}],"args_string":"(type : ::Union(Type, Nil))","source_link":null,"source_link":null,"def":{"name":"type=","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"::Union(Type, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@type = type"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(type: @type, directives: @directives, selections: @selections))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_87 = type\n  if __temp_87.is_a?(Array)\n    __temp_88 = __temp_87.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_87 == nil) || (visited_ids.includes?(__temp_87.object_id))\n    else\n      visited_ids << __temp_87.object_id\n      __temp_88 = __temp_87.not_nil!.visit(name, visited_ids, block)\n      self.type = (      __temp_88)\n    end\n  end\n  __temp_87 = directives\n  if __temp_87.is_a?(Array)\n    __temp_88 = __temp_87.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_87 == nil) || (visited_ids.includes?(__temp_87.object_id))\n    else\n      visited_ids << __temp_87.object_id\n      __temp_88 = __temp_87.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_88)\n    end\n  end\n  __temp_87 = selections\n  if __temp_87.is_a?(Array)\n    __temp_88 = __temp_87.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_87 == nil) || (visited_ids.includes?(__temp_87.object_id))\n    else\n      visited_ids << __temp_87.object_id\n      __temp_88 = __temp_87.not_nil!.visit(name, visited_ids, block)\n      self.selections = (      __temp_88)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::InlineFragment\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/InputObject","path":"GraphQL/Language/InputObject.html","kind":"class","full_name":"GraphQL::Language::InputObject","name":"InputObject","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":163,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{arguments, Array(Argument)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:arguments]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(arguments: Array(Argument)))"}}],"constructors":[{"id":"new(arguments,**rest)-class-method","html_id":"new(arguments,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""}],"args_string":"(arguments, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(arguments, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::InputObject)-instance-method","html_id":"==(other:GraphQL::Language::InputObject)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::InputObject"}],"args_string":"(other : GraphQL::Language::InputObject)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::InputObject"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  (@arguments == other.arguments) && (super(other))\nend"}},{"id":"arguments:Array(Argument)-instance-method","html_id":"arguments:Array(Argument)-instance-method","name":"arguments","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Argument)","source_link":null,"source_link":null,"def":{"name":"arguments","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Argument)","visibility":"Public","body":"@arguments"}},{"id":"arguments=(arguments:Array(Argument))-instance-method","html_id":"arguments=(arguments:Array(Argument))-instance-method","name":"arguments=","doc":null,"summary":null,"abstract":false,"args":[{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":"Array(Argument)"}],"args_string":"(arguments : Array(Argument))","source_link":null,"source_link":null,"def":{"name":"arguments=","args":[{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":"Array(Argument)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@arguments = arguments"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"to_h-instance-method","html_id":"to_h-instance-method","name":"to_h","doc":"@return [Hash<String, Any>] Recursively turn this input object into a Ruby Hash","summary":"<p>@return [Hash&lt;String, Any>] Recursively turn this input object into a Ruby Hash</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L168","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L168","def":{"name":"to_h","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"arguments.reduce({} of String => FValue) do |memo, pair|\n  v = pair.value\n  memo[pair.name] = (case v\n  when InputObject\n    v.to_h\n  when Array\n    v.map do |v|\n      v.as(FValue)\n    end\n  else\n    v\n  end).as(FValue)\n  memo\nend"}},{"id":"to_value-instance-method","html_id":"to_value-instance-method","name":"to_value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L183","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr#L183","def":{"name":"to_value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_h"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(arguments: @arguments))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_63 = arguments\n  if __temp_63.is_a?(Array)\n    __temp_64 = __temp_63.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_63 == nil) || (visited_ids.includes?(__temp_63.object_id))\n    else\n      visited_ids << __temp_63.object_id\n      __temp_64 = __temp_63.not_nil!.visit(name, visited_ids, block)\n      self.arguments = (      __temp_64)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::InputObject\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/InputObjectTypeDefinition","path":"GraphQL/Language/InputObjectTypeDefinition.html","kind":"class","full_name":"GraphQL::Language::InputObjectTypeDefinition","name":"InputObjectTypeDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":134,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":338,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:inputFields, \"\", nil, \"\"}, {:kind, \"\", nil, \"\"}, {:directives, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{fields, Array(InputValueDefinition)}, {directives, Array(Directive)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:fields, :directives]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(fields: Array(InputValueDefinition), directives: Array(Directive)))"}}],"constructors":[{"id":"new(fields,directives,**rest)-class-method","html_id":"new(fields,directives,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"args_string":"(fields, directives, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(fields, directives, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::InputObjectTypeDefinition)-instance-method","html_id":"==(other:GraphQL::Language::InputObjectTypeDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::InputObjectTypeDefinition"}],"args_string":"(other : GraphQL::Language::InputObjectTypeDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::InputObjectTypeDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  ((@fields == other.fields) && (@directives == other.directives)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"fields:Array(InputValueDefinition)-instance-method","html_id":"fields:Array(InputValueDefinition)-instance-method","name":"fields","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(InputValueDefinition)","source_link":null,"source_link":null,"def":{"name":"fields","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(InputValueDefinition)","visibility":"Public","body":"@fields"}},{"id":"fields=(fields:Array(InputValueDefinition))-instance-method","html_id":"fields=(fields:Array(InputValueDefinition))-instance-method","name":"fields=","doc":null,"summary":null,"abstract":false,"args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":"Array(InputValueDefinition)"}],"args_string":"(fields : Array(InputValueDefinition))","source_link":null,"source_link":null,"def":{"name":"fields=","args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":"Array(InputValueDefinition)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@fields = fields"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"inputFields\"\n  inputFields_field(arguments, context)\nwhen \"kind\"\n  kind_field(arguments, context)\nwhen \"directives\"\n  directives_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"inputFields\"\n    inputFields_field(arguments, context)\n  when \"kind\"\n    kind_field(arguments, context)\n  when \"directives\"\n    directives_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"inputFields\"\n      inputFields_field(arguments, context)\n    when \"kind\"\n      kind_field(arguments, context)\n    when \"directives\"\n      directives_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"inputFields\"\n        inputFields_field(arguments, context)\n      when \"kind\"\n        kind_field(arguments, context)\n      when \"directives\"\n        directives_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"inputFields\"\n          inputFields_field(arguments, context)\n        when \"kind\"\n          kind_field(arguments, context)\n        when \"directives\"\n          directives_field(arguments, context)\n        else\n          name, arguments, context = name, arguments, context\n          case name\n          when \"__typename\"\n            __typename_field(arguments, context)\n          when \"inputFields\"\n            inputFields_field(arguments, context)\n          when \"kind\"\n            kind_field(arguments, context)\n          when \"directives\"\n            directives_field(arguments, context)\n          else\n            name, arguments, context = name, arguments, context\n            case name\n            when \"__typename\"\n              __typename_field(arguments, context)\n            when \"inputFields\"\n              inputFields_field(arguments, context)\n            when \"kind\"\n              kind_field(arguments, context)\n            when \"directives\"\n              directives_field(arguments, context)\n            else\n              name, arguments, context = name, arguments, context\n              case name\n              when \"__typename\"\n                __typename_field(arguments, context)\n              when \"inputFields\"\n                inputFields_field(arguments, context)\n              when \"kind\"\n                kind_field(arguments, context)\n              when \"directives\"\n                directives_field(arguments, context)\n              else\n                name, arguments, context = name, arguments, context\n                case name\n                when \"__typename\"\n                  __typename_field(arguments, context)\n                when \"inputFields\"\n                  inputFields_field(arguments, context)\n                when \"kind\"\n                  kind_field(arguments, context)\n                when \"directives\"\n                  directives_field(arguments, context)\n                else\n                  super(name, arguments, context)\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(fields: @fields, directives: @directives))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_51 = fields\n  if __temp_51.is_a?(Array)\n    __temp_52 = __temp_51.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_51 == nil) || (visited_ids.includes?(__temp_51.object_id))\n    else\n      visited_ids << __temp_51.object_id\n      __temp_52 = __temp_51.not_nil!.visit(name, visited_ids, block)\n      self.fields = (      __temp_52)\n    end\n  end\n  __temp_51 = directives\n  if __temp_51.is_a?(Array)\n    __temp_52 = __temp_51.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_51 == nil) || (visited_ids.includes?(__temp_51.object_id))\n    else\n      visited_ids << __temp_51.object_id\n      __temp_52 = __temp_51.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_52)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::InputObjectTypeDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/InputValueDefinition","path":"GraphQL/Language/InputValueDefinition.html","kind":"class","full_name":"GraphQL::Language::InputValueDefinition","name":"InputValueDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":139,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":344,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:name, \"\", nil, \"\"}, {:description, \"\", nil, \"\"}, {:type, \"\", nil, \"\"}, {:defaultValue, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{name, String}, {type, Type}, {default_value, FValue}, {directives, Array(Directive)}, {description, ::Union(String, ::Nil)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:type, :directives]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: String, type: Type, default_value: FValue, directives: Array(Directive), description: ::Union(String, ::Nil)))"}}],"constructors":[{"id":"new(name,type,default_value,directives,description,**rest)-class-method","html_id":"new(name,type,default_value,directives,description,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default_value","doc":null,"default_value":"","external_name":"default_value","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""}],"args_string":"(name, type, default_value, directives, description, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default_value","doc":null,"default_value":"","external_name":"default_value","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, type, default_value, directives, description, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::InputValueDefinition)-instance-method","html_id":"==(other:GraphQL::Language::InputValueDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::InputValueDefinition"}],"args_string":"(other : GraphQL::Language::InputValueDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::InputValueDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  (((((@name == other.name) && (@type == other.type)) && (@default_value == other.default_value)) && (@directives == other.directives)) && (@description == other.description)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"default_value:FValue-instance-method","html_id":"default_value:FValue-instance-method","name":"default_value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : FValue","source_link":null,"source_link":null,"def":{"name":"default_value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"FValue","visibility":"Public","body":"@default_value"}},{"id":"default_value=(default_value:FValue)-instance-method","html_id":"default_value=(default_value:FValue)-instance-method","name":"default_value=","doc":null,"summary":null,"abstract":false,"args":[{"name":"default_value","doc":null,"default_value":"","external_name":"default_value","restriction":"FValue"}],"args_string":"(default_value : FValue)","source_link":null,"source_link":null,"def":{"name":"default_value=","args":[{"name":"default_value","doc":null,"default_value":"","external_name":"default_value","restriction":"FValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@default_value = default_value"}},{"id":"description:::Union(String,Nil)-instance-method","html_id":"description:::Union(String,Nil)-instance-method","name":"description","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Union(String, Nil)","source_link":null,"source_link":null,"def":{"name":"description","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Union(String, ::Nil)","visibility":"Public","body":"@description"}},{"id":"description=(description:::Union(String,Nil))-instance-method","html_id":"description=(description:::Union(String,Nil))-instance-method","name":"description=","doc":null,"summary":null,"abstract":false,"args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"::Union(String, ::Nil)"}],"args_string":"(description : ::Union(String, Nil))","source_link":null,"source_link":null,"def":{"name":"description=","args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"::Union(String, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@description = description"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"name=(name:String)-instance-method","html_id":"name=(name:String)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":null,"source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"name\"\n  name_field(arguments, context)\nwhen \"description\"\n  description_field(arguments, context)\nwhen \"type\"\n  type_field(arguments, context)\nwhen \"defaultValue\"\n  defaultValue_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"name\"\n    name_field(arguments, context)\n  when \"description\"\n    description_field(arguments, context)\n  when \"type\"\n    type_field(arguments, context)\n  when \"defaultValue\"\n    defaultValue_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"name\"\n      name_field(arguments, context)\n    when \"description\"\n      description_field(arguments, context)\n    when \"type\"\n      type_field(arguments, context)\n    when \"defaultValue\"\n      defaultValue_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"name\"\n        name_field(arguments, context)\n      when \"description\"\n        description_field(arguments, context)\n      when \"type\"\n        type_field(arguments, context)\n      when \"defaultValue\"\n        defaultValue_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"name\"\n          name_field(arguments, context)\n        when \"description\"\n          description_field(arguments, context)\n        when \"type\"\n          type_field(arguments, context)\n        when \"defaultValue\"\n          defaultValue_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"type:Type-instance-method","html_id":"type:Type-instance-method","name":"type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Type","source_link":null,"source_link":null,"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type","visibility":"Public","body":"@type"}},{"id":"type=(type:Type)-instance-method","html_id":"type=(type:Type)-instance-method","name":"type=","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"}],"args_string":"(type : Type)","source_link":null,"source_link":null,"def":{"name":"type=","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@type = type"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: @name, type: @type, default_value: @default_value, directives: @directives, description: @description))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_53 = type\n  if __temp_53.is_a?(Array)\n    __temp_54 = __temp_53.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_53 == nil) || (visited_ids.includes?(__temp_53.object_id))\n    else\n      visited_ids << __temp_53.object_id\n      __temp_54 = __temp_53.not_nil!.visit(name, visited_ids, block)\n      self.type = (      __temp_54)\n    end\n  end\n  __temp_53 = directives\n  if __temp_53.is_a?(Array)\n    __temp_54 = __temp_53.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_53 == nil) || (visited_ids.includes?(__temp_53.object_id))\n    else\n      visited_ids << __temp_53.object_id\n      __temp_54 = __temp_53.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_54)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::InputValueDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/InterfaceTypeDefinition","path":"GraphQL/Language/InterfaceTypeDefinition.html","kind":"class","full_name":"GraphQL::Language::InterfaceTypeDefinition","name":"InterfaceTypeDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":231,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":298,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:kind, \"\", nil, \"\"}, {:possibleTypes, \"\", nil, \"\"}, {:fields, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{fields, Array(FieldDefinition)}, {directives, Array(Directive)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:fields, :directives]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(fields: Array(FieldDefinition), directives: Array(Directive)))"}}],"constructors":[{"id":"new(fields,directives,**rest)-class-method","html_id":"new(fields,directives,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"args_string":"(fields, directives, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(fields, directives, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::InterfaceTypeDefinition)-instance-method","html_id":"==(other:GraphQL::Language::InterfaceTypeDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::InterfaceTypeDefinition"}],"args_string":"(other : GraphQL::Language::InterfaceTypeDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::InterfaceTypeDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  ((@fields == other.fields) && (@directives == other.directives)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"fields:Array(FieldDefinition)-instance-method","html_id":"fields:Array(FieldDefinition)-instance-method","name":"fields","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(FieldDefinition)","source_link":null,"source_link":null,"def":{"name":"fields","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(FieldDefinition)","visibility":"Public","body":"@fields"}},{"id":"fields=(fields:Array(FieldDefinition))-instance-method","html_id":"fields=(fields:Array(FieldDefinition))-instance-method","name":"fields=","doc":null,"summary":null,"abstract":false,"args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":"Array(FieldDefinition)"}],"args_string":"(fields : Array(FieldDefinition))","source_link":null,"source_link":null,"def":{"name":"fields=","args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":"Array(FieldDefinition)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@fields = fields"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"kind\"\n  kind_field(arguments, context)\nwhen \"possibleTypes\"\n  possibleTypes_field(arguments, context)\nwhen \"fields\"\n  fields_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"kind\"\n    kind_field(arguments, context)\n  when \"possibleTypes\"\n    possibleTypes_field(arguments, context)\n  when \"fields\"\n    fields_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"kind\"\n      kind_field(arguments, context)\n    when \"possibleTypes\"\n      possibleTypes_field(arguments, context)\n    when \"fields\"\n      fields_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"kind\"\n        kind_field(arguments, context)\n      when \"possibleTypes\"\n        possibleTypes_field(arguments, context)\n      when \"fields\"\n        fields_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"kind\"\n          kind_field(arguments, context)\n        when \"possibleTypes\"\n          possibleTypes_field(arguments, context)\n        when \"fields\"\n          fields_field(arguments, context)\n        else\n          name, arguments, context = name, arguments, context\n          case name\n          when \"__typename\"\n            __typename_field(arguments, context)\n          when \"kind\"\n            kind_field(arguments, context)\n          when \"possibleTypes\"\n            possibleTypes_field(arguments, context)\n          when \"fields\"\n            fields_field(arguments, context)\n          else\n            name, arguments, context = name, arguments, context\n            case name\n            when \"__typename\"\n              __typename_field(arguments, context)\n            when \"kind\"\n              kind_field(arguments, context)\n            when \"possibleTypes\"\n              possibleTypes_field(arguments, context)\n            when \"fields\"\n              fields_field(arguments, context)\n            else\n              name, arguments, context = name, arguments, context\n              case name\n              when \"__typename\"\n                __typename_field(arguments, context)\n              when \"kind\"\n                kind_field(arguments, context)\n              when \"possibleTypes\"\n                possibleTypes_field(arguments, context)\n              when \"fields\"\n                fields_field(arguments, context)\n              else\n                name, arguments, context = name, arguments, context\n                case name\n                when \"__typename\"\n                  __typename_field(arguments, context)\n                when \"kind\"\n                  kind_field(arguments, context)\n                when \"possibleTypes\"\n                  possibleTypes_field(arguments, context)\n                when \"fields\"\n                  fields_field(arguments, context)\n                else\n                  super(name, arguments, context)\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(fields: @fields, directives: @directives))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_79 = fields\n  if __temp_79.is_a?(Array)\n    __temp_80 = __temp_79.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_79 == nil) || (visited_ids.includes?(__temp_79.object_id))\n    else\n      visited_ids << __temp_79.object_id\n      __temp_80 = __temp_79.not_nil!.visit(name, visited_ids, block)\n      self.fields = (      __temp_80)\n    end\n  end\n  __temp_79 = directives\n  if __temp_79.is_a?(Array)\n    __temp_80 = __temp_79.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_79 == nil) || (visited_ids.includes?(__temp_79.object_id))\n    else\n      visited_ids << __temp_79.object_id\n      __temp_80 = __temp_79.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_80)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::InterfaceTypeDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/Lexer","path":"GraphQL/Language/Lexer.html","kind":"class","full_name":"GraphQL::Language::Lexer","name":"Lexer","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/Scanner","kind":"class","full_name":"CLTK::Scanner","name":"Scanner"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/Scanner","kind":"class","full_name":"CLTK::Scanner","name":"Scanner"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/lexer.cr","line_number":9,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/lexer.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"ESCAPES","value":"/\\\\[\"\\\\\\/bfnrt]/","doc":null,"summary":null},{"name":"ESCAPES_REPLACE","value":"{\"\\\\\\\"\" => '\"', \"\\\\\\\\\" => \"\\\\\", \"\\\\/\" => '/', \"\\\\b\" => \"\\b\", \"\\\\f\" => \"\\f\", \"\\\\n\" => \"\\n\", \"\\\\r\" => \"\\r\", \"\\\\t\" => \"\\t\"}","doc":null,"summary":null},{"name":"UTF_8","value":"/\\\\u[\\dAa-f]{4}/i","doc":null,"summary":null},{"name":"UTF_8_REPLACE","value":"->(m : String) do\n  [m[-4..-1].to_i(16)]\nend","doc":null,"summary":null},{"name":"VALID_STRING","value":"/\\A(?:[^\\\\]|#{ESCAPES}|#{UTF_8})*\\z/","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/Scanner/LexerCompatibility","kind":"module","full_name":"CLTK::Scanner::LexerCompatibility","name":"LexerCompatibility"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"\nA Lexer for GraphQL Documents\n","summary":"<p>A Lexer for GraphQL Documents </p>","class_methods":[{"id":"lex(string)-class-method","html_id":"lex(string)-class-method","name":"lex","doc":null,"summary":null,"abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"args_string":"(string)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/lexer.cr#L10","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/lexer.cr#L10","def":{"name":"lex","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(super(string)).map do |token, position|\n  pos = CLTK::StreamPosition.new(position[:position], 0, position[:position], position[:size])\n  CLTK::Token.new(token[0], token[1]?, pos)\nend << (CLTK::Token.new(:EOS))"}},{"id":"replace_escaped_characters_in_place(raw_string)-class-method","html_id":"replace_escaped_characters_in_place(raw_string)-class-method","name":"replace_escaped_characters_in_place","doc":null,"summary":null,"abstract":false,"args":[{"name":"raw_string","doc":null,"default_value":"","external_name":"raw_string","restriction":""}],"args_string":"(raw_string)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/lexer.cr#L94","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/lexer.cr#L94","def":{"name":"replace_escaped_characters_in_place","args":[{"name":"raw_string","doc":null,"default_value":"","external_name":"raw_string","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(raw_string.gsub(ESCAPES, ESCAPES_REPLACE)).gsub(UTF_8, &UTF_8_REPLACE)"}}],"constructors":[],"instance_methods":[{"id":"lex(string)-instance-method","html_id":"lex(string)-instance-method","name":"lex","doc":null,"summary":null,"abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"args_string":"(string)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/lexer.cr#L10","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/lexer.cr#L10","def":{"name":"lex","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.lex(string)"}}],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/ListType","path":"GraphQL/Language/ListType.html","kind":"class","full_name":"GraphQL::Language::ListType","name":"ListType","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/WrapperType","kind":"class","full_name":"GraphQL::Language::WrapperType","name":"WrapperType"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/WrapperType","kind":"class","full_name":"GraphQL::Language::WrapperType","name":"WrapperType"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":159,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":318,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:kind, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[] of Tuple(Symbol, Object.class)","doc":"A list type definition, denoted with `[...]` (used for variable type definitions)","summary":"<p>A list type definition, denoted with <code>[...]</code> (used for variable type definitions)</p>"},{"name":"VISITS","value":"[] of Tuple(Symbol, Array(Symbol))","doc":"A list type definition, denoted with `[...]` (used for variable type definitions)","summary":"<p>A list type definition, denoted with <code>[...]</code> (used for variable type definitions)</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"A list type definition, denoted with `[...]` (used for variable type definitions)","summary":"<p>A list type definition, denoted with <code>[...]</code> (used for variable type definitions)</p>","class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"new","args":[],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::ListType)-instance-method","html_id":"==(other:GraphQL::Language::ListType)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::ListType"}],"args_string":"(other : GraphQL::Language::ListType)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::ListType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  super(other)\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"kind\"\n  kind_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"kind\"\n    kind_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"kind\"\n      kind_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"kind\"\n        kind_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"kind\"\n          kind_field(arguments, context)\n        else\n          name, arguments, context = name, arguments, context\n          case name\n          when \"__typename\"\n            __typename_field(arguments, context)\n          when \"kind\"\n            kind_field(arguments, context)\n          else\n            name, arguments, context = name, arguments, context\n            case name\n            when \"__typename\"\n              __typename_field(arguments, context)\n            when \"kind\"\n              kind_field(arguments, context)\n            else\n              name, arguments, context = name, arguments, context\n              case name\n              when \"__typename\"\n                __typename_field(arguments, context)\n              when \"kind\"\n                kind_field(arguments, context)\n              else\n                name, arguments, context = name, arguments, context\n                case name\n                when \"__typename\"\n                  __typename_field(arguments, context)\n                when \"kind\"\n                  kind_field(arguments, context)\n                else\n                  super(name, arguments, context)\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::ListType\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NameOnlyNode","path":"GraphQL/Language/NameOnlyNode.html","kind":"class","full_name":"GraphQL::Language::NameOnlyNode","name":"NameOnlyNode","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":145,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{name, String}] of Tuple(Symbol, Object.class)","doc":"Base class for nodes whose only value is a name (no child nodes or other scalars)","summary":"<p>Base class for nodes whose only value is a name (no child nodes or other scalars)</p>"},{"name":"VISITS","value":"[] of Tuple(Symbol, Array(Symbol))","doc":"Base class for nodes whose only value is a name (no child nodes or other scalars)","summary":"<p>Base class for nodes whose only value is a name (no child nodes or other scalars)</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AEnum","kind":"class","full_name":"GraphQL::Language::AEnum","name":"AEnum"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NullValue","kind":"class","full_name":"GraphQL::Language::NullValue","name":"NullValue"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeName","kind":"class","full_name":"GraphQL::Language::TypeName","name":"TypeName"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/VariableIdentifier","kind":"class","full_name":"GraphQL::Language::VariableIdentifier","name":"VariableIdentifier"}],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"Base class for nodes whose only value is a name (no child nodes or other scalars)","summary":"<p>Base class for nodes whose only value is a name (no child nodes or other scalars)</p>","class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: String))"}}],"constructors":[{"id":"new(name,**rest)-class-method","html_id":"new(name,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::NameOnlyNode)-instance-method","html_id":"==(other:GraphQL::Language::NameOnlyNode)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::NameOnlyNode"}],"args_string":"(other : GraphQL::Language::NameOnlyNode)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::NameOnlyNode"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  (@name == other.name) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"name=(name:String)-instance-method","html_id":"name=(name:String)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":null,"source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: @name))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::NameOnlyNode\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NonNullType","path":"GraphQL/Language/NonNullType.html","kind":"class","full_name":"GraphQL::Language::NonNullType","name":"NonNullType","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/WrapperType","kind":"class","full_name":"GraphQL::Language::WrapperType","name":"WrapperType"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/WrapperType","kind":"class","full_name":"GraphQL::Language::WrapperType","name":"WrapperType"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":189,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":322,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:kind, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[] of Tuple(Symbol, Object.class)","doc":"A non-null type definition, denoted with `...!` (used for variable type definitions)","summary":"<p>A non-null type definition, denoted with <code>...!</code> (used for variable type definitions)</p>"},{"name":"VISITS","value":"[] of Tuple(Symbol, Array(Symbol))","doc":"A non-null type definition, denoted with `...!` (used for variable type definitions)","summary":"<p>A non-null type definition, denoted with <code>...!</code> (used for variable type definitions)</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"A non-null type definition, denoted with `...!` (used for variable type definitions)","summary":"<p>A non-null type definition, denoted with <code>...!</code> (used for variable type definitions)</p>","class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"new","args":[],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::NonNullType)-instance-method","html_id":"==(other:GraphQL::Language::NonNullType)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::NonNullType"}],"args_string":"(other : GraphQL::Language::NonNullType)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::NonNullType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  super(other)\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"kind\"\n  kind_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"kind\"\n    kind_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"kind\"\n      kind_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"kind\"\n        kind_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"kind\"\n          kind_field(arguments, context)\n        else\n          name, arguments, context = name, arguments, context\n          case name\n          when \"__typename\"\n            __typename_field(arguments, context)\n          when \"kind\"\n            kind_field(arguments, context)\n          else\n            name, arguments, context = name, arguments, context\n            case name\n            when \"__typename\"\n              __typename_field(arguments, context)\n            when \"kind\"\n              kind_field(arguments, context)\n            else\n              name, arguments, context = name, arguments, context\n              case name\n              when \"__typename\"\n                __typename_field(arguments, context)\n              when \"kind\"\n                kind_field(arguments, context)\n              else\n                name, arguments, context = name, arguments, context\n                case name\n                when \"__typename\"\n                  __typename_field(arguments, context)\n                when \"kind\"\n                  kind_field(arguments, context)\n                else\n                  super(name, arguments, context)\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::NonNullType\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NullValue","path":"GraphQL/Language/NullValue.html","kind":"class","full_name":"GraphQL::Language::NullValue","name":"NullValue","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NameOnlyNode","kind":"class","full_name":"GraphQL::Language::NameOnlyNode","name":"NameOnlyNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NameOnlyNode","kind":"class","full_name":"GraphQL::Language::NameOnlyNode","name":"NameOnlyNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":199,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[] of Tuple(Symbol, Object.class)","doc":"A null value literal.","summary":"<p>A null value literal.</p>"},{"name":"VISITS","value":"[] of Tuple(Symbol, Array(Symbol))","doc":"A null value literal.","summary":"<p>A null value literal.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"A null value literal.","summary":"<p>A null value literal.</p>","class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"new","args":[],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::NullValue)-instance-method","html_id":"==(other:GraphQL::Language::NullValue)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::NullValue"}],"args_string":"(other : GraphQL::Language::NullValue)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::NullValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  super(other)\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          name, arguments, context = name, arguments, context\n          case name\n          when \"__typename\"\n            __typename_field(arguments, context)\n          else\n            name, arguments, context = name, arguments, context\n            case name\n            when \"__typename\"\n              __typename_field(arguments, context)\n            else\n              name, arguments, context = name, arguments, context\n              case name\n              when \"__typename\"\n                __typename_field(arguments, context)\n              else\n                name, arguments, context = name, arguments, context\n                case name\n                when \"__typename\"\n                  __typename_field(arguments, context)\n                else\n                  super(name, arguments, context)\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::NullValue\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/ObjectTypeDefinition","path":"GraphQL/Language/ObjectTypeDefinition.html","kind":"class","full_name":"GraphQL::Language::ObjectTypeDefinition","name":"ObjectTypeDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":125,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":270,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:kind, \"\", nil, \"\"}, {:fields, \"\", nil, \"\"}, {:interfaces, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{interfaces, Array(String)}, {fields, Array(FieldDefinition)}, {directives, Array(Directive)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:fields, :directives]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(interfaces: Array(String), fields: Array(FieldDefinition), directives: Array(Directive)))"}}],"constructors":[{"id":"new(interfaces,fields,directives,**rest)-class-method","html_id":"new(interfaces,fields,directives,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"interfaces","doc":null,"default_value":"","external_name":"interfaces","restriction":""},{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"args_string":"(interfaces, fields, directives, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"interfaces","doc":null,"default_value":"","external_name":"interfaces","restriction":""},{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(interfaces, fields, directives, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::ObjectTypeDefinition)-instance-method","html_id":"==(other:GraphQL::Language::ObjectTypeDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::ObjectTypeDefinition"}],"args_string":"(other : GraphQL::Language::ObjectTypeDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::ObjectTypeDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  (((@interfaces == other.interfaces) && (@fields == other.fields)) && (@directives == other.directives)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"fields:Array(FieldDefinition)-instance-method","html_id":"fields:Array(FieldDefinition)-instance-method","name":"fields","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(FieldDefinition)","source_link":null,"source_link":null,"def":{"name":"fields","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(FieldDefinition)","visibility":"Public","body":"@fields"}},{"id":"fields=(fields:Array(FieldDefinition))-instance-method","html_id":"fields=(fields:Array(FieldDefinition))-instance-method","name":"fields=","doc":null,"summary":null,"abstract":false,"args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":"Array(FieldDefinition)"}],"args_string":"(fields : Array(FieldDefinition))","source_link":null,"source_link":null,"def":{"name":"fields=","args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":"Array(FieldDefinition)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@fields = fields"}},{"id":"interfaces:Array(String)-instance-method","html_id":"interfaces:Array(String)-instance-method","name":"interfaces","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)","source_link":null,"source_link":null,"def":{"name":"interfaces","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"@interfaces"}},{"id":"interfaces=(interfaces:Array(String))-instance-method","html_id":"interfaces=(interfaces:Array(String))-instance-method","name":"interfaces=","doc":null,"summary":null,"abstract":false,"args":[{"name":"interfaces","doc":null,"default_value":"","external_name":"interfaces","restriction":"Array(String)"}],"args_string":"(interfaces : Array(String))","source_link":null,"source_link":null,"def":{"name":"interfaces=","args":[{"name":"interfaces","doc":null,"default_value":"","external_name":"interfaces","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@interfaces = interfaces"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"kind\"\n  kind_field(arguments, context)\nwhen \"fields\"\n  fields_field(arguments, context)\nwhen \"interfaces\"\n  interfaces_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"kind\"\n    kind_field(arguments, context)\n  when \"fields\"\n    fields_field(arguments, context)\n  when \"interfaces\"\n    interfaces_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"kind\"\n      kind_field(arguments, context)\n    when \"fields\"\n      fields_field(arguments, context)\n    when \"interfaces\"\n      interfaces_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"kind\"\n        kind_field(arguments, context)\n      when \"fields\"\n        fields_field(arguments, context)\n      when \"interfaces\"\n        interfaces_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"kind\"\n          kind_field(arguments, context)\n        when \"fields\"\n          fields_field(arguments, context)\n        when \"interfaces\"\n          interfaces_field(arguments, context)\n        else\n          name, arguments, context = name, arguments, context\n          case name\n          when \"__typename\"\n            __typename_field(arguments, context)\n          when \"kind\"\n            kind_field(arguments, context)\n          when \"fields\"\n            fields_field(arguments, context)\n          when \"interfaces\"\n            interfaces_field(arguments, context)\n          else\n            name, arguments, context = name, arguments, context\n            case name\n            when \"__typename\"\n              __typename_field(arguments, context)\n            when \"kind\"\n              kind_field(arguments, context)\n            when \"fields\"\n              fields_field(arguments, context)\n            when \"interfaces\"\n              interfaces_field(arguments, context)\n            else\n              name, arguments, context = name, arguments, context\n              case name\n              when \"__typename\"\n                __typename_field(arguments, context)\n              when \"kind\"\n                kind_field(arguments, context)\n              when \"fields\"\n                fields_field(arguments, context)\n              when \"interfaces\"\n                interfaces_field(arguments, context)\n              else\n                name, arguments, context = name, arguments, context\n                case name\n                when \"__typename\"\n                  __typename_field(arguments, context)\n                when \"kind\"\n                  kind_field(arguments, context)\n                when \"fields\"\n                  fields_field(arguments, context)\n                when \"interfaces\"\n                  interfaces_field(arguments, context)\n                else\n                  super(name, arguments, context)\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"}},{"id":"resolved_interfaces(schema)-instance-method","html_id":"resolved_interfaces(schema)-instance-method","name":"resolved_interfaces","doc":null,"summary":null,"abstract":false,"args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":""}],"args_string":"(schema)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L286","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L286","def":{"name":"resolved_interfaces","args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"interfaces.map do |iface_name|\n  (schema.type_resolve(iface_name)).as(InterfaceTypeDefinition)\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(interfaces: @interfaces, fields: @fields, directives: @directives))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_49 = fields\n  if __temp_49.is_a?(Array)\n    __temp_50 = __temp_49.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_49 == nil) || (visited_ids.includes?(__temp_49.object_id))\n    else\n      visited_ids << __temp_49.object_id\n      __temp_50 = __temp_49.not_nil!.visit(name, visited_ids, block)\n      self.fields = (      __temp_50)\n    end\n  end\n  __temp_49 = directives\n  if __temp_49.is_a?(Array)\n    __temp_50 = __temp_49.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_49 == nil) || (visited_ids.includes?(__temp_49.object_id))\n    else\n      visited_ids << __temp_49.object_id\n      __temp_50 = __temp_49.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_50)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::ObjectTypeDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/OperationDefinition","path":"GraphQL/Language/OperationDefinition.html","kind":"class","full_name":"GraphQL::Language::OperationDefinition","name":"OperationDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":69,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{operation_type, String}, {name, ::Union(String, ::Nil)}, {variables, Array(VariableDefinition)}, {directives, Array(Directive)}, {selections, Array(Selection)}] of Tuple(Symbol, Object.class)","doc":"A query, mutation or subscription.\nMay be anonymous or named.\nMay be explicitly typed (eg `mutation { ... }`) or implicitly a query (eg `{ ... }`).","summary":"<p>A query, mutation or subscription.</p>"},{"name":"VISITS","value":"[{:children, [:variables, :directives, :selections]}] of Tuple(Symbol, Array(Symbol))","doc":"A query, mutation or subscription.\nMay be anonymous or named.\nMay be explicitly typed (eg `mutation { ... }`) or implicitly a query (eg `{ ... }`).","summary":"<p>A query, mutation or subscription.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"A query, mutation or subscription.\nMay be anonymous or named.\nMay be explicitly typed (eg `mutation { ... }`) or implicitly a query (eg `{ ... }`).","summary":"<p>A query, mutation or subscription.</p>","class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(operation_type: String, name: ::Union(String, ::Nil), variables: Array(VariableDefinition), directives: Array(Directive), selections: Array(Selection)))"}}],"constructors":[{"id":"new(operation_type,name,variables,directives,selections,**rest)-class-method","html_id":"new(operation_type,name,variables,directives,selections,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_type","doc":null,"default_value":"","external_name":"operation_type","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"variables","doc":null,"default_value":"","external_name":"variables","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":""}],"args_string":"(operation_type, name, variables, directives, selections, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"operation_type","doc":null,"default_value":"","external_name":"operation_type","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"variables","doc":null,"default_value":"","external_name":"variables","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""},{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(operation_type, name, variables, directives, selections, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::OperationDefinition)-instance-method","html_id":"==(other:GraphQL::Language::OperationDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::OperationDefinition"}],"args_string":"(other : GraphQL::Language::OperationDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::OperationDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  (((((@operation_type == other.operation_type) && (@name == other.name)) && (@variables == other.variables)) && (@directives == other.directives)) && (@selections == other.selections)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"name:::Union(String,Nil)-instance-method","html_id":"name:::Union(String,Nil)-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Union(String, Nil)","source_link":null,"source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Union(String, ::Nil)","visibility":"Public","body":"@name"}},{"id":"name=(name:::Union(String,Nil))-instance-method","html_id":"name=(name:::Union(String,Nil))-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"::Union(String, ::Nil)"}],"args_string":"(name : ::Union(String, Nil))","source_link":null,"source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"::Union(String, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"operation_type:String-instance-method","html_id":"operation_type:String-instance-method","name":"operation_type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"source_link":null,"def":{"name":"operation_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@operation_type"}},{"id":"operation_type=(operation_type:String)-instance-method","html_id":"operation_type=(operation_type:String)-instance-method","name":"operation_type=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_type","doc":null,"default_value":"","external_name":"operation_type","restriction":"String"}],"args_string":"(operation_type : String)","source_link":null,"source_link":null,"def":{"name":"operation_type=","args":[{"name":"operation_type","doc":null,"default_value":"","external_name":"operation_type","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_type = operation_type"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"selections:Array(Selection)-instance-method","html_id":"selections:Array(Selection)-instance-method","name":"selections","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Selection)","source_link":null,"source_link":null,"def":{"name":"selections","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Selection)","visibility":"Public","body":"@selections"}},{"id":"selections=(selections:Array(Selection))-instance-method","html_id":"selections=(selections:Array(Selection))-instance-method","name":"selections=","doc":null,"summary":null,"abstract":false,"args":[{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":"Array(Selection)"}],"args_string":"(selections : Array(Selection))","source_link":null,"source_link":null,"def":{"name":"selections=","args":[{"name":"selections","doc":null,"default_value":"","external_name":"selections","restriction":"Array(Selection)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@selections = selections"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(operation_type: @operation_type, name: @name, variables: @variables, directives: @directives, selections: @selections))"}},{"id":"variables:Array(VariableDefinition)-instance-method","html_id":"variables:Array(VariableDefinition)-instance-method","name":"variables","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(VariableDefinition)","source_link":null,"source_link":null,"def":{"name":"variables","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(VariableDefinition)","visibility":"Public","body":"@variables"}},{"id":"variables=(variables:Array(VariableDefinition))-instance-method","html_id":"variables=(variables:Array(VariableDefinition))-instance-method","name":"variables=","doc":null,"summary":null,"abstract":false,"args":[{"name":"variables","doc":null,"default_value":"","external_name":"variables","restriction":"Array(VariableDefinition)"}],"args_string":"(variables : Array(VariableDefinition))","source_link":null,"source_link":null,"def":{"name":"variables=","args":[{"name":"variables","doc":null,"default_value":"","external_name":"variables","restriction":"Array(VariableDefinition)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@variables = variables"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_35 = variables\n  if __temp_35.is_a?(Array)\n    __temp_36 = __temp_35.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_35 == nil) || (visited_ids.includes?(__temp_35.object_id))\n    else\n      visited_ids << __temp_35.object_id\n      __temp_36 = __temp_35.not_nil!.visit(name, visited_ids, block)\n      self.variables = (      __temp_36)\n    end\n  end\n  __temp_35 = directives\n  if __temp_35.is_a?(Array)\n    __temp_36 = __temp_35.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_35 == nil) || (visited_ids.includes?(__temp_35.object_id))\n    else\n      visited_ids << __temp_35.object_id\n      __temp_36 = __temp_35.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_36)\n    end\n  end\n  __temp_35 = selections\n  if __temp_35.is_a?(Array)\n    __temp_36 = __temp_35.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_35 == nil) || (visited_ids.includes?(__temp_35.object_id))\n    else\n      visited_ids << __temp_35.object_id\n      __temp_36 = __temp_35.not_nil!.visit(name, visited_ids, block)\n      self.selections = (      __temp_36)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::OperationDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/Parser","path":"GraphQL/Language/Parser.html","kind":"class","full_name":"GraphQL::Language::Parser","name":"Parser","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/Parser/Explain","kind":"module","full_name":"CLTK::Parser::Explain","name":"Explain"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/parser.cr","line_number":11,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"CLAUSES","value":"[{lhs: :document, expression: \"definition+\", precedence: nil, arg_type: :splat, cb: 0}, {lhs: :definition, expression: \"operation_definition\", precedence: nil, arg_type: :splat, cb: 1}, {lhs: :definition, expression: \"fragment_definition\", precedence: nil, arg_type: :splat, cb: 2}, {lhs: :definition, expression: \"type_system_definition\", precedence: nil, arg_type: :splat, cb: 3}, {lhs: :operation_definition, expression: \"operation_type name? variable_definitions? directive* selection_set\", precedence: nil, arg_type: :splat, cb: 4}, {lhs: :operation_definition, expression: \"selection_set\", precedence: nil, arg_type: :splat, cb: 5}, {lhs: :operation_type, expression: \"QUERY\", precedence: nil, arg_type: :splat, cb: 6}, {lhs: :operation_type, expression: \"MUTATION\", precedence: nil, arg_type: :splat, cb: 7}, {lhs: :operation_type, expression: \"SUBSCRIPTION\", precedence: nil, arg_type: :splat, cb: 8}, {lhs: :variable_definitions, expression: \"LPAREN .variable_definition+ RPAREN\", precedence: nil, arg_type: :splat, cb: 9}, {lhs: :variable_definition, expression: \"VAR_SIGN .name COLON .type\", precedence: nil, arg_type: :splat, cb: 10}, {lhs: :variable_definition, expression: \"VAR_SIGN .name COLON .type .default_value\", precedence: nil, arg_type: :splat, cb: 11}, {lhs: :type, expression: \"name\", precedence: nil, arg_type: :splat, cb: 12}, {lhs: :type, expression: \".type BANG\", precedence: nil, arg_type: :splat, cb: 13}, {lhs: :type, expression: \"LBRACKET .type RBRACKET\", precedence: nil, arg_type: :splat, cb: 14}, {lhs: :default_value, expression: \"EQUALS .input_value\", precedence: nil, arg_type: :splat, cb: 15}, {lhs: :selection_set, expression: \"LCURLY .selection* RCURLY\", precedence: nil, arg_type: :splat, cb: 16}, {lhs: :selection, expression: \"field\", precedence: nil, arg_type: :splat, cb: 17}, {lhs: :selection, expression: \"fragment_spread\", precedence: nil, arg_type: :splat, cb: 18}, {lhs: :selection, expression: \"inline_fragment\", precedence: nil, arg_type: :splat, cb: 19}, {lhs: :field, expression: \"name_without_on arguments? directive* selection_set?\", precedence: nil, arg_type: :splat, cb: 20}, {lhs: :field, expression: \".name_without_on COLON .name .arguments? .directive*? .selection_set?\", precedence: nil, arg_type: :splat, cb: 21}, {lhs: :schema_keyword, expression: \"SCHEMA\", precedence: nil, arg_type: :splat, cb: 22}, {lhs: :schema_keyword, expression: \"SCALAR\", precedence: nil, arg_type: :splat, cb: 23}, {lhs: :schema_keyword, expression: \"TYPE\", precedence: nil, arg_type: :splat, cb: 24}, {lhs: :schema_keyword, expression: \"IMPLEMENTS\", precedence: nil, arg_type: :splat, cb: 25}, {lhs: :schema_keyword, expression: \"INTERFACE\", precedence: nil, arg_type: :splat, cb: 26}, {lhs: :schema_keyword, expression: \"UNION\", precedence: nil, arg_type: :splat, cb: 27}, {lhs: :schema_keyword, expression: \"ENUM\", precedence: nil, arg_type: :splat, cb: 28}, {lhs: :schema_keyword, expression: \"INPUT\", precedence: nil, arg_type: :splat, cb: 29}, {lhs: :schema_keyword, expression: \"DIRECTIVE\", precedence: nil, arg_type: :splat, cb: 30}, {lhs: :name, expression: \"name_without_on\", precedence: nil, arg_type: :splat, cb: 31}, {lhs: :name, expression: \"ON\", precedence: nil, arg_type: :splat, cb: 32}, {lhs: :name_without_on, expression: \"IDENTIFIER\", precedence: nil, arg_type: :splat, cb: 33}, {lhs: :name_without_on, expression: \"FRAGMENT\", precedence: nil, arg_type: :splat, cb: 34}, {lhs: :name_without_on, expression: \"TRUE\", precedence: nil, arg_type: :splat, cb: 35}, {lhs: :name_without_on, expression: \"FALSE\", precedence: nil, arg_type: :splat, cb: 36}, {lhs: :name_without_on, expression: \"operation_type\", precedence: nil, arg_type: :splat, cb: 37}, {lhs: :name_without_on, expression: \"schema_keyword\", precedence: nil, arg_type: :splat, cb: 38}, {lhs: :enum_name, expression: \"IDENTIFIER\", precedence: nil, arg_type: :splat, cb: 39}, {lhs: :enum_name, expression: \"FRAGMENT\", precedence: nil, arg_type: :splat, cb: 40}, {lhs: :enum_name, expression: \"ON\", precedence: nil, arg_type: :splat, cb: 41}, {lhs: :enum_name, expression: \"operation_type\", precedence: nil, arg_type: :splat, cb: 42}, {lhs: :enum_name, expression: \"schema_keyword\", precedence: nil, arg_type: :splat, cb: 43}, {lhs: :enum_value_definition, expression: \"comments? enum_name directive*\", precedence: nil, arg_type: :splat, cb: 44}, {lhs: :arguments, expression: \"LPAREN .argument* RPAREN\", precedence: nil, arg_type: :splat, cb: 45}, {lhs: :argument, expression: \".name COLON .input_value\", precedence: nil, arg_type: :splat, cb: 46}, {lhs: :input_value, expression: \"FLOAT\", precedence: nil, arg_type: :splat, cb: 47}, {lhs: :input_value, expression: \"INT\", precedence: nil, arg_type: :splat, cb: 48}, {lhs: :input_value, expression: \"STRING\", precedence: nil, arg_type: :splat, cb: 49}, {lhs: :input_value, expression: \"TRUE\", precedence: nil, arg_type: :splat, cb: 50}, {lhs: :input_value, expression: \"FALSE\", precedence: nil, arg_type: :splat, cb: 51}, {lhs: :input_value, expression: \"null_value\", precedence: nil, arg_type: :splat, cb: 52}, {lhs: :input_value, expression: \"variable\", precedence: nil, arg_type: :splat, cb: 53}, {lhs: :input_value, expression: \"list_value\", precedence: nil, arg_type: :splat, cb: 54}, {lhs: :input_value, expression: \"object_value\", precedence: nil, arg_type: :splat, cb: 55}, {lhs: :input_value, expression: \"enum_value\", precedence: nil, arg_type: :splat, cb: 56}, {lhs: :null_value, expression: \"NULL\", precedence: nil, arg_type: :splat, cb: 57}, {lhs: :variable, expression: \"VAR_SIGN .name\", precedence: nil, arg_type: :splat, cb: 58}, {lhs: :list_value, expression: \"LBRACKET .input_value* RBRACKET\", precedence: nil, arg_type: :splat, cb: 59}, {lhs: :object_value, expression: \"LCURLY .object_value_field* RCURLY\", precedence: nil, arg_type: :splat, cb: 60}, {lhs: :object_value_field, expression: \".name COLON .input_value\", precedence: nil, arg_type: :splat, cb: 61}, {lhs: :enum_value, expression: \"enum_name\", precedence: nil, arg_type: :splat, cb: 62}, {lhs: :directive, expression: \"DIR_SIGN .name .arguments?\", precedence: nil, arg_type: :splat, cb: 63}, {lhs: :fragment_spread, expression: \"ELLIPSIS .name_without_on .directive*\", precedence: nil, arg_type: :splat, cb: 64}, {lhs: :inline_fragment, expression: \"ELLIPSIS ON .type .directive* .selection_set\", precedence: nil, arg_type: :splat, cb: 65}, {lhs: :inline_fragment, expression: \"ELLIPSIS .directive* .selection_set\", precedence: nil, arg_type: :splat, cb: 66}, {lhs: :fragment_definition, expression: \"FRAGMENT .name_without_on? ON .type .directive* .selection_set\", precedence: nil, arg_type: :splat, cb: 67}, {lhs: :type_system_definition, expression: \"schema_definition\", precedence: nil, arg_type: :splat, cb: 68}, {lhs: :type_system_definition, expression: \"type_definition\", precedence: nil, arg_type: :splat, cb: 69}, {lhs: :type_system_definition, expression: \"directive_definition\", precedence: nil, arg_type: :splat, cb: 70}, {lhs: :type_system_definition, expression: \"comments type_system_definition\", precedence: nil, arg_type: :splat, cb: 71}, {lhs: :schema_definition, expression: \"SCHEMA LCURLY .operation_type_definition_list RCURLY\", precedence: nil, arg_type: :splat, cb: 72}, {empty: false, lhs: :operation_type_definition_list, elements: \"operation_type_definition\", separator: \"\"}, {lhs: :operation_type_definition, expression: \".operation_type COLON .name\", precedence: nil, arg_type: :splat, cb: 73}, {lhs: :type_definition, expression: \"scalar_type_definition\", precedence: nil, arg_type: :splat, cb: 74}, {lhs: :type_definition, expression: \"object_type_definition\", precedence: nil, arg_type: :splat, cb: 75}, {lhs: :type_definition, expression: \"interface_type_definition\", precedence: nil, arg_type: :splat, cb: 76}, {lhs: :type_definition, expression: \"union_type_definition\", precedence: nil, arg_type: :splat, cb: 77}, {lhs: :type_definition, expression: \"enum_type_definition\", precedence: nil, arg_type: :splat, cb: 78}, {lhs: :type_definition, expression: \"input_object_type_definition\", precedence: nil, arg_type: :splat, cb: 79}, {lhs: :scalar_type_definition, expression: \"SCALAR .name .directive*\", precedence: nil, arg_type: :splat, cb: 80}, {lhs: :object_type_definition, expression: \"TYPE .name .implements? .directive* LCURLY .field_definition* RCURLY\", precedence: nil, arg_type: :splat, cb: 81}, {lhs: :implements, expression: \"IMPLEMENTS .name+\", precedence: nil, arg_type: :splat, cb: 82}, {lhs: :input_value_definition, expression: \".comments? .name COLON .type .default_value? .directive*\", precedence: nil, arg_type: :splat, cb: 83}, {lhs: :arguments_definitions, expression: \"LPAREN .input_value_definition+ RPAREN\", precedence: nil, arg_type: :splat, cb: 84}, {lhs: :field_definition, expression: \".comments? .name .arguments_definitions? COLON .type .directive*\", precedence: nil, arg_type: :splat, cb: 85}, {lhs: :interface_type_definition, expression: \"INTERFACE .name .directive* LCURLY .field_definition* RCURLY\", precedence: nil, arg_type: :splat, cb: 86}, {empty: false, lhs: :union_members, elements: \"name\", separator: \"PIPE\"}, {lhs: :union_type_definition, expression: \"UNION .name .directive* EQUALS .union_members\", precedence: nil, arg_type: :splat, cb: 87}, {lhs: :enum_type_definition, expression: \"ENUM .name .directive* LCURLY .enum_value_definition+ RCURLY\", precedence: nil, arg_type: :splat, cb: 88}, {lhs: :input_object_type_definition, expression: \"INPUT .name .directive* LCURLY .input_value_definition+ RCURLY\", precedence: nil, arg_type: :splat, cb: 89}, {lhs: :directive_definition, expression: \"DIRECTIVE DIR_SIGN .name .arguments_definitions? ON .directive_locations\", precedence: nil, arg_type: :splat, cb: 90}, {lhs: :comments, expression: \"COMMENT\", precedence: nil, arg_type: :splat, cb: 91}, {lhs: :comments, expression: \"comments COMMENT\", precedence: nil, arg_type: :splat, cb: 92}, {empty: false, lhs: :directive_locations, elements: \"name\", separator: \"PIPE\"}] of CLAUSE | LIST_PROD","doc":"\nA CLTK Parser for the GraphQL Language\n","summary":"<p>A CLTK Parser for the GraphQL Language </p>"},{"name":"DEFAULT_ARG_TYPE","value":"[:splat]","doc":"\nA CLTK Parser for the GraphQL Language\n","summary":"<p>A CLTK Parser for the GraphQL Language </p>"},{"name":"PREC_COUNT","value":"{:left => 0, :right => 0, :non => 0}","doc":"\nA CLTK Parser for the GraphQL Language\n","summary":"<p>A CLTK Parser for the GraphQL Language </p>"},{"name":"PROCS","value":"[] of ProdProc","doc":"\nA CLTK Parser for the GraphQL Language\n","summary":"<p>A CLTK Parser for the GraphQL Language </p>"},{"name":"TOKEN_PRECS","value":"{} of String => Tuple(String, Int32)","doc":"\nA CLTK Parser for the GraphQL Language\n","summary":"<p>A CLTK Parser for the GraphQL Language </p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"\nA CLTK Parser for the GraphQL Language\n","summary":"<p>A CLTK Parser for the GraphQL Language </p>","class_methods":[{"id":"build_list_production_(symbol,list_elements,separator,empty)-class-method","html_id":"build_list_production_(symbol,list_elements,separator,empty)-class-method","name":"build_list_production_","doc":"Adds productions and actions for parsing (non)?empty lists.\n\n@see CFG#(non)?empty_list_production","summary":"<p>Adds productions and actions for parsing (non)?empty lists.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"","external_name":"separator","restriction":""},{"name":"empty","doc":null,"default_value":"","external_name":"empty","restriction":""}],"args_string":"(symbol, list_elements, separator, empty)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"build_list_production_","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"","external_name":"separator","restriction":""},{"name":"empty","doc":null,"default_value":"","external_name":"empty","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"list_elements = list_elements.is_a?(Array) ? list_elements.map do |e|\n  e.to_s\nend : list_elements.to_s\nif empty\n  @@grammar.build_list_production(symbol.to_s, list_elements, separator.to_s)\nelse\n  @@grammar.build_nonempty_list_production(symbol.to_s, list_elements, separator.to_s)\nend\n"}},{"id":"build_up_productions-class-method","html_id":"build_up_productions-class-method","name":"build_up_productions","doc":"\nA CLTK Parser for the GraphQL Language\n","summary":"<p>A CLTK Parser for the GraphQL Language </p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"build_up_productions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"CLAUSES.each do |clause|\n  if clause.is_a?(CLAUSE)\n    @@grammar.curr_lhs = clause[:lhs].to_s\n    production, selections = (@@grammar.not_nil!.clause(clause[:expression])).values\n    @@procs[production.id] = {PROCS[clause[:cb]], production.rhs.size}\n    @@production_precs_prepare[production.id] = (clause[:precedence] || production.last_terminal).to_s\n  else\n    build_list_production_(clause[:lhs], clause[:elements], clause[:separator], clause[:empty])\n  end\nend"}},{"id":"finalize(explain=false,lookahead=true,precedence=true,use=nil)-class-method","html_id":"finalize(explain=false,lookahead=true,precedence=true,use=nil)-class-method","name":"finalize","doc":"This method will finalize the parser causing the construction\nof states and their actions, and the resolution of conflicts\nusing lookahead and precedence information.\n\nNo calls to {Parser.production} may appear after the call to\nParser.finalize.\n\n@param [Hash] opts Options describing how to finalize the parser.\n\n@option opts [Boolean,String,IO]  :explain     To explain the parser or not.\n@option opts [Boolean]            :lookahead   To use lookahead info for conflict resolution.\n@option opts [Boolean]            :precedence  To use precedence info for conflict resolution.\n@option opts [String,IO]          :use         A file name or object that is used to load/save the parser.\n\n@return [void]","summary":"<p>This method will finalize the parser causing the construction of states and their actions, and the resolution of conflicts using lookahead and precedence information.</p>","abstract":false,"args":[{"name":"explain","doc":null,"default_value":"false","external_name":"explain","restriction":""},{"name":"lookahead","doc":null,"default_value":"true","external_name":"lookahead","restriction":""},{"name":"precedence","doc":null,"default_value":"true","external_name":"precedence","restriction":""},{"name":"use","doc":null,"default_value":"nil","external_name":"use","restriction":""}],"args_string":"(explain = <span class=\"n\">false</span>, lookahead = <span class=\"n\">true</span>, precedence = <span class=\"n\">true</span>, use = <span class=\"n\">nil</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"finalize","args":[{"name":"explain","doc":null,"default_value":"false","external_name":"explain","restriction":""},{"name":"lookahead","doc":null,"default_value":"true","external_name":"lookahead","restriction":""},{"name":"precedence","doc":null,"default_value":"true","external_name":"precedence","restriction":""},{"name":"use","doc":null,"default_value":"nil","external_name":"use","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"opts = {:explain => explain, :lookahead => lookahead, :precedence => precedence, :use => use}\nbuild_up_productions\nif ENV[\"NOCACHE\"]?\nelse\n  if (  path = opts[:use]).is_a?(String)\n    if (File.exists?(path)) && (File.readable?(path))\n      finalize_from_serialized_parser(path)\n      return\n    end\n  end\nend\nif (@@grammar.productions_sym.as(Hash(String, Array(CLTK::CFG::Production)))).empty?\n  raise(Exception.new(\"Parser has no productions.  Cowardly refusing to construct an empty parser.\"))\nend\n@@symbols = @@grammar.symbols.to_a + [\"ERROR\"]\n@@start_symbol = (@@grammar.start_symbol.to_s + \"'\")\nstart_production = (@@grammar.production(@@start_symbol, @@grammar.start_symbol))[:production]\nstart_state = State.new(@@symbols, [start_production.to_item])\nstart_state.close(@@grammar.productions_sym)\nself.add_state(start_state)\n@@production_precs = @@production_precs_prepare.map do |id, prec|\n  TOKEN_PRECS[prec]?\nend\neach_state do |state|\n  tstates = Hash(String, State).new do |h, k|\n    h[k] = State.new(@@symbols)\n  end\n  state.each do |item|\n    if (    next_symbol = item.next_symbol)\n      if tstates[next_symbol]?\n      else\n        tstates[next_symbol] = State.new(@@symbols)\n      end\n      tstates[next_symbol] << item.copy\n    end\n  end\n  tstates.each do |symbol, tstate|\n    tstate.each do |item|\n      item.advance\n    end\n    tstate.close(@@grammar.productions_sym)\n    id = self.add_state(tstate)\n    state.on(symbol, CLTK::CFG.is_nonterminal?(symbol) ? Actions::GoTo.new(id) : Actions::Shift.new(id))\n  end\n  state.each do |item|\n    if item.at_end?\n      if item.lhs == @@start_symbol\n        state.on(\"EOS\", Actions::Accept.new)\n      else\n        state.add_reduction(@@grammar.productions_id[item.id])\n      end\n    end\n  end\nend\n@@grammar.productions_id.each do |id, production|\n  @@lh_sides[id] = production.lhs\nend\nself.prune(opts[:lookahead]?, opts[:precedence]?)\ncheck_sanity\nexp = opts[:explain]?\nif exp.is_a?(IO)\n  self.explain(exp)\nend\nclean\nif (path = opts[:use]).is_a?(String)\n  serialize_to_file(path)\nend\n"}},{"id":"finalize_from_serialized_parser(path)-class-method","html_id":"finalize_from_serialized_parser(path)-class-method","name":"finalize_from_serialized_parser","doc":"\nA CLTK Parser for the GraphQL Language\n","summary":"<p>A CLTK Parser for the GraphQL Language </p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"finalize_from_serialized_parser","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"file = File.open(path, \"r\")\nunpacker = MessagePack::Unpacker.new(file)\nparsed_parser = CLTK::Parser::StandaloneParser.new(unpacker)\nfile.close\n@@lh_sides = parsed_parser.lh_sides\n@@symbols = parsed_parser.symbols\n@@states = parsed_parser.states\n"}},{"id":"prune(do_lookahead,do_precedence)-class-method","html_id":"prune(do_lookahead,do_precedence)-class-method","name":"prune","doc":"This method uses lookahead sets and precedence information to\nresolve conflicts and remove unnecessary reduce actions.\n\n@param [Boolean]  do_lookahead   Prune based on lookahead sets or not.\n@param [Boolean]  do_precedence  Prune based on precedence or not.\n\n@return [void]","summary":"<p>This method uses lookahead sets and precedence information to resolve conflicts and remove unnecessary reduce actions.</p>","abstract":false,"args":[{"name":"do_lookahead","doc":null,"default_value":"","external_name":"do_lookahead","restriction":""},{"name":"do_precedence","doc":null,"default_value":"","external_name":"do_precedence","restriction":""}],"args_string":"(do_lookahead, do_precedence)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"prune","args":[{"name":"do_lookahead","doc":null,"default_value":"","external_name":"do_lookahead","restriction":""},{"name":"do_precedence","doc":null,"default_value":"","external_name":"do_precedence","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"terms = @@grammar.terms\nif !(do_lookahead || do_precedence)\n  return\nend\neach_state do |state0|\n  if do_lookahead\n    reductions = state0.actions.values.flatten.uniq.select do |a|\n      a.is_a?(Actions::Reduce)\n    end\n    reductions.each do |reduction|\n      raction_id = (reduction.as(Action)).id\n      production = (@@grammar.productions_id.as(Hash(Int32, CLTK::CFG::Production)))[raction_id]\n      lookahead = Array(String).new\n      each_state do |state1|\n        if check_reachability(state1, state0, production.rhs)\n          lookahead = lookahead | (self.grammar_prime.follow_set(\"#{state1.id}_#{production.lhs}\".to_s))\n        end\n      end\n      lookahead = lookahead.map do |sym|\n        (sym.to_s.split('_', 2)).last\n      end.uniq\n      pruning_candidates = terms.to_a - lookahead\n      if terms.includes?(\"ERROR\")\n        pruning_candidates.each do |sym|\n          if state0.conflict_on?(sym)\n            state0.actions[sym].delete(reduction)\n          end\n        end\n      else\n        pruning_candidates.each do |sym|\n          state0.actions[sym].delete(reduction)\n        end\n      end\n    end\n  end\n  if do_precedence\n    state0.actions.each do |symbol, actions|\n      if CLTK::CFG.is_terminal?(symbol)\n      else\n        next\n      end\n      if actions && actions.size > 1\n      else\n        next\n      end\n      resolve_ok = (actions.reduce(true) do |m, a|\n        if a.is_a?(Actions::Reduce)\n          @@production_precs[a.id] && m\n        else\n          m\n        end\n      end) && (actions.reduce(false) do |m, a|\n        m || (a.is_a?(Actions::Shift))\n      end)\n      if TOKEN_PRECS[symbol]? && resolve_ok\n        max_prec = 0\n        selected_action = actions.first\n        tassoc, tprec = TOKEN_PRECS[symbol]\n        actions.each do |a|\n          assoc, prec = (a.is_a?(Actions::Shift) ? {tassoc, tprec} : @@production_precs[a.id]).as(::Tuple(String, Int32))\n          if prec > max_prec || ((prec == max_prec) && (tassoc == (a.is_a?(Actions::Shift) ? :right : :left)))\n            max_prec = prec\n            selected_action = a\n          else\n            if (prec == max_prec) && (assoc == (:nonassoc))\n              raise(Exception.new(\"Non-associative token found during conflict resolution.\"))\n            end\n          end\n        end\n        state0.actions[symbol] = [selected_action]\n      end\n    end\n  end\nend\n"}},{"id":"serialize_to_file(path)-class-method","html_id":"serialize_to_file(path)-class-method","name":"serialize_to_file","doc":"\nA CLTK Parser for the GraphQL Language\n","summary":"<p>A CLTK Parser for the GraphQL Language </p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"serialize_to_file","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"file = File.open(path, \"w+\")\npacker = MessagePack::Packer.new(file)\nto_parser.to_msgpack(packer)\nfile.close\n"}},{"id":"to_parser-class-method","html_id":"to_parser-class-method","name":"to_parser","doc":"\nA CLTK Parser for the GraphQL Language\n","summary":"<p>A CLTK Parser for the GraphQL Language </p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"to_parser","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"StandaloneParser.new(@@lh_sides, @@symbols, @@states)"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Instantiates a new parser and creates an environment to be\nused for subsequent calls.","summary":"<p>Instantiates a new parser and creates an environment to be used for subsequent calls.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[{"id":"build_list_production(symbol,list_elements,separator=\"\")-macro","html_id":"build_list_production(symbol,list_elements,separator=&quot;&quot;)-macro","name":"build_list_production","doc":"Adds productions and actions for parsing empty lists.\n\n@see CFG#empty_list_production","summary":"<p>Adds productions and actions for parsing empty lists.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"build_list_production","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% list_elements = list_elements.is_a?(ArrayLiteral) ? list_elements.map do |e|\n  e.id.stringify\nend : list_elements.id.stringify\nCLAUSES << ({empty: true, lhs: symbol, elements: list_elements, separator: separator.id.stringify})\n %}\n\n      \n"}},{"id":"build_nonempty_list_production(symbol,list_elements,separator=\"\")-macro","html_id":"build_nonempty_list_production(symbol,list_elements,separator=&quot;&quot;)-macro","name":"build_nonempty_list_production","doc":"Adds productions and actions for parsing nonempty lists.\n\n@see CFG#nonempty_list_production","summary":"<p>Adds productions and actions for parsing nonempty lists.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"build_nonempty_list_production","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% list_elements = list_elements.is_a?(ArrayLiteral) ? list_elements.map do |e|\n  e.id.stringify\nend : list_elements.id.stringify\nCLAUSES << ({empty: false, lhs: symbol, elements: list_elements, separator: separator.id.stringify})\n %}\n\n      \n"}},{"id":"clause(expression,precedence=nil,arg_type=nil)-macro","html_id":"clause(expression,precedence=nil,arg_type=nil)-macro","name":"clause","doc":"Declares a new clause inside of a production.  The right-hand\nside is specified by *expression* and the precedence of this\nproduction can be changed by setting the *precedence* argument\nto some terminal symbol.\n\n@param [String, Symbol]  expression  Right-hand side of a production.\n@param [Symbol]          precedence  Symbol representing the precedence of this production.\n@param [:array, :splat]  arg_type    Method to use when passing arguments to the action.\n@param [Proc]            action      Action to be taken when the production is reduced.\n\n@return [void]","summary":"<p>Declares a new clause inside of a production.</p>","abstract":false,"args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"args_string":"(expression, precedence = nil, arg_type = nil)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L371","def":{"name":"clause","args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":""},"visibility":"Public","body":"          \n{% arg_type = arg_type ? arg_type : DEFAULT_ARG_TYPE.last\nnext_proc_id = (@type.constant(\"CLAUSES\")).select do |x|\n  x[:expression]\nend.size\nCLAUSES << ({lhs: :comments, expression: expression.id.stringify, precedence: precedence, arg_type: arg_type, cb: next_proc_id})\nexpression_symbol_selections = (expression.id.split(\" \")).map do |e|\n  e =~ (/^\\./) ? e : nil\nend\n %}\n\n          \n{% if action.is_a?(Block) %}\n             PROCS << ProdProc.new(\n               {{ arg_type }}, {{ expression_symbol_selections }}.map_with_index { |e, i| e ? i : nil }.compact\n             ) do |lhsymbols, env, arg_type|\n              env.as(Environment).yield_with_self do\n                {% if !action.args.empty? %}\n                  {% if action.args.size == 1 %}\n                    {% if arg_type == (:array) %}\n                      {{ action.args.first }} = lhsymbols.as(Array)\n                    {% else %}\n                      {{ action.args.splat }} = lhsymbols.as(Array(CLTK::Type))[0]\n                    {% end %}\n                  {% else %}\n                      {{ action.args.splat }} = lhsymbols.as(Array(CLTK::Type))[0...{{ action.args.size }}]\n                  {% end %}\n                  # reassign the first block argument to\n                  # the whole arguments array if arg_type\n                  # evaluates to :array\n                  {% if arg_type.is_a?(NilLiteral) %}\n                    {{ action.args.first }} = lhsymbols.as(Array) if arg_type == :array\n                  {% end %}\n                {% end %}\n                result = begin\n                  {{ action.body }}\n                end\n                result.is_a?(Array) ?\n                  result.map { |r| r.as(CLTK::Type)} :\n                  result.as(CLTK::Type)\n              end\n            end\n          {% else %}\n             PROCS << ProdProc.new\n          {% end %}\n\n        \n"}},{"id":"default_arg_type(type)-macro","html_id":"default_arg_type(type)-macro","name":"default_arg_type","doc":"Set the default argument type for the actions associated with\nclauses.  All actions defined after this call will be passed\narguments in the way specified here, unless overridden in the\ncall to {Parser.clause}.\n\n@param [:array, :splat] type The default argument type.\n\n@return [void]","summary":"<p>Set the default argument type for the actions associated with clauses.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"args_string":"(type)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"default_arg_type","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% DEFAULT_ARG_TYPE << type %}\n\n      \n"}},{"id":"left(*symbols)-macro","html_id":"left(*symbols)-macro","name":"left","doc":"This method is used to specify that the symbols in *symbols*\nare left-associative.  Subsequent calls to this method will\ngive their arguments higher precedence.\n\n@param [Array<Symbol>]  symbols  Symbols that are left associative.\n\n@return [void]","summary":"<p>This method is used to specify that the symbols in <em>symbols</em> are left-associative.</p>","abstract":false,"args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(*symbols)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"left","args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        prec(:left, \n{{ symbols.splat }}\n)\n      \n"}},{"id":"list(symbol,list_elements,separator=\"\")-macro","html_id":"list(symbol,list_elements,separator=&quot;&quot;)-macro","name":"list","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"list","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        build_list_production(\n{{ symbol }}\n, \n{{ list_elements }}\n, \n{{ separator }}\n)\n      \n"}},{"id":"nonassoc(*symbols)-macro","html_id":"nonassoc(*symbols)-macro","name":"nonassoc","doc":"This method is used to specify that the symbols in *symbols*\nare non-associative.\n\n@param [Array<Symbol>]  symbols  Symbols that are non-associative.\n\n@return [void]","summary":"<p>This method is used to specify that the symbols in <em>symbols</em> are non-associative.</p>","abstract":false,"args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(*symbols)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"nonassoc","args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        prec(:non, \n{{ symbols.splat }}\n)\n      \n"}},{"id":"nonempty_list(symbol,list_elements,separator=\"\")-macro","html_id":"nonempty_list(symbol,list_elements,separator=&quot;&quot;)-macro","name":"nonempty_list","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"nonempty_list","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        build_nonempty_list_production(\n{{ symbol }}\n, \n{{ list_elements }}\n, \n{{ separator }}\n)\n      \n"}},{"id":"prec(direction,*symbols)-macro","html_id":"prec(direction,*symbols)-macro","name":"prec","doc":null,"summary":null,"abstract":false,"args":[{"name":"direction","doc":null,"default_value":"","external_name":"direction","restriction":""},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(direction, *symbols)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"prec","args":[{"name":"direction","doc":null,"default_value":"","external_name":"direction","restriction":""},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% PREC_COUNT[direction] = PREC_COUNT[direction] + 1\nprec_level = PREC_COUNT[direction]\nsymbols.map do |sym|\n  TOKEN_PRECS[sym.id.stringify] = {direction.id.stringify, prec_level}\nend\n %}\n\n      \n"}},{"id":"production(lhs,expression=nil,precedence=nil,arg_type=nil)-macro","html_id":"production(lhs,expression=nil,precedence=nil,arg_type=nil)-macro","name":"production","doc":"Adds a new production to the parser with a left-hand value of\n*symbol*.  If *expression* is specified it is taken as the\nright-hand side of the production and *action* is associated\nwith the production.  If *expression* is nil then *action* is\nevaluated and expected to make one or more calls to\nParser.clause.  A precedence can be associate with this\nproduction by setting *precedence* to a terminal symbol.\n\n@param [Symbol]\t\t\tsymbol\t\tLeft-hand side of the production.\n@param [String, Symbol, nil]\texpression\tRight-hand side of the production.\n@param [Symbol, nil]\t\tprecedence\tSymbol representing the precedence of this produciton.\n@param [:array, :splat]\t\targ_type\t\tMethod to use when passing arguments to the action.\n@param [Proc]\t\t\taction\t\tAction associated with this production.\n\n@return [void]","summary":"<p>Adds a new production to the parser with a left-hand value of <em>symbol</em>.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"args_string":"(lhs, expression = nil, precedence = nil, arg_type = nil)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"production","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n# Declares a new clause inside of a production.  The right-hand\n\n        \n# side is specified by *expression* and the precedence of this\n\n        \n# production can be changed by setting the *precedence* argument\n\n        \n# to some terminal symbol.\n\n        \n#\n\n        \n# @param [String, Symbol]  expression  Right-hand side of a production.\n\n        \n# @param [Symbol]          precedence  Symbol representing the precedence of this production.\n\n        \n# @param [:array, :splat]  arg_type    Method to use when passing arguments to the action.\n\n        \n# @param [Proc]            action      Action to be taken when the production is reduced.\n\n        \n#\n\n        \n# @return [void]\n\n        macro clause(\nexpression, precedence = \n{{ precedence }}\n, arg_type = \n{{ arg_type }}\n, &action)\n          \n\\{%\n             \narg_type = arg_type ? arg_type : DEFAULT_ARG_TYPE.last\n             \n# select the clauses that are not list production to get the next\n\n             \n# id for the PROCS array holding all the defined callbacks\n\n             next_proc_id = @type.constant(\"CLAUSES\").select\n{|x| x[:expression] }.size\n             CLAUSES << \n{\n              lhs: \n{{ lhs }}\n, \nexpression: \nexpression.id.stringify,\n              precedence: precedence, arg_type: arg_type,\n              cb: next_proc_id\n             }\n             \nexpression_symbol_selections = \nexpression.id.split(\" \").map \n{ |e| \ne=~ /^\\./ ? \ne : nil }\n          %}\n          \n\\{% if\n action.is_a?(Block) %}\n             PROCS << ProdProc.new(\n               \n\\{\n{arg_type}}, \n\\{\n{expression_symbol_selections}}.map_with_index \n{ |e, i| \ne ? i : nil }.compact\n             ) do |lhsymbols, \nenv, arg_type|\n              \nenv.as(Environment).yield_with_self do\n                \n\\{% if\n !action.args.empty?%}\n                  \n\\{% if\n action.args.size == 1 %}\n                    \n\\{% if\n arg_type == :array %}\n                      \n\\{\n{action.args.first}} = lhsymbols.as(Array)\n                    \n\\{% e\nlse %}\n                      \n\\{\n{action.args.splat}} = lhsymbols.as(Array(CLTK::Type))[0]\n                    \n\\{% end\n %}\n                  \n\\{% e\nlse %}\n                      \n\\{\n{action.args.splat}} = lhsymbols.as(Array(CLTK::Type))[0...\n\\{\n{action.args.size}}]\n                  \n\\{% end\n %}\n                  \n# reassign the first block argument to\n\n                  \n# the whole arguments array if arg_type\n\n                  \n# evaluates to :array\n\n                  \n\\{% if\n arg_type.is_a?(NilLiteral) %}\n                    \n\\{\n{action.args.first}} = lhsymbols.as(Array) if arg_type == :array\n                  \n\\{% end\n %}\n                \n\\{% end\n %}\n                result = begin\n                  \n\\{\n{action.body}}\n                \nend\n                result.is_a?(Array) ?\n                  result.map \n{ |r| r.as(CLTK::Type)} :\n                  result.as(CLTK::Type)\n              \nend\n            \nend\n          \n\\{% e\nlse %}\n             PROCS << ProdProc.new\n          \n\\{% end\n %}\n        \nend\n        \n{% if block.is_a?(Block) %}\n           {% if block.args.size > 0 %}\n            clause({{ expression }}, {{ precedence }}, {{ arg_type }}) do |{{ block.args.splat }}|\n              {{ block.body }}\n            end\n          {% else %}\n            {{ block.body }}\n          {% end %}\n        {% else %}\n          clause({{ expression }}, {{ precedence }}, {{ arg_type }})\n        {% end %}\n\n      \n"}},{"id":"right(*symbols)-macro","html_id":"right(*symbols)-macro","name":"right","doc":"This method is used to specify that the symbols in _symbols_\nare right associative.  Subsequent calls to this method will\ngive their arguments higher precedence.\n\n@param [Array<Symbol>] symbols Symbols that are right-associative.\n\n@return [void]","summary":"<p>This method is used to specify that the symbols in <em>symbols</em> are right associative.</p>","abstract":false,"args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(*symbols)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/parser.cr#L11","def":{"name":"right","args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        prec(:right, \n{{ symbols.splat }}\n)\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/ScalarTypeDefinition","path":"GraphQL/Language/ScalarTypeDefinition.html","kind":"class","full_name":"GraphQL::Language::ScalarTypeDefinition","name":"ScalarTypeDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":120,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":326,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:kind, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{directives, Array(Directive)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:directives]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(directives: Array(Directive)))"}}],"constructors":[{"id":"new(directives,**rest)-class-method","html_id":"new(directives,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"args_string":"(directives, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(directives, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::ScalarTypeDefinition)-instance-method","html_id":"==(other:GraphQL::Language::ScalarTypeDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::ScalarTypeDefinition"}],"args_string":"(other : GraphQL::Language::ScalarTypeDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::ScalarTypeDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  (@directives == other.directives) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"kind\"\n  kind_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"kind\"\n    kind_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"kind\"\n      kind_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"kind\"\n        kind_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"kind\"\n          kind_field(arguments, context)\n        else\n          name, arguments, context = name, arguments, context\n          case name\n          when \"__typename\"\n            __typename_field(arguments, context)\n          when \"kind\"\n            kind_field(arguments, context)\n          else\n            name, arguments, context = name, arguments, context\n            case name\n            when \"__typename\"\n              __typename_field(arguments, context)\n            when \"kind\"\n              kind_field(arguments, context)\n            else\n              name, arguments, context = name, arguments, context\n              case name\n              when \"__typename\"\n                __typename_field(arguments, context)\n              when \"kind\"\n                kind_field(arguments, context)\n              else\n                name, arguments, context = name, arguments, context\n                case name\n                when \"__typename\"\n                  __typename_field(arguments, context)\n                when \"kind\"\n                  kind_field(arguments, context)\n                else\n                  super(name, arguments, context)\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(directives: @directives))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_47 = directives\n  if __temp_47.is_a?(Array)\n    __temp_48 = __temp_47.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_47 == nil) || (visited_ids.includes?(__temp_47.object_id))\n    else\n      visited_ids << __temp_47.object_id\n      __temp_48 = __temp_47.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_48)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::ScalarTypeDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/SchemaDefinition","path":"GraphQL/Language/SchemaDefinition.html","kind":"class","full_name":"GraphQL::Language::SchemaDefinition","name":"SchemaDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":62,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{query, String}, {mutation, ::Union(String, ::Nil)}, {subscription, ::Union(String, ::Nil)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(query: String, mutation: ::Union(String, ::Nil), subscription: ::Union(String, ::Nil)))"}}],"constructors":[{"id":"new(query,mutation,subscription,**rest)-class-method","html_id":"new(query,mutation,subscription,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"mutation","doc":null,"default_value":"","external_name":"mutation","restriction":""},{"name":"subscription","doc":null,"default_value":"","external_name":"subscription","restriction":""}],"args_string":"(query, mutation, subscription, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""},{"name":"mutation","doc":null,"default_value":"","external_name":"mutation","restriction":""},{"name":"subscription","doc":null,"default_value":"","external_name":"subscription","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(query, mutation, subscription, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::SchemaDefinition)-instance-method","html_id":"==(other:GraphQL::Language::SchemaDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::SchemaDefinition"}],"args_string":"(other : GraphQL::Language::SchemaDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::SchemaDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  (((@query == other.query) && (@mutation == other.mutation)) && (@subscription == other.subscription)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"mutation:::Union(String,Nil)-instance-method","html_id":"mutation:::Union(String,Nil)-instance-method","name":"mutation","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Union(String, Nil)","source_link":null,"source_link":null,"def":{"name":"mutation","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Union(String, ::Nil)","visibility":"Public","body":"@mutation"}},{"id":"mutation=(mutation:::Union(String,Nil))-instance-method","html_id":"mutation=(mutation:::Union(String,Nil))-instance-method","name":"mutation=","doc":null,"summary":null,"abstract":false,"args":[{"name":"mutation","doc":null,"default_value":"","external_name":"mutation","restriction":"::Union(String, ::Nil)"}],"args_string":"(mutation : ::Union(String, Nil))","source_link":null,"source_link":null,"def":{"name":"mutation=","args":[{"name":"mutation","doc":null,"default_value":"","external_name":"mutation","restriction":"::Union(String, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mutation = mutation"}},{"id":"query:String-instance-method","html_id":"query:String-instance-method","name":"query","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"source_link":null,"def":{"name":"query","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@query"}},{"id":"query=(query:String)-instance-method","html_id":"query=(query:String)-instance-method","name":"query=","doc":null,"summary":null,"abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"String"}],"args_string":"(query : String)","source_link":null,"source_link":null,"def":{"name":"query=","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@query = query"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"subscription:::Union(String,Nil)-instance-method","html_id":"subscription:::Union(String,Nil)-instance-method","name":"subscription","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Union(String, Nil)","source_link":null,"source_link":null,"def":{"name":"subscription","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Union(String, ::Nil)","visibility":"Public","body":"@subscription"}},{"id":"subscription=(subscription:::Union(String,Nil))-instance-method","html_id":"subscription=(subscription:::Union(String,Nil))-instance-method","name":"subscription=","doc":null,"summary":null,"abstract":false,"args":[{"name":"subscription","doc":null,"default_value":"","external_name":"subscription","restriction":"::Union(String, ::Nil)"}],"args_string":"(subscription : ::Union(String, Nil))","source_link":null,"source_link":null,"def":{"name":"subscription=","args":[{"name":"subscription","doc":null,"default_value":"","external_name":"subscription","restriction":"::Union(String, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@subscription = subscription"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(query: @query, mutation: @mutation, subscription: @subscription))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::SchemaDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/Selection","path":"GraphQL/Language/Selection.html","kind":"alias","full_name":"GraphQL::Language::Selection","name":"Selection","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":97,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":true,"aliased":"GraphQL::Language::AbstractNode+","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/Type","path":"GraphQL/Language/Type.html","kind":"alias","full_name":"GraphQL::Language::Type","name":"Type","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":96,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":true,"aliased":"GraphQL::Language::AbstractNode+","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","path":"GraphQL/Language/TypeDefinition.html","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":116,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":256,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:kind, \"\", nil, \"\"}, {:name, \"\", nil, \"\"}, {:description, \"\", nil, \"\"}, {:inputFields, \"\", nil, \"\"}, {:fields, \"\", nil, \"\"}, {:interfaces, \"\", nil, \"\"}, {:possibleTypes, \"\", nil, \"\"}, {:enumValues, \"\", nil, \"\"}, {:ofType, \"\", nil, \"\"}, {:isDeprecated, \"\", nil, \"\"}, {:deprecationReason, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{name, String}, {description, ::Union(String, ::Nil)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/EnumTypeDefinition","kind":"class","full_name":"GraphQL::Language::EnumTypeDefinition","name":"EnumTypeDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/InputObjectTypeDefinition","kind":"class","full_name":"GraphQL::Language::InputObjectTypeDefinition","name":"InputObjectTypeDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/InterfaceTypeDefinition","kind":"class","full_name":"GraphQL::Language::InterfaceTypeDefinition","name":"InterfaceTypeDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/ObjectTypeDefinition","kind":"class","full_name":"GraphQL::Language::ObjectTypeDefinition","name":"ObjectTypeDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/ScalarTypeDefinition","kind":"class","full_name":"GraphQL::Language::ScalarTypeDefinition","name":"ScalarTypeDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/UnionTypeDefinition","kind":"class","full_name":"GraphQL::Language::UnionTypeDefinition","name":"UnionTypeDefinition"}],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: String, description: ::Union(String, ::Nil)))"}}],"constructors":[{"id":"new(name,description,**rest)-class-method","html_id":"new(name,description,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""}],"args_string":"(name, description, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, description, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::TypeDefinition)-instance-method","html_id":"==(other:GraphQL::Language::TypeDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::TypeDefinition"}],"args_string":"(other : GraphQL::Language::TypeDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::TypeDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  ((@name == other.name) && (@description == other.description)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"description:::Union(String,Nil)-instance-method","html_id":"description:::Union(String,Nil)-instance-method","name":"description","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Union(String, Nil)","source_link":null,"source_link":null,"def":{"name":"description","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Union(String, ::Nil)","visibility":"Public","body":"@description"}},{"id":"description=(description:::Union(String,Nil))-instance-method","html_id":"description=(description:::Union(String,Nil))-instance-method","name":"description=","doc":null,"summary":null,"abstract":false,"args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"::Union(String, ::Nil)"}],"args_string":"(description : ::Union(String, Nil))","source_link":null,"source_link":null,"def":{"name":"description=","args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"::Union(String, ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@description = description"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"name=(name:String)-instance-method","html_id":"name=(name:String)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":null,"source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"kind\"\n  kind_field(arguments, context)\nwhen \"name\"\n  name_field(arguments, context)\nwhen \"description\"\n  description_field(arguments, context)\nwhen \"inputFields\"\n  inputFields_field(arguments, context)\nwhen \"fields\"\n  fields_field(arguments, context)\nwhen \"interfaces\"\n  interfaces_field(arguments, context)\nwhen \"possibleTypes\"\n  possibleTypes_field(arguments, context)\nwhen \"enumValues\"\n  enumValues_field(arguments, context)\nwhen \"ofType\"\n  ofType_field(arguments, context)\nwhen \"isDeprecated\"\n  isDeprecated_field(arguments, context)\nwhen \"deprecationReason\"\n  deprecationReason_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"kind\"\n    kind_field(arguments, context)\n  when \"name\"\n    name_field(arguments, context)\n  when \"description\"\n    description_field(arguments, context)\n  when \"inputFields\"\n    inputFields_field(arguments, context)\n  when \"fields\"\n    fields_field(arguments, context)\n  when \"interfaces\"\n    interfaces_field(arguments, context)\n  when \"possibleTypes\"\n    possibleTypes_field(arguments, context)\n  when \"enumValues\"\n    enumValues_field(arguments, context)\n  when \"ofType\"\n    ofType_field(arguments, context)\n  when \"isDeprecated\"\n    isDeprecated_field(arguments, context)\n  when \"deprecationReason\"\n    deprecationReason_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"kind\"\n      kind_field(arguments, context)\n    when \"name\"\n      name_field(arguments, context)\n    when \"description\"\n      description_field(arguments, context)\n    when \"inputFields\"\n      inputFields_field(arguments, context)\n    when \"fields\"\n      fields_field(arguments, context)\n    when \"interfaces\"\n      interfaces_field(arguments, context)\n    when \"possibleTypes\"\n      possibleTypes_field(arguments, context)\n    when \"enumValues\"\n      enumValues_field(arguments, context)\n    when \"ofType\"\n      ofType_field(arguments, context)\n    when \"isDeprecated\"\n      isDeprecated_field(arguments, context)\n    when \"deprecationReason\"\n      deprecationReason_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"kind\"\n        kind_field(arguments, context)\n      when \"name\"\n        name_field(arguments, context)\n      when \"description\"\n        description_field(arguments, context)\n      when \"inputFields\"\n        inputFields_field(arguments, context)\n      when \"fields\"\n        fields_field(arguments, context)\n      when \"interfaces\"\n        interfaces_field(arguments, context)\n      when \"possibleTypes\"\n        possibleTypes_field(arguments, context)\n      when \"enumValues\"\n        enumValues_field(arguments, context)\n      when \"ofType\"\n        ofType_field(arguments, context)\n      when \"isDeprecated\"\n        isDeprecated_field(arguments, context)\n      when \"deprecationReason\"\n        deprecationReason_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"kind\"\n          kind_field(arguments, context)\n        when \"name\"\n          name_field(arguments, context)\n        when \"description\"\n          description_field(arguments, context)\n        when \"inputFields\"\n          inputFields_field(arguments, context)\n        when \"fields\"\n          fields_field(arguments, context)\n        when \"interfaces\"\n          interfaces_field(arguments, context)\n        when \"possibleTypes\"\n          possibleTypes_field(arguments, context)\n        when \"enumValues\"\n          enumValues_field(arguments, context)\n        when \"ofType\"\n          ofType_field(arguments, context)\n        when \"isDeprecated\"\n          isDeprecated_field(arguments, context)\n        when \"deprecationReason\"\n          deprecationReason_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: @name, description: @description))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::TypeDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeName","path":"GraphQL/Language/TypeName.html","kind":"class","full_name":"GraphQL::Language::TypeName","name":"TypeName","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NameOnlyNode","kind":"class","full_name":"GraphQL::Language::NameOnlyNode","name":"NameOnlyNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NameOnlyNode","kind":"class","full_name":"GraphQL::Language::NameOnlyNode","name":"NameOnlyNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":156,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[] of Tuple(Symbol, Object.class)","doc":"A type name, used for variable definitions","summary":"<p>A type name, used for variable definitions</p>"},{"name":"VISITS","value":"[] of Tuple(Symbol, Array(Symbol))","doc":"A type name, used for variable definitions","summary":"<p>A type name, used for variable definitions</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"A type name, used for variable definitions","summary":"<p>A type name, used for variable definitions</p>","class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"new","args":[],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::TypeName)-instance-method","html_id":"==(other:GraphQL::Language::TypeName)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::TypeName"}],"args_string":"(other : GraphQL::Language::TypeName)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::TypeName"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  super(other)\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          name, arguments, context = name, arguments, context\n          case name\n          when \"__typename\"\n            __typename_field(arguments, context)\n          else\n            name, arguments, context = name, arguments, context\n            case name\n            when \"__typename\"\n              __typename_field(arguments, context)\n            else\n              name, arguments, context = name, arguments, context\n              case name\n              when \"__typename\"\n                __typename_field(arguments, context)\n              else\n                name, arguments, context = name, arguments, context\n                case name\n                when \"__typename\"\n                  __typename_field(arguments, context)\n                else\n                  super(name, arguments, context)\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::TypeName\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/UnionTypeDefinition","path":"GraphQL/Language/UnionTypeDefinition.html","kind":"class","full_name":"GraphQL::Language::UnionTypeDefinition","name":"UnionTypeDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/TypeDefinition","kind":"class","full_name":"GraphQL::Language::TypeDefinition","name":"TypeDefinition"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":236,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":293,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:kind, \"\", nil, \"\"}, {:possibleTypes, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{types, Array(TypeName)}, {directives, Array(Directive)}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:types, :directives]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(types: Array(TypeName), directives: Array(Directive)))"}}],"constructors":[{"id":"new(types,directives,**rest)-class-method","html_id":"new(types,directives,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"types","doc":null,"default_value":"","external_name":"types","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"args_string":"(types, directives, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"types","doc":null,"default_value":"","external_name":"types","restriction":""},{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(types, directives, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::UnionTypeDefinition)-instance-method","html_id":"==(other:GraphQL::Language::UnionTypeDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::UnionTypeDefinition"}],"args_string":"(other : GraphQL::Language::UnionTypeDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::UnionTypeDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  ((@types == other.types) && (@directives == other.directives)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"directives:Array(Directive)-instance-method","html_id":"directives:Array(Directive)-instance-method","name":"directives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Directive)","source_link":null,"source_link":null,"def":{"name":"directives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Directive)","visibility":"Public","body":"@directives"}},{"id":"directives=(directives:Array(Directive))-instance-method","html_id":"directives=(directives:Array(Directive))-instance-method","name":"directives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"args_string":"(directives : Array(Directive))","source_link":null,"source_link":null,"def":{"name":"directives=","args":[{"name":"directives","doc":null,"default_value":"","external_name":"directives","restriction":"Array(Directive)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directives = directives"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"kind\"\n  kind_field(arguments, context)\nwhen \"possibleTypes\"\n  possibleTypes_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"kind\"\n    kind_field(arguments, context)\n  when \"possibleTypes\"\n    possibleTypes_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"kind\"\n      kind_field(arguments, context)\n    when \"possibleTypes\"\n      possibleTypes_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"kind\"\n        kind_field(arguments, context)\n      when \"possibleTypes\"\n        possibleTypes_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"kind\"\n          kind_field(arguments, context)\n        when \"possibleTypes\"\n          possibleTypes_field(arguments, context)\n        else\n          name, arguments, context = name, arguments, context\n          case name\n          when \"__typename\"\n            __typename_field(arguments, context)\n          when \"kind\"\n            kind_field(arguments, context)\n          when \"possibleTypes\"\n            possibleTypes_field(arguments, context)\n          else\n            name, arguments, context = name, arguments, context\n            case name\n            when \"__typename\"\n              __typename_field(arguments, context)\n            when \"kind\"\n              kind_field(arguments, context)\n            when \"possibleTypes\"\n              possibleTypes_field(arguments, context)\n            else\n              name, arguments, context = name, arguments, context\n              case name\n              when \"__typename\"\n                __typename_field(arguments, context)\n              when \"kind\"\n                kind_field(arguments, context)\n              when \"possibleTypes\"\n                possibleTypes_field(arguments, context)\n              else\n                name, arguments, context = name, arguments, context\n                case name\n                when \"__typename\"\n                  __typename_field(arguments, context)\n                when \"kind\"\n                  kind_field(arguments, context)\n                when \"possibleTypes\"\n                  possibleTypes_field(arguments, context)\n                else\n                  super(name, arguments, context)\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"}},{"id":"types:Array(TypeName)-instance-method","html_id":"types:Array(TypeName)-instance-method","name":"types","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(TypeName)","source_link":null,"source_link":null,"def":{"name":"types","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(TypeName)","visibility":"Public","body":"@types"}},{"id":"types=(types:Array(TypeName))-instance-method","html_id":"types=(types:Array(TypeName))-instance-method","name":"types=","doc":null,"summary":null,"abstract":false,"args":[{"name":"types","doc":null,"default_value":"","external_name":"types","restriction":"Array(TypeName)"}],"args_string":"(types : Array(TypeName))","source_link":null,"source_link":null,"def":{"name":"types=","args":[{"name":"types","doc":null,"default_value":"","external_name":"types","restriction":"Array(TypeName)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@types = types"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(types: @types, directives: @directives))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_81 = types\n  if __temp_81.is_a?(Array)\n    __temp_82 = __temp_81.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_81 == nil) || (visited_ids.includes?(__temp_81.object_id))\n    else\n      visited_ids << __temp_81.object_id\n      __temp_82 = __temp_81.not_nil!.visit(name, visited_ids, block)\n      self.types = (      __temp_82)\n    end\n  end\n  __temp_81 = directives\n  if __temp_81.is_a?(Array)\n    __temp_82 = __temp_81.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_81 == nil) || (visited_ids.includes?(__temp_81.object_id))\n    else\n      visited_ids << __temp_81.object_id\n      __temp_82 = __temp_81.not_nil!.visit(name, visited_ids, block)\n      self.directives = (      __temp_82)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::UnionTypeDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/VariableDefinition","path":"GraphQL/Language/VariableDefinition.html","kind":"class","full_name":"GraphQL::Language::VariableDefinition","name":"VariableDefinition","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":99,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{name, String}, {type, Type}, {default_value, FValue}] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[{:children, [:type]}] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: String, type: Type, default_value: FValue))"}}],"constructors":[{"id":"new(name,type,default_value,**rest)-class-method","html_id":"new(name,type,default_value,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default_value","doc":null,"default_value":"","external_name":"default_value","restriction":""}],"args_string":"(name, type, default_value, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default_value","doc":null,"default_value":"","external_name":"default_value","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, type, default_value, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::VariableDefinition)-instance-method","html_id":"==(other:GraphQL::Language::VariableDefinition)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::VariableDefinition"}],"args_string":"(other : GraphQL::Language::VariableDefinition)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::VariableDefinition"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  (((@name == other.name) && (@type == other.type)) && (@default_value == other.default_value)) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"default_value:FValue-instance-method","html_id":"default_value:FValue-instance-method","name":"default_value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : FValue","source_link":null,"source_link":null,"def":{"name":"default_value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"FValue","visibility":"Public","body":"@default_value"}},{"id":"default_value=(default_value:FValue)-instance-method","html_id":"default_value=(default_value:FValue)-instance-method","name":"default_value=","doc":null,"summary":null,"abstract":false,"args":[{"name":"default_value","doc":null,"default_value":"","external_name":"default_value","restriction":"FValue"}],"args_string":"(default_value : FValue)","source_link":null,"source_link":null,"def":{"name":"default_value=","args":[{"name":"default_value","doc":null,"default_value":"","external_name":"default_value","restriction":"FValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@default_value = default_value"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"name=(name:String)-instance-method","html_id":"name=(name:String)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":null,"source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"type:Type-instance-method","html_id":"type:Type-instance-method","name":"type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Type","source_link":null,"source_link":null,"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type","visibility":"Public","body":"@type"}},{"id":"type=(type:Type)-instance-method","html_id":"type=(type:Type)-instance-method","name":"type=","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"}],"args_string":"(type : Type)","source_link":null,"source_link":null,"def":{"name":"type=","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@type = type"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(name: @name, type: @type, default_value: @default_value))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_41 = type\n  if __temp_41.is_a?(Array)\n    __temp_42 = __temp_41.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_41 == nil) || (visited_ids.includes?(__temp_41.object_id))\n    else\n      visited_ids << __temp_41.object_id\n      __temp_42 = __temp_41.not_nil!.visit(name, visited_ids, block)\n      self.type = (      __temp_42)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::VariableDefinition\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/VariableIdentifier","path":"GraphQL/Language/VariableIdentifier.html","kind":"class","full_name":"GraphQL::Language::VariableIdentifier","name":"VariableIdentifier","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NameOnlyNode","kind":"class","full_name":"GraphQL::Language::NameOnlyNode","name":"NameOnlyNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NameOnlyNode","kind":"class","full_name":"GraphQL::Language::NameOnlyNode","name":"NameOnlyNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":201,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"name":"VISITS","value":"[] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"new","args":[],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::VariableIdentifier)-instance-method","html_id":"==(other:GraphQL::Language::VariableIdentifier)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::VariableIdentifier"}],"args_string":"(other : GraphQL::Language::VariableIdentifier)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::VariableIdentifier"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  super(other)\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        else\n          name, arguments, context = name, arguments, context\n          case name\n          when \"__typename\"\n            __typename_field(arguments, context)\n          else\n            name, arguments, context = name, arguments, context\n            case name\n            when \"__typename\"\n              __typename_field(arguments, context)\n            else\n              name, arguments, context = name, arguments, context\n              case name\n              when \"__typename\"\n                __typename_field(arguments, context)\n              else\n                name, arguments, context = name, arguments, context\n                case name\n                when \"__typename\"\n                  __typename_field(arguments, context)\n                else\n                  super(name, arguments, context)\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::VariableIdentifier\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/WrapperType","path":"GraphQL/Language/WrapperType.html","kind":"class","full_name":"GraphQL::Language::WrapperType","name":"WrapperType","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/CLTK/ASTNode","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/language/nodes.cr","line_number":150,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/language/nodes.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":313,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:name, \"\", nil, \"\"}, {:ofType, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"VALUES","value":"[{of_type, (Type)}] of Tuple(Symbol, Object.class)","doc":"Base class for non-null type names and list type names","summary":"<p>Base class for non-null type names and list type names</p>"},{"name":"VISITS","value":"[{:children, [:of_type]}] of Tuple(Symbol, Array(Symbol))","doc":"Base class for non-null type names and list type names","summary":"<p>Base class for non-null type names and list type names</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/ListType","kind":"class","full_name":"GraphQL::Language::ListType","name":"ListType"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/NonNullType","kind":"class","full_name":"GraphQL::Language::NonNullType","name":"NonNullType"}],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language","kind":"module","full_name":"GraphQL::Language","name":"Language"},"doc":"Base class for non-null type names and list type names","summary":"<p>Base class for non-null type names and list type names</p>","class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(of_type: (Type)))"}}],"constructors":[{"id":"new(of_type,**rest)-class-method","html_id":"new(of_type,**rest)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"of_type","doc":null,"default_value":"","external_name":"of_type","restriction":""}],"args_string":"(of_type, **rest)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"of_type","doc":null,"default_value":"","external_name":"of_type","restriction":""}],"double_splat":{"name":"rest","doc":null,"default_value":"","external_name":"rest","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(of_type, **rest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:GraphQL::Language::WrapperType)-instance-method","html_id":"==(other:GraphQL::Language::WrapperType)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::WrapperType"}],"args_string":"(other : GraphQL::Language::WrapperType)","source_link":null,"source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"GraphQL::Language::WrapperType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.object_id == other.object_id\n  true\nelse\n  (@of_type == other.of_type) && (super(other))\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"map_children(&block:CLTK::ASTNode->_)-instance-method","html_id":"map_children(&amp;block:CLTK::ASTNode-&gt;_)-instance-method","name":"map_children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : CLTK::ASTNode -> _)","source_link":null,"source_link":null,"def":{"name":"map_children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(CLTK::ASTNode -> _)"},"return_type":"","visibility":"Public","body":"visited_ids = [] of UInt64\nvisit(:children, visited_ids, block)\n"}},{"id":"of_type:Type-instance-method","html_id":"of_type:Type-instance-method","name":"of_type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Type","source_link":null,"source_link":null,"def":{"name":"of_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type","visibility":"Public","body":"@of_type"}},{"id":"of_type=(of_type:Type)-instance-method","html_id":"of_type=(of_type:Type)-instance-method","name":"of_type=","doc":null,"summary":null,"abstract":false,"args":[{"name":"of_type","doc":null,"default_value":"","external_name":"of_type","restriction":"Type"}],"args_string":"(of_type : Type)","source_link":null,"source_link":null,"def":{"name":"of_type=","args":[{"name":"of_type","doc":null,"default_value":"","external_name":"of_type","restriction":"Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@of_type = of_type"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"name\"\n  name_field(arguments, context)\nwhen \"ofType\"\n  ofType_field(arguments, context)\nelse\n  name, arguments, context = name, arguments, context\n  case name\n  when \"__typename\"\n    __typename_field(arguments, context)\n  when \"name\"\n    name_field(arguments, context)\n  when \"ofType\"\n    ofType_field(arguments, context)\n  else\n    name, arguments, context = name, arguments, context\n    case name\n    when \"__typename\"\n      __typename_field(arguments, context)\n    when \"name\"\n      name_field(arguments, context)\n    when \"ofType\"\n      ofType_field(arguments, context)\n    else\n      name, arguments, context = name, arguments, context\n      case name\n      when \"__typename\"\n        __typename_field(arguments, context)\n      when \"name\"\n        name_field(arguments, context)\n      when \"ofType\"\n        ofType_field(arguments, context)\n      else\n        name, arguments, context = name, arguments, context\n        case name\n        when \"__typename\"\n          __typename_field(arguments, context)\n        when \"name\"\n          name_field(arguments, context)\n        when \"ofType\"\n          ofType_field(arguments, context)\n        else\n          super(name, arguments, context)\n        end\n      end\n    end\n  end\nend"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().merge(NamedTuple.new(of_type: @of_type))"}},{"id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","html_id":"visit(name,visited_ids=[]ofUInt64,block=Proc(CLTK::ASTNode,CLTK::ASTNode|::Nil).newdo\nend)-instance-method","name":"visit","doc":"Recursively apply the given block to each\nnode that gets visited with the given key\nwhich nodes get traverses for a given key\ncan be set on a class via the:\n`traverse :name, :child_1, :child2`\nmacro. If no children are defined for a\ngiven traversal path name the block is invoked\nonly with self.","summary":"<p>Recursively apply the given block to each node that gets visited with the given key which nodes get traverses for a given key can be set on a class via the: <code>traverse :name, :child_1, :child2</code> macro.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"args_string":"(name, visited_ids = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">UInt64</span>, block = <span class=\"t\">Proc</span>(<span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span>, <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">ASTNode</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">new</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>)","source_link":null,"source_link":null,"def":{"name":"visit","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"visited_ids","doc":null,"default_value":"[] of UInt64","external_name":"visited_ids","restriction":""},{"name":"block","doc":null,"default_value":"Proc(CLTK::ASTNode, CLTK::ASTNode | ::Nil).new do\nend","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen :children\n  __temp_57 = of_type\n  if __temp_57.is_a?(Array)\n    __temp_58 = __temp_57.map! do |v|\n      if visited_ids.includes?(v.object_id)\n        next v\n      end\n      visited_ids << v.object_id\n      res = v.visit(name, visited_ids, block)\n      res.is_a?(CLTK::ASTNode) ? res : v\n    end\n  else\n    if (__temp_57 == nil) || (visited_ids.includes?(__temp_57.object_id))\n    else\n      visited_ids << __temp_57.object_id\n      __temp_58 = __temp_57.not_nil!.visit(name, visited_ids, block)\n      self.of_type = (      __temp_58)\n    end\n  end\nend\nres = block.call(self)\nres.is_a?(self) ? res : self\n"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":null,"def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Language::WrapperType\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":null,"def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << ({name, [] of Symbol})\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":null,"def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << ({k, args[k]})\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]}]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","path":"GraphQL/ObjectType.html","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/types/object_type.cr","line_number":128,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/object_type.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Language/AbstractNode","kind":"class","full_name":"GraphQL::Language::AbstractNode","name":"AbstractNode"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Introspection/IntrospectionObject","kind":"class","full_name":"GraphQL::Schema::Introspection::IntrospectionObject","name":"IntrospectionObject"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Schema","kind":"class","full_name":"GraphQL::Schema::Schema","name":"Schema"}],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL","kind":"module","full_name":"GraphQL","name":"GraphQL"},"doc":"\nmodule to be included or extended by Classes and Modules\nto make them act as GraphQL Objects. Provides the\n`field` Macro for defining GraphQL Type Fields.\n\n```crystal\nclass MyType\n  getter :name\n  def initialize(@name : String, @email : String); end\n\n  includes GraphQL::ObjectType\n  field :name  # with no further arguments\n               # the field will resolve to\n               # the getter method of the\n               # same name\n\n  field :email { @email } # a block can be provided\n                          # to access instance vars\n\n  # a block will be called with an arguments hash\n  # and the context of the graphql request\n  field :signature do |args, context|\n    \"#{@name} - #{args['with_email']? ? @email : \"\"}\"\n  end\n\nend\n```\n","summary":"<p>module to be included or extended by Classes and Modules to make them act as GraphQL Objects.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"graphql_type-instance-method","html_id":"graphql_type-instance-method","name":"graphql_type","doc":"\nget the GraphQL name of this object.\ndefaults to the class name\n","summary":"<p>get the GraphQL name of this object.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/object_type.cr#L133","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/object_type.cr#L133","def":{"name":"graphql_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{{ (@type.name.gsub(/^(.*::)/, \"\")).stringify }}"}},{"id":"resolve_field(name,arguments,context)-instance-method","html_id":"resolve_field(name,arguments,context)-instance-method","name":"resolve_field","doc":"\nThis method gets called when a field is resolved\non this object. The method gets automatically created\nfor every ObjectType\n","summary":"<p>This method gets called when a field is resolved on this object.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(name, arguments, context)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/object_type.cr#L168","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/object_type.cr#L168","def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"pp(\"field not defined\", name, self.class)\nraise(\"field #{name} is not defined for #{self.class.name}\")\n"}}],"macros":[{"id":"graphql_type(name)-macro","html_id":"graphql_type(name)-macro","name":"graphql_type","doc":"\nsetter\ncan be used to set GraphQL name of the\nObject. Defaults to the class name. Is\nused in introspection queries\n","summary":"<p>setter can be used to set GraphQL name of the Object.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/object_type.cr#L143","def":{"name":"graphql_type","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      def graphql_type\n        \n{{ name }}\n\n      \nend\n    \n"}},{"id":"graphql_type-macro","html_id":"graphql_type-macro","name":"graphql_type","doc":"\nsetter that takes a block.\ncan be used to set GraphQL name of the\nObject. Defaults to the class name. Is\nused in introspection queries.\n","summary":"<p>setter that takes a block.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/object_type.cr#L155","def":{"name":"graphql_type","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"      \n{% if block.is_a?(Block) %}\n        def graphql_type\n          {{ block.body }}\n        end\n      {% end %}\n\n    \n"}}],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema","path":"GraphQL/Schema.html","kind":"module","full_name":"GraphQL::Schema","name":"Schema","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/schema/middleware.cr","line_number":2,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/middleware.cr"},{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":2,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"},{"filename":"graphql-crystal/schema/schema.cr","line_number":4,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr"},{"filename":"graphql-crystal/schema/fragment_resolver.cr","line_number":2,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/fragment_resolver.cr"},{"filename":"graphql-crystal/schema/introspection_query.cr","line_number":5,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/introspection_query.cr"},{"filename":"graphql-crystal/schema/schema_execute.cr","line_number":3,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr"},{"filename":"graphql-crystal/schema/variable_resolver.cr","line_number":2,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr"},{"filename":"graphql-crystal/schema.cr","line_number":15,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"INTROSPECTION_QUERY","value":"\"  query IntrospectionQuery {\\n    __schema {\\n      queryType { name }\\n      mutationType { name }\\n      subscriptionType { name }\\n      types {\\n        ...FullType\\n      }\\n      directives {\\n        name\\n        description\\n        locations\\n        args {\\n          ...InputValue\\n        }\\n      }\\n    }\\n  }\\n  fragment FullType on __Type {\\n    kind\\n    name\\n    description\\n    fields(includeDeprecated: true) {\\n      name\\n      description\\n      args {\\n        ...InputValue\\n      }\\n      type {\\n        ...TypeRef\\n      }\\n      isDeprecated\\n      deprecationReason\\n    }\\n    inputFields {\\n      ...InputValue\\n    }\\n    interfaces {\\n      ...TypeRef\\n    }\\n    enumValues(includeDeprecated: true) {\\n      name\\n      description\\n      isDeprecated\\n      deprecationReason\\n    }\\n    possibleTypes {\\n      ...TypeRef\\n    }\\n  }\\n  fragment InputValue on __InputValue {\\n    name\\n    description\\n    type { ...TypeRef }\\n    defaultValue\\n  }\\n  fragment TypeRef on __Type {\\n    kind\\n    name\\n    ofType {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n                ofType {\\n                  kind\\n                  name\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL","kind":"module","full_name":"GraphQL","name":"GraphQL"},"doc":null,"summary":null,"class_methods":[{"id":"from_schema(schema_string)-class-method","html_id":"from_schema(schema_string)-class-method","name":"from_schema","doc":"Instantiate the `Schema` class from a\nString that represents a graphql-schema in\nthe graphql schema definition language","summary":"<p>Instantiate the <code><a href=\"../GraphQL/Schema/Schema.html\">Schema</a></code> class from a String that represents a graphql-schema in the graphql schema definition language</p>","abstract":false,"args":[{"name":"schema_string","doc":null,"default_value":"","external_name":"schema_string","restriction":""}],"args_string":"(schema_string)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr#L19","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr#L19","def":{"name":"from_schema","args":[{"name":"schema_string","doc":null,"default_value":"","external_name":"schema_string","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Schema.new(GraphQL::Language.parse(schema_string))"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/AlibiType","path":"GraphQL/Schema/AlibiType.html","kind":"struct","full_name":"GraphQL::Schema::AlibiType","name":"AlibiType","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/InputType","kind":"struct","full_name":"GraphQL::Schema::InputType","name":"InputType"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/InputType","kind":"struct","full_name":"GraphQL::Schema::InputType","name":"InputType"},{"html_id":"github.com/ziprandom/graphql-crystal/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/ziprandom/graphql-crystal/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/schema.cr","line_number":33,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema","kind":"module","full_name":"GraphQL::Schema","name":"Schema"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(__temp_239:JSON::PullParser)-class-method","html_id":"new(__temp_239:JSON::PullParser)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"__temp_239","doc":null,"default_value":"","external_name":"__temp_239","restriction":"::JSON::PullParser"}],"args_string":"(__temp_239 : JSON::PullParser)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr#L34","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr#L34","def":{"name":"new","args":[{"name":"__temp_239","doc":null,"default_value":"","external_name":"__temp_239","restriction":"::JSON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(__temp_239)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nclone\n"}},{"id":"some:Bool-instance-method","html_id":"some:Bool-instance-method","name":"some","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr#L34","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr#L34","def":{"name":"some","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@some"}},{"id":"some=(_some:Bool)-instance-method","html_id":"some=(_some:Bool)-instance-method","name":"some=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_some","doc":null,"default_value":"","external_name":"_some","restriction":"Bool"}],"args_string":"(_some : Bool)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr#L34","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr#L34","def":{"name":"some=","args":[{"name":"_some","doc":null,"default_value":"","external_name":"_some","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@some = _some"}},{"id":"to_json(json:JSON::Builder)-instance-method","html_id":"to_json(json:JSON::Builder)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"::JSON::Builder"}],"args_string":"(json : JSON::Builder)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr#L34","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr#L34","def":{"name":"to_json","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"::JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"json.object do\n  _some = @some\n  if _some.nil?\n  else\n    json.field(\"some\") do\n      _some.to_json(json)\n    end\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Context","path":"GraphQL/Schema/Context.html","kind":"class","full_name":"GraphQL::Schema::Context","name":"Context","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/schema/schema.cr","line_number":10,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema","kind":"module","full_name":"GraphQL::Schema","name":"Schema"},"doc":"\nThe Context that will be created when `Schema::execute` is called\nand provided as an argument to the field resolution callbacks on\nObject Types. Can be subclassed and passed manually to `Schema::execute`.\n","summary":"<p>The Context that will be created when <code><a href=\"../../GraphQL/Schema/Schema.html\">Schema</a>::execute</code> is called and provided as an argument to the field resolution callbacks on Object Types.</p>","class_methods":[],"constructors":[{"id":"new(schema:GraphQL::Schema::Schema,max_depth=nil)-class-method","html_id":"new(schema:GraphQL::Schema::Schema,max_depth=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":"GraphQL::Schema::Schema"},{"name":"max_depth","doc":null,"default_value":"nil","external_name":"max_depth","restriction":""}],"args_string":"(schema : GraphQL::Schema::Schema, max_depth = <span class=\"n\">nil</span>)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L17","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L17","def":{"name":"new","args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":"GraphQL::Schema::Schema"},{"name":"max_depth","doc":null,"default_value":"nil","external_name":"max_depth","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(schema, max_depth)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"depth:Int32-instance-method","html_id":"depth:Int32-instance-method","name":"depth","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L15","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L15","def":{"name":"depth","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@depth"}},{"id":"depth=(depth)-instance-method","html_id":"depth=(depth)-instance-method","name":"depth=","doc":null,"summary":null,"abstract":false,"args":[{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"args_string":"(depth)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L15","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L15","def":{"name":"depth=","args":[{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@depth = depth"}},{"id":"fragments:Array(GraphQL::Language::FragmentDefinition)-instance-method","html_id":"fragments:Array(GraphQL::Language::FragmentDefinition)-instance-method","name":"fragments","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(GraphQL::Language::FragmentDefinition)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L15","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L15","def":{"name":"fragments","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@fragments"}},{"id":"fragments=(fragments)-instance-method","html_id":"fragments=(fragments)-instance-method","name":"fragments=","doc":null,"summary":null,"abstract":false,"args":[{"name":"fragments","doc":null,"default_value":"","external_name":"fragments","restriction":""}],"args_string":"(fragments)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L15","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L15","def":{"name":"fragments=","args":[{"name":"fragments","doc":null,"default_value":"","external_name":"fragments","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@fragments = fragments"}},{"id":"max_depth:Int32?-instance-method","html_id":"max_depth:Int32?-instance-method","name":"max_depth","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L15","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L15","def":{"name":"max_depth","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_depth"}},{"id":"max_depth=(max_depth)-instance-method","html_id":"max_depth=(max_depth)-instance-method","name":"max_depth=","doc":null,"summary":null,"abstract":false,"args":[{"name":"max_depth","doc":null,"default_value":"","external_name":"max_depth","restriction":""}],"args_string":"(max_depth)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L15","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L15","def":{"name":"max_depth=","args":[{"name":"max_depth","doc":null,"default_value":"","external_name":"max_depth","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_depth = max_depth"}},{"id":"schema:GraphQL::Schema::Schema-instance-method","html_id":"schema:GraphQL::Schema::Schema-instance-method","name":"schema","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : GraphQL::Schema::Schema","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L11","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L11","def":{"name":"schema","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@schema"}},{"id":"with_self(args,&block)-instance-method","html_id":"with_self(args,&amp;block)-instance-method","name":"with_self","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args, &block)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L19","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L19","def":{"name":"with_self","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"yield args, self"}}],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/FragmentResolver","path":"GraphQL/Schema/FragmentResolver.html","kind":"module","full_name":"GraphQL::Schema::FragmentResolver","name":"FragmentResolver","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/schema/fragment_resolver.cr","line_number":3,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/fragment_resolver.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema","kind":"module","full_name":"GraphQL::Schema","name":"Schema"},"doc":null,"summary":null,"class_methods":[{"id":"resolve(value,fragments)-class-method","html_id":"resolve(value,fragments)-class-method","name":"resolve","doc":"replace named fragments with their concrete selections before\nthe query is resolved","summary":"<p>replace named fragments with their concrete selections before the query is resolved</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"fragments","doc":null,"default_value":"","external_name":"fragments","restriction":""}],"args_string":"(value, fragments)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/fragment_resolver.cr#L6","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/fragment_resolver.cr#L6","def":{"name":"resolve","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"fragments","doc":null,"default_value":"","external_name":"fragments","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"visit(value, fragments)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/InputType","path":"GraphQL/Schema/InputType.html","kind":"struct","full_name":"GraphQL::Schema::InputType","name":"InputType","abstract":true,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/ziprandom/graphql-crystal/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/schema.cr","line_number":26,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/AlibiType","kind":"struct","full_name":"GraphQL::Schema::AlibiType","name":"AlibiType"}],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema","kind":"module","full_name":"GraphQL::Schema","name":"Schema"},"doc":"a struct that can be inherited from\nwhen defining custom InputType structs\nfor conveniently accessing query parameters","summary":"<p>a struct that can be inherited from when defining custom InputType structs for conveniently accessing query parameters</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr#L26","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema.cr#L26","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Introspection","path":"GraphQL/Schema/Introspection.html","kind":"module","full_name":"GraphQL::Schema::Introspection","name":"Introspection","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":3,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"INTROSPECTION_TYPES","value":"\"\\n  # A String Value\\n  scalar String\\n\\n  # A Boolean Value\\n  scalar Boolean\\n\\n  # An Integer Number\\n  scalar Int\\n\\n  # A Floating Point Number\\n  scalar Float\\n\\n  # An ID\\n  scalar ID\\n\\n  # Optionally includes selection from the result set\\n  directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\\n  # Optionally excludes selection from the result set\\n  directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\\n  # Marks an element of a GraphQL schema as no longer supported.\\n  directive @deprecated(reason: String = \\\"No longer supported\\\") on FIELD_DEFINITION | ENUM_VALUE\\n\\n  type __Schema {\\n    types: [__Type!]!\\n    queryType: __Type!\\n    mutationType: __Type\\n    directives: [__Directive!]!\\n  }\\n\\n  type __Type {\\n    kind: __TypeKind!\\n    name: String\\n    description: String\\n    # OBJECT and INTERFACE only\\n    fields(includeDeprecated: Boolean = false): [__Field!]\\n    # OBJECT only\\n    interfaces: [__Type!]\\n    # INTERFACE and UNION only\\n    possibleTypes: [__Type!]\\n    # ENUM only\\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\\n    # INPUT_OBJECT only\\n    inputFields: [__InputValue!]\\n    # NON_NULL and LIST only\\n    ofType: __Type\\n  }\\n\\n  type __Field {\\n    name: String!\\n    description: String\\n    args: [__InputValue!]!\\n    type: __Type!\\n    isDeprecated: Boolean!\\n    deprecationReason: String\\n  }\\n\\n  type __InputValue {\\n    name: String!\\n    description: String\\n    type: __Type!\\n    defaultValue: String\\n  }\\n\\n  type __EnumValue {\\n    name: String!\\n    description: String\\n    isDeprecated: Boolean!\\n    deprecationReason: String\\n  }\\n\\n  type __Directive {\\n    name: String!\\n    description: String\\n    args: [__InputValue!]!\\n    locations: [__DirectiveLocation!]!\\n    onOperation: Boolean!\\n    onFragment: Boolean!\\n    onField: Boolean!\\n  }\\n\\n  enum __TypeKind {\\n    SCALAR\\n    OBJECT\\n    INTERFACE\\n    UNION\\n    ENUM\\n    INPUT_OBJECT\\n    LIST\\n    NON_NULL\\n  }\\n\\n  # A Directive can be adjacent to many parts\\n  # of the GraphQL language, a __DirectiveLocation\\n  # describes one such possible adjacencies.\\n  enum __DirectiveLocation {\\n    # Location adjacent\\n    # to a query operation\\n    QUERY\\n    # Location adjacent to\\n    # a mutation operation\\n    MUTATION\\n    # Location adjacent to\\n    # a subscription operation\\n    SUBSCRIPTION\\n    # Location adjacent to\\n    # a field\\n    FIELD\\n    # Location adjacent to\\n    # a fragment definition\\n    FRAGMENT_DEFINITION\\n    # Location adjacent to\\n    # a fragment spread\\n    FRAGMENT_SPREAD\\n    # Location adjacent to\\n    # an inline fragment\\n    INLINE_FRAGMENT\\n    # Location adjacent to\\n    # a schema definition\\n    SCHEMA\\n    # Location adjacent to\\n    # a scalar definition\\n    SCALAR\\n    # Location adjacent to\\n    # an object type definition\\n    OBJECT\\n    # Location adjacent to\\n    # a field definition\\n    FIELD_DEFINITION\\n    # Location adjacent to\\n    # an argument definition\\n    ARGUMENT_DEFINITION\\n    # Location adjacent to\\n    # an interface definition\\n    INTERFACE\\n    # Location adjacent to\\n    # a union definition\\n    UNION\\n    # Location adjacent to\\n    # an enum definition\\n    ENUM\\n    # Location adjacent to\\n    # an enum value definition\\n    ENUM_VALUE\\n    # Location adjacent to\\n    # an input object type definition\\n    INPUT_OBJECT\\n    # Location adjacent to\\n    # an input object field definition\\n    INPUT_FIELD_DEFINITION\\n  }\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Schema","kind":"class","full_name":"GraphQL::Schema::Schema","name":"Schema"}],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema","kind":"module","full_name":"GraphQL::Schema","name":"Schema"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Introspection/IntrospectionObject","path":"GraphQL/Schema/Introspection/IntrospectionObject.html","kind":"class","full_name":"GraphQL::Schema::Introspection::IntrospectionObject","name":"IntrospectionObject","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/schema/schema_introspection.cr","line_number":9,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Introspection","kind":"module","full_name":"GraphQL::Schema::Introspection","name":"Introspection"},"doc":"\nWrap an ObjectType intercepting field\nresolution for `__schema` and `__type`\nkeys\n","summary":"<p>Wrap an ObjectType intercepting field resolution for <code>__schema</code> and <code>__type</code> keys </p>","class_methods":[],"constructors":[{"id":"new(schema:GraphQL::Schema::Schema,query_resolver)-class-method","html_id":"new(schema:GraphQL::Schema::Schema,query_resolver)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":"GraphQL::Schema::Schema"},{"name":"query_resolver","doc":null,"default_value":"","external_name":"query_resolver","restriction":""}],"args_string":"(schema : GraphQL::Schema::Schema, query_resolver)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L14","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L14","def":{"name":"new","args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":"GraphQL::Schema::Schema"},{"name":"query_resolver","doc":null,"default_value":"","external_name":"query_resolver","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(schema, query_resolver)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"graphql_type-instance-method","html_id":"graphql_type-instance-method","name":"graphql_type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L18","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L18","def":{"name":"graphql_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@query_resolver.graphql_type"}},{"id":"mutation_resolver-instance-method","html_id":"mutation_resolver-instance-method","name":"mutation_resolver","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L12","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L12","def":{"name":"mutation_resolver","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mutation_resolver"}},{"id":"mutation_resolver=(mutation_resolver)-instance-method","html_id":"mutation_resolver=(mutation_resolver)-instance-method","name":"mutation_resolver=","doc":null,"summary":null,"abstract":false,"args":[{"name":"mutation_resolver","doc":null,"default_value":"","external_name":"mutation_resolver","restriction":""}],"args_string":"(mutation_resolver)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L12","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L12","def":{"name":"mutation_resolver=","args":[{"name":"mutation_resolver","doc":null,"default_value":"","external_name":"mutation_resolver","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mutation_resolver = mutation_resolver"}},{"id":"query_resolver:GraphQL::ObjectType-instance-method","html_id":"query_resolver:GraphQL::ObjectType-instance-method","name":"query_resolver","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : GraphQL::ObjectType","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L12","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L12","def":{"name":"query_resolver","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@query_resolver"}},{"id":"query_resolver=(query_resolver)-instance-method","html_id":"query_resolver=(query_resolver)-instance-method","name":"query_resolver=","doc":null,"summary":null,"abstract":false,"args":[{"name":"query_resolver","doc":null,"default_value":"","external_name":"query_resolver","restriction":""}],"args_string":"(query_resolver)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L12","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L12","def":{"name":"query_resolver=","args":[{"name":"query_resolver","doc":null,"default_value":"","external_name":"query_resolver","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@query_resolver = query_resolver"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nelse\n  name, args, context = name, arguments, context\n  case name\n  when \"__schema\"\n    @schema\n  when \"__type\"\n    @schema.types[args[\"name\"]]\n  else\n    @query_resolver.resolve_field(name, args, context)\n  end\nend"}},{"id":"resolve_field(name,args,context)-instance-method","html_id":"resolve_field(name,args,context)-instance-method","name":"resolve_field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(name, args, context)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L22","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L22","def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__schema\"\n  @schema\nwhen \"__type\"\n  @schema.types[args[\"name\"]]\nelse\n  @query_resolver.resolve_field(name, args, context)\nend"}},{"id":"schema=(schema)-instance-method","html_id":"schema=(schema)-instance-method","name":"schema=","doc":null,"summary":null,"abstract":false,"args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":""}],"args_string":"(schema)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L16","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_introspection.cr#L16","def":{"name":"schema=","args":[{"name":"schema","doc":null,"default_value":"","external_name":"schema","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@schema = schema"}}],"macros":[{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Schema::Introspection::IntrospectionObject\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}}],"types":[]}]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Middleware","path":"GraphQL/Schema/Middleware.html","kind":"module","full_name":"GraphQL::Schema::Middleware","name":"Middleware","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/schema/middleware.cr","line_number":3,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/middleware.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Directive","kind":"module","full_name":"GraphQL::Directive","name":"Directive"}],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema","kind":"module","full_name":"GraphQL::Schema","name":"Schema"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"call(node:GraphQL::Language::TypeDefinition|GraphQL::Language::FieldDefinition,selection:Array(Language::Selection),object:ResolveCBReturnType,context:Context)-instance-method","html_id":"call(node:GraphQL::Language::TypeDefinition|GraphQL::Language::FieldDefinition,selection:Array(Language::Selection),object:ResolveCBReturnType,context:Context)-instance-method","name":"call","doc":null,"summary":null,"abstract":true,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"GraphQL::Language::TypeDefinition | GraphQL::Language::FieldDefinition"},{"name":"selection","doc":null,"default_value":"","external_name":"selection","restriction":"Array(Language::Selection)"},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":"ResolveCBReturnType"},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"Context"}],"args_string":"(node : GraphQL::Language::TypeDefinition | GraphQL::Language::FieldDefinition, selection : Array(Language::Selection), object : ResolveCBReturnType, context : Context)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/middleware.cr#L6","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/middleware.cr#L6","def":{"name":"call","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"GraphQL::Language::TypeDefinition | GraphQL::Language::FieldDefinition"},{"name":"selection","doc":null,"default_value":"","external_name":"selection","restriction":"Array(Language::Selection)"},{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":"ResolveCBReturnType"},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"next:Middleware|Proc|Nil-instance-method","html_id":"next:Middleware|Proc|Nil-instance-method","name":"next","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Middleware | Proc | Nil","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/middleware.cr#L4","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/middleware.cr#L4","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Middleware | Proc | Nil","visibility":"Public","body":"@next"}},{"id":"next=(next:Middleware|Proc|Nil)-instance-method","html_id":"next=(next:Middleware|Proc|Nil)-instance-method","name":"next=","doc":null,"summary":null,"abstract":false,"args":[{"name":"next","doc":null,"default_value":"","external_name":"next","restriction":"Middleware | Proc | Nil"}],"args_string":"(next : Middleware | Proc | Nil)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/middleware.cr#L4","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/middleware.cr#L4","def":{"name":"next=","args":[{"name":"next","doc":null,"default_value":"","external_name":"next","restriction":"Middleware | Proc | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@next = next"}}],"macros":[],"types":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Middleware/Proc","path":"GraphQL/Schema/Middleware/Proc.html","kind":"alias","full_name":"GraphQL::Schema::Middleware::Proc","name":"Proc","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/schema/middleware.cr","line_number":21,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/middleware.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":true,"aliased":"Proc(GraphQL::Language::AbstractNode, Array(GraphQL::Language::AbstractNode), GraphQL::ResolveCBReturnType, GraphQL::Schema::Context, Tuple(GraphQL::ReturnType, Array(NamedTuple(message: String, path: Array(Int32 | String)))))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Middleware","kind":"module","full_name":"GraphQL::Schema::Middleware","name":"Middleware"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Schema","path":"GraphQL/Schema/Schema.html","kind":"class","full_name":"GraphQL::Schema::Schema","name":"Schema","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Introspection","kind":"module","full_name":"GraphQL::Schema::Introspection","name":"Introspection"},{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/schema/schema.cr","line_number":29,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr"},{"filename":"graphql-crystal/schema/schema_execute.cr","line_number":4,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"GRAPHQL_FIELDS","value":"[{:__typename, \"\", nil, \"\"}, {:types, \"\", nil, \"\"}, {:directives, \"\", nil, \"\"}, {:queryType, \"\", nil, \"\"}, {:mutationType, \"\", nil, \"\"}] of Tuple(Symbol, String, Hash(String, String) | ::Nil, String)","doc":null,"summary":null},{"name":"ScalarTypes","value":"{ {\"String\", \"A String Value\"}, {\"Boolean\", \"A Boolean Value\"}, {\"Int\", \"An Integer Number\"}, {\"Float\", \"A Floating Point Number\"}, {\"ID\", \"An ID\"} }","doc":"\nDescriptions for Scalar Types\n","summary":"<p>Descriptions for Scalar Types </p>"}],"included_modules":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/ObjectType","kind":"module","full_name":"GraphQL::ObjectType","name":"ObjectType"},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Introspection","kind":"module","full_name":"GraphQL::Schema::Introspection","name":"Introspection"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema","kind":"module","full_name":"GraphQL::Schema","name":"Schema"},"doc":"\nRepresents a GraphQL Schema against which queries can be executed.\n","summary":"<p>Represents a GraphQL Schema against which queries can be executed.</p>","class_methods":[],"constructors":[{"id":"new(document:Language::Document)-class-method","html_id":"new(document:Language::Document)-class-method","name":"new","doc":"\nTakes a parsed GraphQL schema definition\n","summary":"<p>Takes a parsed GraphQL schema definition </p>","abstract":false,"args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":"Language::Document"}],"args_string":"(document : Language::Document)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":"Language::Document"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(document)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add_input_type(name:String,type:InputType.class)-instance-method","html_id":"add_input_type(name:String,type:InputType.class)-instance-method","name":"add_input_type","doc":"\nregister a Struct to parse query variables\nname : the name of the GraphQL Input Type that gets parsed\ntype : the Struct Type to parse the JSON into\n(has to have the class method from_json see\nhttps://crystal-lang.org/api/0.23.1/JSON.html#mapping%28properties%2Cstrict%3Dfalse%29-macro)\nfor more infos","summary":"<p>register a Struct to parse query variables name : the name of the GraphQL Input Type that gets parsed type : the Struct Type to parse the JSON into (has to have the class method from_json see https://crystal-lang.org/api/0.23.1/JSON.html#mapping%28properties%2Cstrict%3Dfalse%29-macro) for more infos</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"InputType.class"}],"args_string":"(name : String, type : InputType.class)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L94","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L94","def":{"name":"add_input_type","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"InputType.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@input_types[name] = type"}},{"id":"directive_definitions:Hash(String,GraphQL::Language::DirectiveDefinition)-instance-method","html_id":"directive_definitions:Hash(String,GraphQL::Language::DirectiveDefinition)-instance-method","name":"directive_definitions","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, GraphQL::Language::DirectiveDefinition)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L31","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L31","def":{"name":"directive_definitions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directive_definitions"}},{"id":"directive_middlewares:Array(GraphQL::Directives::IncludeDirective|GraphQL::Directives::SkipDirective)-instance-method","html_id":"directive_middlewares:Array(GraphQL::Directives::IncludeDirective|GraphQL::Directives::SkipDirective)-instance-method","name":"directive_middlewares","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(GraphQL::Directives::IncludeDirective | GraphQL::Directives::SkipDirective)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L31","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L31","def":{"name":"directive_middlewares","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@directive_middlewares"}},{"id":"execute(params=ExecuteParams,context=Context.new(self,max_depth))-instance-method","html_id":"execute(params=ExecuteParams,context=Context.new(self,max_depth))-instance-method","name":"execute","doc":"\nexecute a query against the schema\n`params`: the Hash with main data\n`context`: *optional* a custom context to be injected in\n           field callbacks.","summary":"<p>execute a query against the schema <code>params</code>: the Hash with main data <code>context</code>: <em>optional</em> a custom context to be injected in            field callbacks.</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"ExecuteParams","external_name":"params","restriction":""},{"name":"context","doc":null,"default_value":"Context.new(self, max_depth)","external_name":"context","restriction":""}],"args_string":"(params = <span class=\"t\">ExecuteParams</span>, context = <span class=\"t\">Context</span>.<span class=\"k\">new</span>(<span class=\"k\">self</span>, max_depth))","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr#L19","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr#L19","def":{"name":"execute","args":[{"name":"params","doc":null,"default_value":"ExecuteParams","external_name":"params","restriction":""},{"name":"context","doc":null,"default_value":"Context.new(self, max_depth)","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"document = params[\"query\"]?.as(String)\nvariables = params[\"variables\"]?.as(Hash(String, JSON::Type) | ::Nil)\noperation_name = params[\"operationName\"]?.as(String | ::Nil)\nexecute(Language.parse(document), variables, operation_name, context)\n"}},{"id":"execute(document:Language::Document,params,operation_name=nil,context=Context.new(self,max_depth))-instance-method","html_id":"execute(document:Language::Document,params,operation_name=nil,context=Context.new(self,max_depth))-instance-method","name":"execute","doc":"\nexecute a query against the schema\n`document`: a parsed query\n`params`: *optional* the query variables as a Hash\n`operation_name`: *optional* the query or mutation name to be executed\n`context`: *optional* a custom context to be injected in\n           field callbacks.","summary":"<p>execute a query against the schema <code>document</code>: a parsed query <code>params</code>: <em>optional</em> the query variables as a Hash <code>operation_name</code>: <em>optional</em> the query or mutation name to be executed <code>context</code>: <em>optional</em> a custom context to be injected in            field callbacks.</p>","abstract":false,"args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":"Language::Document"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""},{"name":"operation_name","doc":null,"default_value":"nil","external_name":"operation_name","restriction":""},{"name":"context","doc":null,"default_value":"Context.new(self, max_depth)","external_name":"context","restriction":""}],"args_string":"(document : Language::Document, params, operation_name = <span class=\"n\">nil</span>, context = <span class=\"t\">Context</span>.<span class=\"k\">new</span>(<span class=\"k\">self</span>, max_depth))","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr#L45","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr#L45","def":{"name":"execute","args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":"Language::Document"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""},{"name":"operation_name","doc":null,"default_value":"nil","external_name":"operation_name","restriction":""},{"name":"context","doc":null,"default_value":"Context.new(self, max_depth)","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"execute(document, cast_to_jsontype(params), operation_name, context)"}},{"id":"execute(document:String,params=nil,operation_name=nil,context=Context.new(self,max_depth))-instance-method","html_id":"execute(document:String,params=nil,operation_name=nil,context=Context.new(self,max_depth))-instance-method","name":"execute","doc":"\nexecute a query against the schema\n`document`: a string representing the query to be executed\n`params`: *optional* the query variables as a Hash\n`operation_name`: *optional* the query or mutation name to be executed\n`context`: *optional* a custom context to be injected in\n           field callbacks.","summary":"<p>execute a query against the schema <code>document</code>: a string representing the query to be executed <code>params</code>: <em>optional</em> the query variables as a Hash <code>operation_name</code>: <em>optional</em> the query or mutation name to be executed <code>context</code>: <em>optional</em> a custom context to be injected in            field callbacks.</p>","abstract":false,"args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":""},{"name":"operation_name","doc":null,"default_value":"nil","external_name":"operation_name","restriction":""},{"name":"context","doc":null,"default_value":"Context.new(self, max_depth)","external_name":"context","restriction":""}],"args_string":"(document : String, params = <span class=\"n\">nil</span>, operation_name = <span class=\"n\">nil</span>, context = <span class=\"t\">Context</span>.<span class=\"k\">new</span>(<span class=\"k\">self</span>, max_depth))","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr#L34","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr#L34","def":{"name":"execute","args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":""},{"name":"operation_name","doc":null,"default_value":"nil","external_name":"operation_name","restriction":""},{"name":"context","doc":null,"default_value":"Context.new(self, max_depth)","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"execute(Language.parse(document), params, operation_name, context)"}},{"id":"execute(document:Language::Document,params:Hash(String,JSON::Type)?,operation_name:String?,context=Context.new(self,max_depth))-instance-method","html_id":"execute(document:Language::Document,params:Hash(String,JSON::Type)?,operation_name:String?,context=Context.new(self,max_depth))-instance-method","name":"execute","doc":"\nexecute a query against the schema\n`document`: a parsed query\n`params`: *optional* the query variables as a Hash\n`operation_name`: *optional* the query or mutation name to be executed\n`context`: *optional* a custom context to be injected in\n           field callbacks.","summary":"<p>execute a query against the schema <code>document</code>: a parsed query <code>params</code>: <em>optional</em> the query variables as a Hash <code>operation_name</code>: <em>optional</em> the query or mutation name to be executed <code>context</code>: <em>optional</em> a custom context to be injected in            field callbacks.</p>","abstract":false,"args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":"Language::Document"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"Hash(String, JSON::Type) | ::Nil"},{"name":"operation_name","doc":null,"default_value":"","external_name":"operation_name","restriction":"String | ::Nil"},{"name":"context","doc":null,"default_value":"Context.new(self, max_depth)","external_name":"context","restriction":""}],"args_string":"(document : Language::Document, params : Hash(String, JSON::Type)?, operation_name : String?, context = <span class=\"t\">Context</span>.<span class=\"k\">new</span>(<span class=\"k\">self</span>, max_depth))","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr#L56","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr#L56","def":{"name":"execute","args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":"Language::Document"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"Hash(String, JSON::Type) | ::Nil"},{"name":"operation_name","doc":null,"default_value":"","external_name":"operation_name","restriction":"String | ::Nil"},{"name":"context","doc":null,"default_value":"Context.new(self, max_depth)","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"queries, mutations, fragments = extract_request_parts(document)\ncontext.fragments = fragments\noperations = (queries + mutations)\nquery = if operations.size > 1\n  operations.find do |operation|\n    operation.name == operation_name\n  end\nelse\n  operations.first\nend\nif query\nelse\n  return {\"errors\" => [{\"message\" => \"Must provide a valid operation name if query contains multiple operations.\", \"path\" => [] of String}]}\nend\nbegin\n  substitute_variables_from_params(query, params ? params : {} of String => JSON::Type)\nrescue e : Exception\n  return {\"data\" => nil, \"errors\" => [{\"message\" => e.message, \"path\" => [] of String}]}\nend\nroot_element, root_element_definition = if query.operation_type == \"query\"\n  {query_resolver, @types[query_resolver.try(&.graphql_type)]}\nelse\n  {mutation_resolver, @types[mutation_resolver.try(&.graphql_type)]}\nend\nresult, errors = resolve_selections_for(root_element_definition, query.selections, root_element, context)\nres = {\"data\" => result}\nif (errors.any?)\n  error_hash = errors.map do |e|\n    [\"message\", \"path\"].reduce(nil) do |m, k|\n      pair = {k => e[k]}\n      m ? m.merge(pair) : pair\n    end\n  end\n  res.merge({\"errors\" => error_hash})\nelse\n  res\nend\n"}},{"id":"max_depth(max_depth)-instance-method","html_id":"max_depth(max_depth)-instance-method","name":"max_depth","doc":null,"summary":null,"abstract":false,"args":[{"name":"max_depth","doc":null,"default_value":"","external_name":"max_depth","restriction":""}],"args_string":"(max_depth)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L138","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L138","def":{"name":"max_depth","args":[{"name":"max_depth","doc":null,"default_value":"","external_name":"max_depth","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_depth = max_depth"}},{"id":"max_depth:Int32?-instance-method","html_id":"max_depth:Int32?-instance-method","name":"max_depth","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L31","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L31","def":{"name":"max_depth","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_depth"}},{"id":"mutation_resolver:GraphQL::ObjectType?-instance-method","html_id":"mutation_resolver:GraphQL::ObjectType?-instance-method","name":"mutation_resolver","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : GraphQL::ObjectType?","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L33","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L33","def":{"name":"mutation_resolver","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mutation_resolver"}},{"id":"mutation_resolver=(mutation_resolver)-instance-method","html_id":"mutation_resolver=(mutation_resolver)-instance-method","name":"mutation_resolver=","doc":null,"summary":null,"abstract":false,"args":[{"name":"mutation_resolver","doc":null,"default_value":"","external_name":"mutation_resolver","restriction":""}],"args_string":"(mutation_resolver)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L33","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L33","def":{"name":"mutation_resolver=","args":[{"name":"mutation_resolver","doc":null,"default_value":"","external_name":"mutation_resolver","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mutation_resolver = mutation_resolver"}},{"id":"query_resolver:GraphQL::ObjectType?-instance-method","html_id":"query_resolver:GraphQL::ObjectType?-instance-method","name":"query_resolver","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : GraphQL::ObjectType?","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L33","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L33","def":{"name":"query_resolver","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@query_resolver"}},{"id":"query_resolver=(query:ObjectType)-instance-method","html_id":"query_resolver=(query:ObjectType)-instance-method","name":"query_resolver=","doc":"\nWrap the Root Query in the IntrospectionObject\nto intercept calls to __schema and __type field","summary":"<p>Wrap the Root Query in the IntrospectionObject to intercept calls to __schema and __type field</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"ObjectType"}],"args_string":"(query : ObjectType)","source_link":null,"source_link":null,"def":{"name":"query_resolver=","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"ObjectType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@query_resolver = IntrospectionObject.new(self, query)"}},{"id":"query_resolver=(query_resolver)-instance-method","html_id":"query_resolver=(query_resolver)-instance-method","name":"query_resolver=","doc":null,"summary":null,"abstract":false,"args":[{"name":"query_resolver","doc":null,"default_value":"","external_name":"query_resolver","restriction":""}],"args_string":"(query_resolver)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L33","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L33","def":{"name":"query_resolver=","args":[{"name":"query_resolver","doc":null,"default_value":"","external_name":"query_resolver","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@query_resolver = query_resolver"}},{"id":"resolve(&block)-instance-method","html_id":"resolve(&amp;block)-instance-method","name":"resolve","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L140","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L140","def":{"name":"resolve","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"with self yield\nself\n"}},{"id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","html_id":"resolve_field(name:String,arguments,context:GraphQL::Schema::Context)-instance-method","name":"resolve_field","doc":"\nresolve a named field on this object with query arguments and context\n","summary":"<p>resolve a named field on this object with query arguments and context </p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"args_string":"(name : String, arguments, context : GraphQL::Schema::Context)","source_link":null,"source_link":null,"def":{"name":"resolve_field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::GraphQL::Schema::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen \"__typename\"\n  __typename_field(arguments, context)\nwhen \"types\"\n  types_field(arguments, context)\nwhen \"directives\"\n  directives_field(arguments, context)\nwhen \"queryType\"\n  queryType_field(arguments, context)\nwhen \"mutationType\"\n  mutationType_field(arguments, context)\nelse\n  super(name, arguments, context)\nend"}},{"id":"type_resolve(type:String|Language::AbstractNode)-instance-method","html_id":"type_resolve(type:String|Language::AbstractNode)-instance-method","name":"type_resolve","doc":"get a type definition\n","summary":"<p>get a type definition </p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String | Language::AbstractNode"}],"args_string":"(type : String | Language::AbstractNode)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L100","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L100","def":{"name":"type_resolve","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String | Language::AbstractNode"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case type\nwhen String\n  @types[type]\nwhen Language::TypeName\n  @types[type.name]\nelse\n  type\nend"}},{"id":"types:Hash(String,GraphQL::Language::TypeDefinition)-instance-method","html_id":"types:Hash(String,GraphQL::Language::TypeDefinition)-instance-method","name":"types","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, GraphQL::Language::TypeDefinition)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L31","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema.cr#L31","def":{"name":"types","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@types"}},{"id":"wrap_cb(resolved:ObjectType)-instance-method","html_id":"wrap_cb(resolved:ObjectType)-instance-method","name":"wrap_cb","doc":null,"summary":null,"abstract":false,"args":[{"name":"resolved","doc":null,"default_value":"","external_name":"resolved","restriction":"ObjectType"}],"args_string":"(resolved : ObjectType)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr#L329","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr#L329","def":{"name":"wrap_cb","args":[{"name":"resolved","doc":null,"default_value":"","external_name":"resolved","restriction":"ObjectType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"->(name : String, args : Hash(String, ReturnType), context : GraphQL::Schema::Context) do\n  cast_to_resolvecbreturntype(resolved.resolve_field(name, args, context))\nend"}}],"macros":[{"id":"field(name)-macro","html_id":"field(name)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        field(\n{{ name }}\n, \"\", nil, \"\") \n{% if block.is_a?(Block) %} {{ block }}{% end %}\n\n        \n"}},{"id":"field(name,description,args,typename)-macro","html_id":"field(name,description,args,typename)-macro","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"args_string":"(name, description, args, typename)","source_link":null,"def":{"name":"field","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"typename","doc":null,"default_value":"","external_name":"typename","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% GRAPHQL_FIELDS << ({name, description, args, typename}) %}\n\n        private def \n{{ name.id }}\n_field(\n{{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}\n, \n{{ (((block.is_a?(Block)) && block.args.size > 1) ? block.args[1].id : \"context\").id }}\n)\n          \n{% if block.is_a?(Block) %}\n              context.with_self({{ ((block.is_a?(Block)) && block.args.size > 0) ? block.args.first.id : args }}) do\n                {{ block.body }}\n              end\n          {% else %}\n            {{ name.id }}\n          {% end %}\n\n        \nend\n        \n"}},{"id":"inject-macro","html_id":"inject-macro","name":"inject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"inject","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    injection\n    macro inherited\n      injection\n    \nend\n  \n"}},{"id":"injection-macro","html_id":"injection-macro","name":"injection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"injection","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n        \n#\n\n        \n# resolve a named field on this object with query arguments and context\n\n        \n#\n\n        def resolve_field(name : String, arguments, context : ::GraphQL::Schema::Context)\n          \n\\{% \nprev_def = @type.methods.find(&.name.==(\"resolve_field\")) %}\n          \n\\{% if\n !GRAPHQL_FIELDS.empty? %}\n              case name\n                  \n\\{% for\n field in @type.constant(\"GRAPHQL_FIELDS\") %}\n                    when \"\n\\{\n{ field[0].id }}\" \n#\\\\\\\\\\GraphQL::Schema::Schema\n\n                      \n\\{\n{field[0].id}}_field(arguments, context)\n                      \n\\{% end\n %}\n              \nelse\n                \n\\{% if\n prev_def.is_a?(Def) %}\n                    \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                    \n\\{\n{prev_def.body}}\n                \n\\{% e\nlse %}\n                  super(name, arguments, context)\n                \n\\{% end\n %}\n              \nend\n          \n\\{% e\nlse %}\n             \n\\{% if\n prev_def.is_a?(Def) %}\n                 \n\\{\n{prev_def.args.map(&.name).splat}} = name, arguments, context\n                 \n\\{\n{prev_def.body}}\n             \n\\{% e\nlse %}\n               super(name, arguments, context)\n             \n\\{% end\n %}\n          \n\\{% end\n %}\n        \nend\n        \nend\n  \n"}}],"types":[{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Schema/Args","path":"GraphQL/Schema/Schema/Args.html","kind":"alias","full_name":"GraphQL::Schema::Schema::Args","name":"Args","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/schema/schema_execute.cr","line_number":104,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":true,"aliased":"Tuple(GraphQL::Language::AbstractNode, Array(GraphQL::Language::AbstractNode), GraphQL::ResolveCBReturnType, GraphQL::Schema::Context)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Schema","kind":"class","full_name":"GraphQL::Schema::Schema","name":"Schema"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Schema/ExecuteParams","path":"GraphQL/Schema/Schema/ExecuteParams.html","kind":"alias","full_name":"GraphQL::Schema::Schema::ExecuteParams","name":"ExecuteParams","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphql-crystal/schema/schema_execute.cr","line_number":12,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/schema_execute.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":true,"aliased":"(Hash(String, Hash(String, Array(JSON::Type) | Bool | Float64 | Hash(String, JSON::Type) | Int64 | String | Nil) | String) | Hash(String, JSON::Type))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/Schema","kind":"class","full_name":"GraphQL::Schema::Schema","name":"Schema"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema/VariableResolver","path":"GraphQL/Schema/VariableResolver.html","kind":"class","full_name":"GraphQL::Schema::VariableResolver","name":"VariableResolver","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/schema/variable_resolver.cr","line_number":7,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/Schema","kind":"module","full_name":"GraphQL::Schema","name":"Schema"},"doc":"\nVisitor to Traverse the Queries AST and replace\nVariableIdentifiers with the variables provided\nin params","summary":"<p>Visitor to Traverse the Queries AST and replace VariableIdentifiers with the variables provided in params</p>","class_methods":[{"id":"visit(query:Language::OperationDefinition,params)-class-method","html_id":"visit(query:Language::OperationDefinition,params)-class-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Language::OperationDefinition"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(query : Language::OperationDefinition, params)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr#L8","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr#L8","def":{"name":"visit","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Language::OperationDefinition"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query.tap(&.selections = (visit(query.selections, params)).map do |__arg1|\n  __arg1.as(Language::AbstractNode)\nend)"}},{"id":"visit(fields:Array(Language::AbstractNode),params)-class-method","html_id":"visit(fields:Array(Language::AbstractNode),params)-class-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":"Array(Language::AbstractNode)"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(fields : Array(Language::AbstractNode), params)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr#L12","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr#L12","def":{"name":"visit","args":[{"name":"fields","doc":null,"default_value":"","external_name":"fields","restriction":"Array(Language::AbstractNode)"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"fields.map do |field|\n  visit(field, params)\nend"}},{"id":"visit(field:Language::Field,params)-class-method","html_id":"visit(field:Language::Field,params)-class-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Language::Field"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(field : Language::Field, params)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr#L16","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr#L16","def":{"name":"visit","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Language::Field"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"field.tap do |field|\n  field.selections = (visit(field.selections, params)).map do |__arg2|\n    __arg2.as(Language::Selection)\n  end\n  field.arguments = (visit(field.arguments, params)).map do |__arg3|\n    __arg3.as(Language::Argument)\n  end\nend"}},{"id":"visit(argument:Language::Argument,params)-class-method","html_id":"visit(argument:Language::Argument,params)-class-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"argument","doc":null,"default_value":"","external_name":"argument","restriction":"Language::Argument"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(argument : Language::Argument, params)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr#L23","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr#L23","def":{"name":"visit","args":[{"name":"argument","doc":null,"default_value":"","external_name":"argument","restriction":"Language::Argument"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"argument.tap(&.value = (visit(argument.value, params)).as(Language::ArgumentValue))"}},{"id":"visit(variable:Language::VariableIdentifier,params)-class-method","html_id":"visit(variable:Language::VariableIdentifier,params)-class-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"variable","doc":null,"default_value":"","external_name":"variable","restriction":"Language::VariableIdentifier"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(variable : Language::VariableIdentifier, params)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr#L27","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr#L27","def":{"name":"visit","args":[{"name":"variable","doc":null,"default_value":"","external_name":"variable","restriction":"Language::VariableIdentifier"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"params[variable.name]"}},{"id":"visit(field,params)-class-method","html_id":"visit(field,params)-class-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(field, params)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr#L31","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/schema/variable_resolver.cr#L31","def":{"name":"visit","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"field"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL/TypeValidation","path":"GraphQL/TypeValidation.html","kind":"class","full_name":"GraphQL::TypeValidation","name":"TypeValidation","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphql-crystal/types/type_validation.cr","line_number":6,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/type_validation.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/ziprandom/graphql-crystal/GraphQL","kind":"module","full_name":"GraphQL","name":"GraphQL"},"doc":"\nA TypeValidation is used to validate a given input against a\nTypeDefinition.\n","summary":"<p>A TypeValidation is used to validate a given input against a TypeDefinition.</p>","class_methods":[],"constructors":[{"id":"new(types:Hash(String,Language::TypeDefinition))-class-method","html_id":"new(types:Hash(String,Language::TypeDefinition))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"types","doc":null,"default_value":"","external_name":"types","restriction":"Hash(String, Language::TypeDefinition)"}],"args_string":"(types : Hash(String, Language::TypeDefinition))","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/type_validation.cr#L9","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/type_validation.cr#L9","def":{"name":"new","args":[{"name":"types","doc":null,"default_value":"","external_name":"types","restriction":"Hash(String, Language::TypeDefinition)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(types)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"accepts?(type_definition:GraphQL::Language::AbstractNode,value):Bool-instance-method","html_id":"accepts?(type_definition:GraphQL::Language::AbstractNode,value):Bool-instance-method","name":"accepts?","doc":"\nReturns true if `value` corresponds to\n`type_definition`.\n","summary":"<p>Returns true if <code>value</code> corresponds to <code>type_definition</code>.</p>","abstract":false,"args":[{"name":"type_definition","doc":null,"default_value":"","external_name":"type_definition","restriction":"GraphQL::Language::AbstractNode"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(type_definition : GraphQL::Language::AbstractNode, value) : Bool","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/type_validation.cr#L15","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/graphql-crystal/types/type_validation.cr#L15","def":{"name":"accepts?","args":[{"name":"type_definition","doc":null,"default_value":"","external_name":"type_definition","restriction":"GraphQL::Language::AbstractNode"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if (value == nil) && (!(type_definition.is_a?(Language::NonNullType)))\n  return true\nend\ncase type_definition\nwhen Language::EnumTypeDefinition\n  if value.is_a?(Language::AEnum)\n    __temp_237 = type_definition.name\n    @enum_values_cache[__temp_237]? || (@enum_values_cache[__temp_237] = type_definition.fvalues.map do |__arg0|\n      (__arg0.as(Language::EnumValueDefinition)).name\n    end)\n    @enum_values_cache[type_definition.name].not_nil!.includes?(value.name)\n  else\n    false\n  end\nwhen Language::UnionTypeDefinition\n  type_definition.types.any? do |_type|\n    accepts?(_type, value)\n  end\nwhen Language::NonNullType\n  value != nil ? accepts?(type_definition.of_type, value) : false\nwhen Language::ListType\n  if value.is_a?(Array)\n    value.map do |v|\n      (accepts?(type_definition.of_type, v)).as(Bool)\n    end.all? do |r|\n      !(!r)\n    end\n  else\n    false\n  end\nwhen Language::ScalarTypeDefinition\n  case type_definition.name\n  when \"ID\"\n    (value.is_a?(Int)) || (value.is_a?(String))\n  when \"Int\"\n    value.is_a?(Int)\n  when \"Float\"\n    value.is_a?(Number)\n  when \"String\"\n    value.is_a?(String)\n  when \"Boolean\"\n    value.is_a?(Bool)\n  else\n    false\n  end\nwhen Language::InputObjectTypeDefinition\n  if value.is_a?(Hash)\n  else\n    return false\n  end\n  (type_definition.fields.map(&.name) + value.keys).uniq.each do |key|\n    if field = type_definition.fields.find do |__arg2|\n      __arg2.name == key\n    end\n    else\n      return false\n    end\n    if value.has_key?(field.name)\n      if accepts?(field.type, value[field.name])\n      else\n        return false\n      end\n    else\n      if field.default_value\n        if accepts?(field.type, field.default_value)\n        else\n          return false\n        end\n      else\n        return false\n      end\n    end\n  end\n  return true\nwhen Language::TypeName\n  accepts?(@types[type_definition.name], value)\nelse\n  false\nend\n"}}],"macros":[],"types":[]}]},{"html_id":"github.com/ziprandom/graphql-crystal/NamedTuple","path":"NamedTuple.html","kind":"struct","full_name":"NamedTuple(**T)","name":"NamedTuple","abstract":false,"superclass":{"html_id":"github.com/ziprandom/graphql-crystal/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/ziprandom/graphql-crystal/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/ziprandom/graphql-crystal/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"core_ext/named_tuple.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/core_ext/named_tuple.cr"},{"filename":"lib/msgpack/src/message_pack/to_msgpack.cr","line_number":56,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/msgpack/src/message_pack/to_msgpack.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A named tuple is a fixed-size, immutable, stack-allocated mapping\nof a fixed set of keys to values.\n\nYou can think of a `NamedTuple` as an immutable `Hash` whose keys (which\nare of type `Symbol`), and the types for each key, are known at compile time.\n\nA named tuple can be created with a named tuple literal:\n\n```\nlanguage = {name: \"Crystal\", year: 2011} # NamedTuple(name: String, year: Int32)\n\nlanguage[:name]  # => \"Crystal\"\nlanguage[:year]  # => 2011\nlanguage[:other] # compile time error\n```\n\nThe compiler knows what types are in each key, so when indexing a named tuple\nwith a symbol literal the compiler will return the value for that key and\nwith the expected type, like in the above snippet. Indexing with a symbol\nliteral for which there's no key will give a compile-time error.\n\nIndexing with a symbol that is only known at runtime will return\na value whose type is the union of all the types in the named tuple,\nand might raise `KeyError`.","summary":"<p>A named tuple is a fixed-size, immutable, stack-allocated mapping of a fixed set of keys to values.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"merge(other:NamedTuple?)-instance-method","html_id":"merge(other:NamedTuple?)-instance-method","name":"merge","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"NamedTuple | Nil"}],"args_string":"(other : NamedTuple?)","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/core_ext/named_tuple.cr#L2","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/core_ext/named_tuple.cr#L2","def":{"name":"merge","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"NamedTuple | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if other.is_a?(NamedTuple)\n  merge_implementation(other)\nelse\n  self\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/ziprandom/graphql-crystal/Object","path":"Object.html","kind":"class","full_name":"Object","name":"Object","abstract":true,"superclass":null,"ancestors":[],"locations":[{"filename":"core_ext/object.cr","line_number":1,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/core_ext/object.cr"},{"filename":"lib/cltk/src/cltk/cfg.cr","line_number":6,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/cltk/src/cltk/cfg.cr"},{"filename":"lib/msgpack/src/message_pack/to_msgpack.cr","line_number":3,"url":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/lib/msgpack/src/message_pack/to_msgpack.cr"}],"repository_name":"github.com/ziprandom/graphql-crystal","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Object` is the base type of all Crystal objects.","summary":"<p><code><a href=\"Object.html\">Object</a></code> is the base type of all Crystal objects.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"debug-instance-method","html_id":"debug-instance-method","name":"debug","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/core_ext/object.cr#L2","source_link":"https://github.com/ziprandom/graphql-crystal/blob/b81be85d4635e6f9d307ea277f3548eb32ee6ecd/src/core_ext/object.cr#L2","def":{"name":"debug","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"pp(self)"}}],"macros":[],"types":[]}]}}